{"title":"对象链接的方法","uid":"0ec65ba286b3197dc2b4ec62da6fde2a","slug":"对象链接的方法","date":"2021-04-10T11:26:01.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/对象链接的方法.json","keywords":"👨‍💻🎸🍺","cover":null,"content":"<p>对象链接也叫 OLOO ( Objects Linked to Other Objects )， 说的直白一点就是对象 A 链接对象 B，对象 A 可以访问对象 B 的属性和方法。</p>\n<p>举个🌰，我们创建一个工具对象 <code>BasicFormatter</code>，然后通过不同的方式创建可以访问 <code>BasicFormatter</code> 的工具对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const BasicFormatter &#x3D; &#123;\n  format: function (msg) &#123;\n    return msg.toUpperCase()\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"隐式\"><a href=\"#隐式\" class=\"headerlink\" title=\"隐式\"></a>隐式</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;* \n  Implicit 隐式\n  通过 Object.create 方法创建一个以 BasicFormatter 为原型的对象\n  这样就能通过 __proto__ 调用原型链上的 format 函数 \n*&#x2F;\nconst Foo &#x3D; Object.create(BasicFormatter)\nFoo.saySomething &#x3D; function (msg) &#123;\n  console.log(this.format(msg))\n&#125;\n\nFoo.saySomething(&#39;this is foo!&#39;)</code></pre>\n\n<h2 id=\"显式\"><a href=\"#显式\" class=\"headerlink\" title=\"显式\"></a>显式</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;* \n  Explicit 显式\n  直接把需要链接的对象定义在自身上\n*&#x2F;\nconst Bar &#x3D; &#123;\n  formatter: BasicFormatter,\n  saySomething(msg) &#123;\n    console.log(this.formatter.format(msg))\n  &#125;\n&#125;\n\nBar.saySomething(&#39;this is bar!&#39;)</code></pre>\n\n","text":"对象链接也叫 OLOO ( Objects Linked to Other Objects )， 说的直白一点就是对象 A 链接对象 B，对象 A 可以访问对象 B 的属性和方法。 举个🌰，我们创建一个工具对象 BasicFormatter，然后通过不同的方式创建可以访问 Bas...","link":"","photos":[],"count_time":{"symbolsCount":802,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":14,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9A%90%E5%BC%8F\"><span class=\"toc-text\">隐式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%98%BE%E5%BC%8F\"><span class=\"toc-text\">显式</span></a></li></ol>","author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JS的三种继承","uid":"a5b603fdecca7f9969a0f73abd417029","slug":"JS的三种继承","date":"2021-04-17T11:04:48.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/JS的三种继承.json","keywords":"👨‍💻🎸🍺","cover":null,"text":"ES6 Classclass Person &#123; constructor(name, age) &#123; this.name &#x3D; name this.age &#x3D; age &#125; getInfo() &#123; return &#96;nam...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":14,"path":"api/tags/JavaScript.json"}],"author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"单例模式","uid":"5e422a9b2c69bd7294ec71b84cbbb53b","slug":"单例模式","date":"2021-03-02T00:47:39.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/单例模式.json","keywords":"👨‍💻🎸🍺","cover":null,"text":"代码实现以数据库连接为例简单实现一个单例 class Database &#123; constructor(options) &#123; this.options &#x3D; options &#125; getConnection() &#123; console.log...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":14,"path":"api/tags/JavaScript.json"},{"name":"设计模式","slug":"设计模式","count":1,"path":"api/tags/设计模式.json"}],"author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}