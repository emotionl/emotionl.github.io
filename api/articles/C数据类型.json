{"title":"C数据类型","uid":"91073ca00ced3eaf093ce066e8170e85","slug":"C数据类型","date":"2021-06-18T02:52:41.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/C数据类型.json","keywords":"👨‍💻🎸🍺","cover":null,"content":"<h2 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;limits.h&gt;\n#include &lt;math.h&gt;\n#include &lt;stdio.h&gt;\n\nint main( int argc, char* argv[] ) &#123;\n  &#x2F;* 有符号整形 *&#x2F;\n  short     si &#x3D; 0;\n  int       i  &#x3D; 0;\n  long      li &#x3D; 0;\n  long long ll &#x3D; 0;\n  &#x2F;* 无符号整形 *&#x2F;\n  unsigned short     usi &#x3D; 0;\n  unsigned int       ui  &#x3D; 0;\n  unsigned long      uli &#x3D; 0;\n  unsigned long long ull &#x3D; 0;\n  printf( &quot;short               长度 : %d\\n&quot;, sizeof( short ) );               &#x2F;&#x2F; 2\n  printf( &quot;int                 长度 : %d\\n&quot;, sizeof( int ) );                 &#x2F;&#x2F; 4\n  printf( &quot;long                长度 : %d\\n&quot;, sizeof( long ) );                &#x2F;&#x2F; 4\n  printf( &quot;long long           长度 : %d\\n&quot;, sizeof( long long ) );           &#x2F;&#x2F; 8\n  printf( &quot;unsigned short      长度 : %d\\n&quot;, sizeof( unsigned short ) );      &#x2F;&#x2F; 2\n  printf( &quot;unsigned int        长度 : %d\\n&quot;, sizeof( unsigned int ) );        &#x2F;&#x2F; 4\n  printf( &quot;unsigned long       长度 : %d\\n&quot;, sizeof( unsigned long ) );       &#x2F;&#x2F; 4\n  printf( &quot;unsigned long long  长度 : %d\\n&quot;, sizeof( unsigned long long ) );  &#x2F;&#x2F; 8\n  printf( &quot;int                 范围 : %d &#x3D;&gt; %d\\n&quot;, INT_MIN, INT_MAX );        &#x2F;&#x2F; -2147483648 &#x3D;&gt; 2147483647\n  printf( &quot;unsigned int        范围 : %d &#x3D;&gt; %u\\n&quot;, 0, UINT_MAX );             &#x2F;&#x2F; 0 &#x3D;&gt; 4294967295\n  return 0;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li><p><code>sizeof</code> 运算符可以返回变量或者变量类型的大小(单位:字节)</p>\n</li>\n<li><p>由于 <code>int</code> 占据 4 个字节即 8 * 4 = 32 个 Bit，符号占有 Bit，所以</p>\n<p>INT_MIN = 2 ^ 31 * ( -1 )</p>\n<p>INT_MAX = 2 ^ 31 - 1</p>\n</li>\n<li><p><code>printf</code> 中的格式字符</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">格式字符</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">d</td>\n<td align=\"left\">以十进制形式输出带符号整数(正数不输出符号10</td>\n</tr>\n<tr>\n<td align=\"left\">o</td>\n<td align=\"left\">以八进制形式输出无符号整数(不输出前缀0)</td>\n</tr>\n<tr>\n<td align=\"left\">x</td>\n<td align=\"left\">以十六进制形式输出无符号整数(不输出前缀Ox)</td>\n</tr>\n<tr>\n<td align=\"left\">u</td>\n<td align=\"left\">以十进制形式输出无符号整数</td>\n</tr>\n<tr>\n<td align=\"left\">f</td>\n<td align=\"left\">以小数形式输出单、双精度实数</td>\n</tr>\n<tr>\n<td align=\"left\">e</td>\n<td align=\"left\">以指数形式输出单、双精度实数</td>\n</tr>\n<tr>\n<td align=\"left\">g</td>\n<td align=\"left\">以%f或%e中较短的输出宽度输出单、双精度实数</td>\n</tr>\n<tr>\n<td align=\"left\">c</td>\n<td align=\"left\">输出单个字符</td>\n</tr>\n<tr>\n<td align=\"left\">s</td>\n<td align=\"left\">输出字符串</td>\n</tr>\n<tr>\n<td align=\"left\">p</td>\n<td align=\"left\">输出指针地址</td>\n</tr>\n<tr>\n<td align=\"left\">lu</td>\n<td align=\"left\">32位无符号整数</td>\n</tr>\n<tr>\n<td align=\"left\">llu</td>\n<td align=\"left\">64位无符号整数</td>\n</tr>\n</tbody></table>\n</li>\n</ol></blockquote>\n<h2 id=\"字符型\"><a href=\"#字符型\" class=\"headerlink\" title=\"字符型\"></a>字符型</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;limits.h&gt;\n#include &lt;stdio.h&gt;\n\nint main( int argc, char* argv[] ) &#123;\n  char char_a &#x3D; &#39;a&#39;;\n  int  int_a  &#x3D; 97;\n  printf( &quot;char 长度 : %d\\n&quot;, sizeof( char ) );    &#x2F;* 1 *&#x2F;\n  printf( &quot;int  长度 : %d\\n&quot;, sizeof( int ) );     &#x2F;* 4 *&#x2F;\n  printf( &quot;使用 %%d 格式化 char : %d\\n&quot;, char_a ); &#x2F;* 97 *&#x2F;\n  printf( &quot;使用 %%c 格式化 char : %c\\n&quot;, char_a ); &#x2F;* a *&#x2F;\n  printf( &quot;使用 %%d 格式化 int  : %d\\n&quot;, int_a );  &#x2F;* 97 *&#x2F;\n  printf( &quot;使用 %%c 格式化 int  : %c\\n&quot;, int_a );  &#x2F;* a *&#x2F;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>其实呢，这部分能看出 char 和 int 只是从不同角度观察了同一个东西</p>\n<p>我们可以从 JS 的角度来看一下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">String.fromCharCode(97) &#x2F;&#x2F; &#39;a&#39;\n&#39;a&#39;.charCodeAt() &#x2F;&#x2F; 97</code></pre>\n\n<p>不过 JS 中并没有 char 这个概念，97 与 ‘a’ 的相等也就更无从提及了</p>\n<p>xdm 注意了啊，下面分别用各种方式定义的量竟然都是一样的</p></blockquote>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\nint main( int argc, char* argv[] ) &#123;\n  &#x2F;* 首先排除 char 代表队 *&#x2F;\n  char char_a     &#x3D; &#39;a&#39;;\n  char char_a_oct &#x3D; &#39;\\141&#39;;\n  char char_a_hex &#x3D; &#39;\\x61&#39;;\n  &#x2F;* 接下来有请 int 代表队 *&#x2F;\n  int int_a     &#x3D; 97;\n  int int_a_oct &#x3D; 0141;\n  int int_a_hex &#x3D; 0x61;\n  &#x2F;* 然后打印康康 *&#x2F;\n  printf( &quot;使用 %%c 格式化\\n&quot; );\n  printf( &quot;char_a     : %c\\n&quot;, char_a );     &#x2F;* a *&#x2F;\n  printf( &quot;char_a_oct : %c\\n&quot;, char_a_oct ); &#x2F;* a *&#x2F;\n  printf( &quot;char_a_hex : %c\\n&quot;, char_a_hex ); &#x2F;* a *&#x2F;\n  printf( &quot;int_a      : %c\\n&quot;, int_a );      &#x2F;* a *&#x2F;\n  printf( &quot;int_a_oct  : %c\\n&quot;, int_a_oct );  &#x2F;* a *&#x2F;\n  printf( &quot;int_a_hex  : %c\\n&quot;, int_a_hex );  &#x2F;* a *&#x2F;\n  printf( &quot;使用 %%d 格式化\\n&quot; );\n  printf( &quot;char_a     : %d\\n&quot;, char_a );     &#x2F;* 97 *&#x2F;\n  printf( &quot;char_a_oct : %d\\n&quot;, char_a_oct ); &#x2F;* 97 *&#x2F;\n  printf( &quot;char_a_hex : %d\\n&quot;, char_a_hex ); &#x2F;* 97 *&#x2F;\n  printf( &quot;int_a      : %d\\n&quot;, int_a );      &#x2F;* 97 *&#x2F;\n  printf( &quot;int_a_oct  : %d\\n&quot;, int_a_oct );  &#x2F;* 97 *&#x2F;\n  printf( &quot;int_a_hex  : %d\\n&quot;, int_a_hex );  &#x2F;* 97 *&#x2F;\n  printf( &quot;使用 %%o 格式化\\n&quot; );\n  printf( &quot;char_a     : %o\\n&quot;, char_a );     &#x2F;* 141 *&#x2F;\n  printf( &quot;char_a_oct : %o\\n&quot;, char_a_oct ); &#x2F;* 141 *&#x2F;\n  printf( &quot;char_a_hex : %o\\n&quot;, char_a_hex ); &#x2F;* 141 *&#x2F;\n  printf( &quot;int_a      : %o\\n&quot;, int_a );      &#x2F;* 141 *&#x2F;\n  printf( &quot;int_a_oct  : %o\\n&quot;, int_a_oct );  &#x2F;* 141 *&#x2F;\n  printf( &quot;int_a_hex  : %o\\n&quot;, int_a_hex );  &#x2F;* 141 *&#x2F;\n  printf( &quot;使用 %%x 格式化\\n&quot; );\n  printf( &quot;char_a     : %x\\n&quot;, char_a );     &#x2F;* 61 *&#x2F;\n  printf( &quot;char_a_oct : %x\\n&quot;, char_a_oct ); &#x2F;* 61 *&#x2F;\n  printf( &quot;char_a_hex : %x\\n&quot;, char_a_hex ); &#x2F;* 61 *&#x2F;\n  printf( &quot;int_a      : %x\\n&quot;, int_a );      &#x2F;* 61 *&#x2F;\n  printf( &quot;int_a_oct  : %x\\n&quot;, int_a_oct );  &#x2F;* 61 *&#x2F;\n  printf( &quot;int_a_hex  : %x\\n&quot;, int_a_hex );  &#x2F;* 61 *&#x2F;\n  return 0;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>从上面的实验可以看出：</p>\n<p>你可以用不同的方式来表示一个 int 或者 char（ 字符、8进制字符、16进制字符、整形、8进制整形、16进制的整形 ）</p>\n<p>你也可以用不同的方式来展示一个 int 或者 char （%d、%c、%o、%x）</p>\n<p>这里有个小问题：在 1 个 char 的大小是 1 个字节（ 8 个 Bit ），所以最多也就是能表示 256（2 ^ 8）种字符，  那么像单个汉字要或者其他的语言文字要怎么表示呢？</p>\n<p>这里就需要引入 Unicode 字符集了</p></blockquote>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int main( int argc, char* argv[] ) &#123;\n  &#x2F;* C95 开始支持 Unicode*&#x2F;\n  wchar_t qi &#x3D; L&#39;七&#39;;\n  printf( &quot;wchar_t 长度 : %d\\n&quot;, sizeof( wchar_t ) ); &#x2F;* 2 *&#x2F;\n  return 0;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>TODO : 打印宽字符</p></blockquote>\n<h2 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;float.h&gt;\n#include &lt;limits.h&gt;\n#include &lt;stdio.h&gt;\n\nint main( int argc, char* argv[] ) &#123;\n  float       f  &#x3D; 3.14f;\n  double      d  &#x3D; 3.14;\n  long double ld &#x3D; 3.14;\n  printf( &quot;float       长度 : %d\\n&quot;, sizeof( float ) );        &#x2F;* 4 *&#x2F;\n  printf( &quot;double      长度 : %d\\n&quot;, sizeof( double ) );       &#x2F;* 8 *&#x2F;\n  printf( &quot;long double 长度 : %d\\n&quot;, sizeof( long double ) );  &#x2F;* 16 *&#x2F;\n  printf( &quot;float       范围 : %e &#x3D;&gt; %e\\n&quot;, FLT_MIN, FLT_MAX ); &#x2F;* 1.175494e-038 &#x3D;&gt; 3.402823e+038 *&#x2F;\n  printf( &quot;double      范围 : %e &#x3D;&gt; %e\\n&quot;, DBL_MIN, DBL_MAX ); &#x2F;* 2.225074e-308 &#x3D;&gt; 1.797693e+308 *&#x2F;\n  printf( &quot;float       精度 : %d\\n&quot;, FLT_DIG );                &#x2F;* 6 *&#x2F;\n  printf( &quot;double      精度 : %d\\n&quot;, DBL_DIG );                &#x2F;* 15 *&#x2F;\n  return 0;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：表示金钱的时候，不要用 float 类型，容易出现精度损失</p></blockquote>\n","text":"整型#include &lt;limits.h&gt; #include &lt;math.h&gt; #include &lt;stdio.h&gt; int main( int argc, char* argv[] ) &#123; &#x2F;* 有符号整形 *&#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"拓展","slug":"拓展","count":10,"path":"api/categories/拓展.json"}],"tags":[{"name":"C","slug":"C","count":2,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E5%9E%8B\"><span class=\"toc-text\">整型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E5%9E%8B\"><span class=\"toc-text\">字符型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E5%9E%8B\"><span class=\"toc-text\">浮点型</span></a></li></ol>","author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Vite 在开发模式使用 HTTPS","uid":"4463bcb580e6af97fe7a8a01ae296a7e","slug":"Vite-HTTPS","date":"2021-06-21T03:06:53.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/Vite-HTTPS.json","keywords":"👨‍💻🎸🍺","cover":null,"text":"在使用 Vite 进行前端开发的过程中，有时需要模拟一下 HTTPS 的环境（比如开启 PWA），但是如果直接设置server.https = true，浏览器会报您的连接不是私密连接这样的警告，那么该怎么做呢？ 仔细的查看了下文档，发现已经说的很清晰了server.https这...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"}],"tags":[{"name":"Vite","slug":"Vite","count":1,"path":"api/tags/Vite.json"}],"author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"C指针","uid":"e1904a6ce18376ef8b5f00b597175c9f","slug":"C指针","date":"2021-06-17T05:12:05.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/C指针.json","keywords":"👨‍💻🎸🍺","cover":null,"text":"什么是指针 &amp; 指针变量 指针就是变量的内存地址，而用来存储指针的变量则是指针变量。 指针变量的声明&#x2F;* type *var-name; *&#x2F; int *ip; double *dp; float *fp; char *ch; 在这里，type 是指针...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"拓展","slug":"拓展","count":10,"path":"api/categories/拓展.json"}],"tags":[{"name":"C","slug":"C","count":2,"path":"api/tags/C.json"}],"author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}