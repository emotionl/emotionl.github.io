{"title":"正则案例4","uid":"77f168ffc056e7b3c8afc931856a7b37","slug":"正则案例4","date":"2020-05-28T00:00:03.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/正则案例4.json","keywords":"👨‍💻🎸🍺","cover":null,"content":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>根据需求匹配数据并提取所需数据</p>\n<p>处理前</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const textList &#x3D; [\n    &#39;@[]&#39;, &#x2F;&#x2F; 不匹配\n    &#39;@[123]&#39;, &#x2F;&#x2F; 不匹配\n    &#39;@asd[133]&#39;, &#x2F;&#x2F; 匹配\n    &#39;@阿里巴巴(杭州)(西湖)[546789][12113][12113][12113][12113][12113][12113]&#39;, &#x2F;&#x2F; 匹配\n    &#39;@阿里巴巴(杭州)(西湖)[12113]&#39;, &#x2F;&#x2F; 匹配\n    &#39;@阿里巴巴[444]&#39; &#x2F;&#x2F; 匹配\n]</code></pre>\n\n<p>处理后</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">[\n    &#123; name: &#39;asd&#39;, id: &#39;133&#39; &#125;,\n    &#123; name: &#39;阿里巴巴(杭州)(西湖)&#39;, id: &#39;546789&#39; &#125;,\n    &#123; name: &#39;阿里巴巴(杭州)(西湖)&#39;, id: &#39;12113&#39; &#125;,\n    &#123; name: &#39;阿里巴巴&#39;, id: &#39;444&#39; &#125;\n]</code></pre>\n\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 确定处理函数\nconst getFormatTextList &#x3D; (textList) &#x3D;&gt; &#123;\n  const regex &#x3D; &#x2F;\\@([^\\[]+)(?&lt;&#x3D;\\@.+)\\[(\\d+)\\]&#x2F;\n  return textList\n    .filter((item) &#x3D;&gt; regex.test(item))\n    .map((item) &#x3D;&gt; &#123;\n      const [_, name, id] &#x3D; item.match(regex)\n      return &#123;\n        name,\n        id\n      &#125;\n    &#125;)\n&#125;\n\n&#x2F;&#x2F; 准备数据\nconst textList &#x3D; [\n  &#39;@[]&#39;, &#x2F;&#x2F; 不匹配\n  &#39;@[123]&#39;, &#x2F;&#x2F; 不匹配\n  &#39;@asd[133]&#39;, &#x2F;&#x2F; 匹配\n  &#39;@阿里巴巴(杭州)(西湖)[546789][12113][12113][12113][12113][12113][12113]&#39;, &#x2F;&#x2F; 匹配\n  &#39;@阿里巴巴(杭州)(西湖)[12113]&#39;, &#x2F;&#x2F; 匹配\n  &#39;@阿里巴巴[444]&#39; &#x2F;&#x2F; 匹配\n]\n\n&#x2F;&#x2F; 处理\nconst formatTextList &#x3D; getFormatTextList(textList)\n\n&#x2F;&#x2F; 打印结果\nconsole.log(formatTextList)</code></pre>\n\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>在解决问题之前先了解一下<strong>贪婪匹配模式</strong>和<strong>惰性匹配模式</strong>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 <code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p>\n<p>贪婪匹配模式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&quot;&#x2F;(.*at)&#x2F;&quot; &#x3D;&gt; The fat cat sat on the mat. </code></pre>\n\n<p>贪婪匹配模式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&quot;&#x2F;(.*?at)&#x2F;&quot; &#x3D;&gt; The fat cat sat on the mat. </code></pre></blockquote>\n<p>基于<strong>惰性匹配模式</strong>，我们用代码来实现一下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 确定处理函数\nconst getFormatTextList &#x3D; (textList) &#x3D;&gt; &#123;\n  const regex &#x3D; &#x2F;\\@(.+?)\\[(\\d+)\\]&#x2F;\n  return textList\n    .filter((item) &#x3D;&gt; regex.test(item))\n    .map((item) &#x3D;&gt; &#123;\n      const [_, name, id] &#x3D; item.match(regex)\n      return &#123;\n        name,\n        id\n      &#125;\n    &#125;)\n&#125;\n\n&#x2F;&#x2F; 准备数据\nconst textList &#x3D; [\n  &#39;@[]&#39;, &#x2F;&#x2F; 不匹配\n  &#39;@[123]&#39;, &#x2F;&#x2F; 不匹配\n  &#39;@asd[133]&#39;, &#x2F;&#x2F; 匹配\n  &#39;@阿里巴巴(杭州)(西湖)[546789][12113][12113][12113][12113][12113][12113]&#39;, &#x2F;&#x2F; 匹配\n  &#39;@阿里巴巴(杭州)(西湖)[12113]&#39;, &#x2F;&#x2F; 匹配\n  &#39;@阿里巴巴[444]&#39; &#x2F;&#x2F; 匹配\n]\n\n&#x2F;&#x2F; 处理\nconst formatTextList &#x3D; getFormatTextList(textList)\n\n&#x2F;&#x2F; 打印结果\nconsole.log(formatTextList)</code></pre>\n\n\n\n\n\n","text":"需求根据需求匹配数据并提取所需数据 处理前 const textList &#x3D; [ &#39;@[]&#39;, &#x2F;&#x2F; 不匹配 &#39;@[123]&#39;, &#x2F;&#x2F; 不匹配 &#39;@asd[133]&#39;, &#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"拓展","slug":"拓展","count":10,"path":"api/categories/拓展.json"}],"tags":[{"name":"正则","slug":"正则","count":4,"path":"api/tags/正则.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82\"><span class=\"toc-text\">需求</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">解决</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80\"><span class=\"toc-text\">方法一</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C\"><span class=\"toc-text\">方法二</span></a></li></ol></li></ol>","author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"面向对象和原型","uid":"ee82dc5d42257715d56dbfc6d3d2929b","slug":"面向对象和原型","date":"2020-05-29T00:00:00.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/面向对象和原型.json","keywords":"👨‍💻🎸🍺","cover":null,"text":"实现 new 操作首先，我们先来看看new操作起了什么作用 &#x2F;&#x2F; 构造函数 People (无显式返回值) function People(name, age) &#123; this.name &#x3D; name this.age &#x3D; age ...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":14,"path":"api/tags/JavaScript.json"}],"author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"正则案例3","uid":"3f8553456a916ac0bd007eb93cc17e0f","slug":"正则案例3","date":"2020-05-28T00:00:02.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/正则案例3.json","keywords":"👨‍💻🎸🍺","cover":null,"text":"需求提取字符串中的指定片段 处理前 const text &#x3D; &#96;1234@Chesh我ire我 f我（qegqg3(2604) @Cheshire fqegqg3(2604)@(111)(111)(123)Asdasdasdasdasd@1asd(111)@1a...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"拓展","slug":"拓展","count":10,"path":"api/categories/拓展.json"}],"tags":[{"name":"正则","slug":"正则","count":4,"path":"api/tags/正则.json"}],"author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}