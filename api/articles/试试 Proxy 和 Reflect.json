{"title":"试试 Proxy 和 Reflect","uid":"391e5379613c514b7c0c8a55534d752c","slug":"试试 Proxy 和 Reflect","date":"2020-08-26T00:00:00.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/试试 Proxy 和 Reflect.json","keywords":"👨‍💻🎸🍺","cover":null,"content":"<h2 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h2><p>使用 <code>Object.defineProperty()</code>模拟<code>Vue</code>的数据绑定</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class VData &#123;\n  constructor(&#123; data &#125;) &#123;\n    this.data &#x3D; data\n    this.bindData(data)\n  &#125;\n  bindData(data) &#123;\n    const newData &#x3D; &#123;&#125;\n    for (const key in data) &#123;\n      if (data.hasOwnProperty(key)) &#123;\n        newData[key] &#x3D; data[key]\n        Object.defineProperty(data, key, &#123;\n          get() &#123;\n            return newData[key]\n          &#125;,\n          set(val) &#123;\n            newData[key] &#x3D; val\n          &#125;\n        &#125;)\n      &#125;\n    &#125;\n  &#125;\n&#125;\nconst v &#x3D; new VData(&#123;\n  data: &#123;\n    a: 1,\n    b: 2\n  &#125;\n&#125;)</code></pre>\n\n<p>使用<code>Proxy</code>封装一个可设置类型的数组<code>TypeArray</code>，并且对数组中不存在的值返回默认值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const TypeArray &#x3D; (type, defaultValue &#x3D; &#39;N&#x2F;A&#39;, initArray &#x3D; []) &#x3D;&gt; &#123;\n  return new Proxy(initArray, &#123;\n    get(target, prop) &#123;\n      return target[prop] || defaultValue\n    &#125;,\n    set(target, prop, value) &#123;\n      if (typeof value &#x3D;&#x3D;&#x3D; type || prop &#x3D;&#x3D;&#x3D; &#39;length&#39;) &#123;\n        target[prop] &#x3D; value\n        return true\n      &#125; else &#123;\n        return false\n      &#125;\n    &#125;\n  &#125;)\n&#125;\n\nconst numArr &#x3D; TypeArray(&#39;number&#39;)\nnumArr.push(1)   &#x2F;&#x2F; Proxy 代理数组 数组本身的方法属性不会被破坏\nnumArr.push(&quot;2&quot;) &#x2F;&#x2F; Uncaught TypeError: &#39;set&#39; on proxy: trap returned falsish for property &#39;2&#39; at Proxy.push (&lt;anonymous&gt;)</code></pre>\n\n<p>使用 <code>has</code>方法捕获<code>in</code>操作符</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const checkRange &#x3D; new Proxy(\n  &#123;\n    start: 0,\n    end: 100\n  &#125;,\n  &#123;\n    has(target, prop) &#123;\n      return prop &gt;&#x3D; target.start &amp;&amp; prop &lt;&#x3D; target.end\n    &#125;\n  &#125;\n)\n\nconsole.log(50 in checkRange)\t&#x2F;&#x2F; false\nconsole.log(150 in checkRange)\t&#x2F;&#x2F; true</code></pre>\n\n<p>使用<code>ownKeys</code>拦截 <code>Reflect.ownKeys()</code>也可以拦截 <code>Object.keys() ; for in Loop ; Object.getOwnPropertySymbols()</code> 中的部分的 key </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123;\n  attr: &#39;attr&#39;,\n  _attr: &#39;_attr&#39;,\n  [Symbol(&#39;attr&#39;)]: &#39;Symbol(attr)&#39;,\n  [Symbol(&#39;_attr&#39;)]: &#39;Symbol(_attr)&#39;\n&#125;\n\n&#x2F;&#x2F; 未使用 Proxy 的 ownKeys 拦截\nconsole.log(Object.keys(obj)) &#x2F;&#x2F; [&quot;attr&quot;, &quot;_attr&quot;]\nconsole.log(Object.getOwnPropertySymbols(obj)) &#x2F;&#x2F; [Symbol(attr), Symbol(_attr)]\nconsole.log(Reflect.ownKeys(obj)) &#x2F;&#x2F; [&quot;attr&quot;, &quot;_attr&quot;, Symbol(attr), Symbol(_attr)]\nfor (const key in obj) &#123;\n  console.log(key) &#x2F;&#x2F; attr _attr\n&#125;\n\n&#x2F;&#x2F; 使用 Proxy 的 ownKeys 拦截\nconst p &#x3D; new Proxy(obj, &#123;\n  ownKeys(target) &#123;\n    const normalKeys &#x3D; Object.keys(target)\n    const normalFilterKeys &#x3D; normalKeys.filter((key) &#x3D;&gt; !key.startsWith(&#39;_&#39;)) &#x2F;&#x2F; 拦截以下划线开头的 key\n    const symbolKeys &#x3D; Object.getOwnPropertySymbols(target)\n    const symbolFilterKeys &#x3D; symbolKeys.filter((key) &#x3D;&gt; !key.toString().startsWith(&#39;Symbol(_&#39;)) &#x2F;&#x2F; 拦截以下划线开头的 key\n    return [...normalFilterKeys, ...symbolFilterKeys]\n  &#125;\n&#125;)\n\nconsole.log(Object.keys(p)) &#x2F;&#x2F; [&quot;attr&quot;]\nconsole.log(Object.getOwnPropertySymbols(p)) &#x2F;&#x2F; [Symbol(attr)]\nconsole.log(Reflect.ownKeys(p)) &#x2F;&#x2F; [&quot;attr&quot;, Symbol(attr)]\nfor (const key in p) &#123;\n  console.log(key) &#x2F;&#x2F; attr\n&#125;</code></pre>\n\n<p>来个综合案例</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const userInfo &#x3D; &#123;\n  name: &#39;Jack&#39;,\n  age: 17,\n  _address: &#39;London UK&#39;\n&#125;\n\nconst p &#x3D; new Proxy(userInfo, &#123;\n  get(target, prop) &#123;\n    if (prop.startsWith(&#39;_&#39;)) &#123;\n      throw new Error(&#96;$&#123;prop&#125; 不可访问&#96;)\n    &#125; else &#123;\n      return target[prop] || &#39;N&#x2F;A&#39;\n    &#125;\n  &#125;,\n  set(target, prop, value) &#123;\n    if (prop.startsWith(&#39;_&#39;)) &#123;\n      throw new Error(&#96;不能设置 $&#123;prop&#125;&#96;)\n    &#125; else &#123;\n      target[prop] &#x3D; value\n      return true\n    &#125;\n  &#125;,\n  deleteProperty(target, prop) &#123;\n    if (prop.startsWith(&#39;_&#39;)) &#123;\n      throw new Error(&#96;不能删除$&#123;prop&#125;&#96;)\n    &#125; else &#123;\n      delete target[prop]\n      return true\n    &#125;\n  &#125;,\n  ownKeys(target) &#123;\n    return Object.keys(target).filter((key) &#x3D;&gt; !key.startsWith(&#39;_&#39;))\n  &#125;\n&#125;)</code></pre>\n\n<p>使用 <code>apply</code>拦截函数的调用（包装函数）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const sum &#x3D; (a, b) &#x3D;&gt; &#123;\n  return a + b\n&#125;\n\nconst sumText &#x3D; new Proxy(sum, &#123;\n  apply(target, thisArg, argArray) &#123;\n    return &#96;total number is $&#123;target(...argArray)&#125;&#96;\n  &#125;\n&#125;)\n\nsumText(10, 20)</code></pre>\n\n","text":"Proxy使用 Object.defineProperty()模拟Vue的数据绑定 class VData &#123; constructor(&#123; data &#125;) &#123; this.data &#x3D; data this.bindData(data...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":14,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Proxy\"><span class=\"toc-text\">Proxy</span></a></li></ol>","author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"使用nvm管理Node.js版本","uid":"923873964bedc6d39520ffd3396ca0ce","slug":"使用nvm管理Node-js版本","date":"2021-01-07T17:12:09.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/使用nvm管理Node-js版本.json","keywords":"👨‍💻🎸🍺","cover":null,"text":"背景在实验 Vue3 的时候，提示 Error: Cannot find module &#39;vue-loader-v16/package.json&#39;，排查后发现是Node.js npm的问题于是安装了最新的 14.15.4 LTS，但是在解决完 Vue3的问题后，使...","link":"","photos":[],"count_time":{"symbolsCount":681,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"}],"tags":[{"name":"Node.js","slug":"Node-js","count":2,"path":"api/tags/Node-js.json"}],"author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"复习一下Generator的使用","uid":"c1e7e740a56d87809715d43780d153ea","slug":"复习一下Generator的使用","date":"2020-08-25T00:00:00.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/复习一下Generator的使用.json","keywords":"👨‍💻🎸🍺","cover":null,"text":"先来个例题 看一下结果 function* addGen(x) &#123; let y &#x3D; (yield x + 5) * 2 let z &#x3D; yield y &#x2F; 4 return x + y + z &#125; let g &#x3D; add...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":14,"path":"api/tags/JavaScript.json"}],"author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}