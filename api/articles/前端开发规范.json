{"title":"前端开发规范","uid":"2afb485f1ca3d275b575e077ea3a1ee9","slug":"前端开发规范","date":"2021-01-25T10:31:16.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/前端开发规范.json","keywords":"👨‍💻🎸🍺","cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>此规范基于 <a href=\"https://w3ctim.com/post/1d821dd8\">阿里前端开发规范 | Tim</a> 并结合实际项目进行部分修改</p></blockquote>\n<h2 id=\"一、编程规约\"><a href=\"#一、编程规约\" class=\"headerlink\" title=\"一、编程规约\"></a>一、编程规约</h2><h3 id=\"一-命名规范\"><a href=\"#一-命名规范\" class=\"headerlink\" title=\"(一) 命名规范\"></a>(一) 命名规范</h3><h4 id=\"1-1-1-项目命名\"><a href=\"#1-1-1-项目命名\" class=\"headerlink\" title=\"1.1.1 项目命名\"></a>1.1.1 项目命名</h4><p>全部采用小写方式， 以中划线分隔。</p>\n<p>正例：<code>mall-management-system</code></p>\n<p>反例：<code>mall_management-system / mallManagementSystem</code></p>\n<h4 id=\"1-1-2-目录命名\"><a href=\"#1-1-2-目录命名\" class=\"headerlink\" title=\"1.1.2 目录命名\"></a>1.1.2 目录命名</h4><p>全部采用小写方式， 以中划线分隔，有复数结构时，要采用复数命名法， 缩写不用复数</p>\n<p>正例： <code>scripts / styles / components / images / utils / layouts / demo-styles / demo-scripts / img / doc</code></p>\n<p>反例： <code>script / style / demo_scripts / demoStyles / imgs / docs</code></p>\n<p><strong>【特殊】</strong>Vue 项目中的 components 和 view 中的组件目录和组件名，使用单词大写开头 (PascalCase) 命名</p>\n<p>正例： <code>HeadSearch / PageLoading</code></p>\n<p>反例： <code>head-search / page-loading / mycomponent / myComponent</code></p>\n<h4 id=\"1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名\"><a href=\"#1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名\" class=\"headerlink\" title=\"1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名\"></a>1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名</h4><p>全部采用小写方式， 以中划线分隔</p>\n<p>正例： <code>render-dom.js / signup.css / index.html / company-logo.png</code></p>\n<p>反例： <code>renderDom.js / UserManagement.html</code></p>\n<h4 id=\"1-1-4-命名严谨性\"><a href=\"#1-1-4-命名严谨性\" class=\"headerlink\" title=\"1.1.4 命名严谨性\"></a>1.1.4 命名严谨性</h4><p>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用</p>\n<p>正例：<code>henan / luoyang / rmb 等国际通用的名称，可视同英文。</code></p>\n<p>反例：<code>DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3</code></p>\n<p><strong>杜绝完全不规范的缩写，避免望文不知义：</strong></p>\n<p>反例：AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。</p>\n<h3 id=\"二-HTML-规范-（Vue-Template-同样适用）\"><a href=\"#二-HTML-规范-（Vue-Template-同样适用）\" class=\"headerlink\" title=\"(二) HTML 规范 （Vue Template 同样适用）\"></a>(二) HTML 规范 （Vue Template 同样适用）</h3><h4 id=\"1-2-1-HTML-类型\"><a href=\"#1-2-1-HTML-类型\" class=\"headerlink\" title=\"1.2.1 HTML 类型\"></a>1.2.1 HTML 类型</h4><p>推荐使用 HTML5 的文档类型申明：<br>（建议使用 text/html 格式的 HTML。避免使用 XHTML。XHTML 以及它的属性，比如 application/xhtml+xml 在浏览器中的应用支持与优化空间都十分有限）。</p>\n<ul>\n<li>规定字符编码</li>\n<li>IE 兼容模式</li>\n<li>doctype 大写</li>\n</ul>\n<p>正例：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;Edge&quot; &#x2F;&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;Page title&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;img src&#x3D;&quot;images&#x2F;company-logo.png&quot; alt&#x3D;&quot;Company&quot; &#x2F;&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h4 id=\"1-2-2-缩进\"><a href=\"#1-2-2-缩进\" class=\"headerlink\" title=\"1.2.2 缩进\"></a>1.2.2 缩进</h4><p>缩进使用 2 个空格（一个 tab）</p>\n<p>嵌套的节点应该缩进。</p>\n<h4 id=\"1-2-3-分块注释\"><a href=\"#1-2-3-分块注释\" class=\"headerlink\" title=\"1.2.3 分块注释\"></a>1.2.3 分块注释</h4><p>在每一个块状元素，列表元素和表格元素后，加上一对 HTML 注释。注释格式</p>\n<p>正例：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;body&gt;\n  &lt;!-- header 头部 start --&gt;\n  &lt;header&gt;\n    &lt;div class&#x3D;&quot;container&quot;&gt;\n      &lt;a href&#x3D;&quot;#&quot;&gt;\n        &lt;!-- 图片会把a标签给撑开，所以不用设置a标签的大小 --&gt;\n        &lt;img src&#x3D;&quot;images&#x2F;header.jpg&quot; &#x2F;&gt;\n      &lt;&#x2F;a&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;header&gt;\n  &lt;!-- header 头部 end --&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h3 id=\"1-2-4-语义化标签\"><a href=\"#1-2-4-语义化标签\" class=\"headerlink\" title=\"1.2.4 语义化标签\"></a>1.2.4 语义化标签</h3><p>HTML5 中新增很多语义化标签，所以优先使用语义化标签，避免一个页面都是 div 或者 p 标签</p>\n<p>正例</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;header&gt;&lt;&#x2F;header&gt;\n&lt;footer&gt;&lt;&#x2F;footer&gt;</code></pre>\n\n<p>反例</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div&gt;\n  &lt;p&gt;&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<h4 id=\"1-2-5-引号\"><a href=\"#1-2-5-引号\" class=\"headerlink\" title=\"1.2.5 引号\"></a>1.2.5 引号</h4><p>使用双引号(“ “) 而不是单引号(‘ ‘) 。</p>\n<h3 id=\"三-CSS-规范\"><a href=\"#三-CSS-规范\" class=\"headerlink\" title=\"(三) CSS 规范\"></a>(三) CSS 规范</h3><h4 id=\"1-3-1-命名\"><a href=\"#1-3-1-命名\" class=\"headerlink\" title=\"1.3.1 命名\"></a>1.3.1 命名</h4><ul>\n<li>类名使用小写字母，以中划线分隔</li>\n<li>id 采用驼峰式命名</li>\n<li>scss 中的变量、函数、混合、placeholder 采用驼峰式命名</li>\n</ul>\n<p>ID 和 class 的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称</p>\n<p>不推荐：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.fw-800 &#123;\n  font-weight: 800;\n&#125;\n\n.red &#123;\n  color: red;\n&#125;</code></pre>\n\n<p>推荐:</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.heavy &#123;\n  font-weight: 800;\n&#125;\n\n.important &#123;\n  color: red;\n&#125;</code></pre>\n\n<h4 id=\"1-3-2-选择器\"><a href=\"#1-3-2-选择器\" class=\"headerlink\" title=\"1.3.2 选择器\"></a>1.3.2 选择器</h4><ol>\n<li><p>CSS 选择器中避免使用标签名<br>从结构、表现、行为分离的原则来看，应该尽量避免 CSS 中出现 HTML 标签，并且在 CSS 选择器中出现标签名会存在潜在的问题。</p>\n</li>\n<li><p>很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。然而，在任何情况下，这是一个非常不好的做法。如果你不写很通用的，需要匹配到 DOM 末端的选择器， 你应该总是考虑直接子选择器。</p>\n</li>\n</ol>\n<p>不推荐:</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.content .title &#123;\n  font-size: 2rem;\n&#125;</code></pre>\n\n<p>推荐:</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.content &gt; .title &#123;\n  font-size: 2rem;\n&#125;</code></pre>\n\n<h4 id=\"1-3-3-尽量使用缩写属性\"><a href=\"#1-3-3-尽量使用缩写属性\" class=\"headerlink\" title=\"1.3.3 尽量使用缩写属性\"></a>1.3.3 尽量使用缩写属性</h4><p>不推荐：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">border-top-style: none;\nfont-family: palatino, georgia, serif;\nfont-size: 100%;\nline-height: 1.6;\npadding-bottom: 2em;\npadding-left: 1em;\npadding-right: 1em;\npadding-top: 0;</code></pre>\n\n<p>推荐：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">border-top: 0;\nfont: 100%&#x2F;1.6 palatino, georgia, serif;\npadding: 0 1em 2em;</code></pre>\n\n<h4 id=\"1-3-4-每个选择器及属性独占一行\"><a href=\"#1-3-4-每个选择器及属性独占一行\" class=\"headerlink\" title=\"1.3.4 每个选择器及属性独占一行\"></a>1.3.4 每个选择器及属性独占一行</h4><p>不推荐：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">button &#123;\n  width: 100px;\n  height: 50px;\n  color: #fff;\n  background: #00a0e9;\n&#125;</code></pre>\n\n<p>推荐：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">button &#123;\n  width: 100px;\n  height: 50px;\n  color: #fff;\n  background: #00a0e9;\n&#125;</code></pre>\n\n<h4 id=\"1-3-5-省略-0-后面的单位\"><a href=\"#1-3-5-省略-0-后面的单位\" class=\"headerlink\" title=\"1.3.5 省略 0 后面的单位\"></a>1.3.5 省略 0 后面的单位</h4><p>不推荐：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">div &#123;\n  padding-bottom: 0px;\n  margin: 0em;\n&#125;</code></pre>\n\n<p>推荐：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">div &#123;\n  padding-bottom: 0;\n  margin: 0;\n&#125;</code></pre>\n\n<h4 id=\"1-3-6-避免使用-ID-选择器及全局标签选择器防止污染全局样式\"><a href=\"#1-3-6-避免使用-ID-选择器及全局标签选择器防止污染全局样式\" class=\"headerlink\" title=\"1.3.6 避免使用 ID 选择器及全局标签选择器防止污染全局样式\"></a>1.3.6 避免使用 ID 选择器及全局标签选择器防止污染全局样式</h4><p>不推荐：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">#header &#123;\n  padding-bottom: 0;\n  margin: 0;\n&#125;</code></pre>\n\n<p>推荐：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.header &#123;\n  padding-bottom: 0;\n  margin: 0;\n&#125;</code></pre>\n\n<h3 id=\"四-SCSS-规范\"><a href=\"#四-SCSS-规范\" class=\"headerlink\" title=\"(四) SCSS 规范\"></a>(四) SCSS 规范</h3><h4 id=\"1-4-1-代码组织\"><a href=\"#1-4-1-代码组织\" class=\"headerlink\" title=\"1.4.1 代码组织\"></a>1.4.1 代码组织</h4><h5 id=\"1-将公共-scss-文件放置在-src-assets-styles-文件夹\"><a href=\"#1-将公共-scss-文件放置在-src-assets-styles-文件夹\" class=\"headerlink\" title=\"1) 将公共 scss 文件放置在 src/assets/styles 文件夹\"></a>1) 将公共 scss 文件放置在 src/assets/styles 文件夹</h5><p>例：<code>variables.scss / mixin.scss</code></p>\n<h5 id=\"2-按以下顺序组织\"><a href=\"#2-按以下顺序组织\" class=\"headerlink\" title=\"2) 按以下顺序组织\"></a>2) 按以下顺序组织</h5><ol>\n<li>@import</li>\n<li>变量声明</li>\n<li>样式声明</li>\n</ol>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">@import &#39;mixins&#x2F;size.less&#39;;\n\n@default-text-color: #333;\n\n.page &#123;\n  width: 960px;\n  margin: 0 auto;\n&#125;</code></pre>\n\n<h4 id=\"1-4-2-避免嵌套层级过多\"><a href=\"#1-4-2-避免嵌套层级过多\" class=\"headerlink\" title=\"1.4.2 避免嵌套层级过多\"></a>1.4.2 避免嵌套层级过多</h4><p>将嵌套深度限制在 3 级。对于超过 4 级的嵌套，给予重新评估。这可以避免出现过于详实的 CSS 选择器。<br>避免大量的嵌套规则。当可读性受到影响时，将之打断。推荐避免出现多于 20 行的嵌套规则出现</p>\n<p>不推荐：</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">.main &#123;\n  .title &#123;\n    .name &#123;\n      color: #fff;\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>推荐：</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">.main-title &#123;\n  .name &#123;\n    color: #fff;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"五-Javascript-规范\"><a href=\"#五-Javascript-规范\" class=\"headerlink\" title=\"(五) Javascript 规范\"></a>(五) Javascript 规范</h3><h4 id=\"1-5-1-命名\"><a href=\"#1-5-1-命名\" class=\"headerlink\" title=\"1.5.1 命名\"></a>1.5.1 命名</h4><h5 id=\"1-采用小写驼峰命名-lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束\"><a href=\"#1-采用小写驼峰命名-lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束\" class=\"headerlink\" title=\"1) 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束\"></a>1) 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束</h5><p>反例： <code>_name / name_ / name$</code></p>\n<h5 id=\"2-方法名、参数名、成员变量、局部变量都统一使用-lowerCamelCase-风格，必须遵从驼峰形式。\"><a href=\"#2-方法名、参数名、成员变量、局部变量都统一使用-lowerCamelCase-风格，必须遵从驼峰形式。\" class=\"headerlink\" title=\"2) 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。\"></a>2) 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。</h5><p>正例： <code>localValue / getHttpMessage() / inputUserId</code></p>\n<p><strong>其中 method 方法命名必须是 动词 或者 动词+名词 形式</strong></p>\n<p>正例：<code>saveShopCarData /openShopCarInfoDialog</code></p>\n<p>反例：<code>save / open / show / go</code></p>\n<p><strong>特此说明，增删查改，详情统一使用如下 5 个单词，不得使用其他（目的是为了统一各个端）</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">add &#x2F; update &#x2F; delete &#x2F; detail &#x2F; get</code></pre>\n\n<p><strong>附： 函数方法常用的动词:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">get 获取&#x2F;set 设置,\nadd 增加&#x2F;remove 删除\ncreate 创建&#x2F;destory 移除\nstart 启动&#x2F;stop 停止\nopen 打开&#x2F;close 关闭,\nread 读取&#x2F;write 写入\nload 载入&#x2F;save 保存,\ncreate 创建&#x2F;destroy 销毁\nbegin 开始&#x2F;end 结束,\nbackup 备份&#x2F;restore 恢复\nimport 导入&#x2F;export 导出,\nsplit 分割&#x2F;merge 合并\ninject 注入&#x2F;extract 提取,\nattach 附着&#x2F;detach 脱离\nbind 绑定&#x2F;separate 分离,\nview 查看&#x2F;browse 浏览\nedit 编辑&#x2F;modify 修改,\nselect 选取&#x2F;mark 标记\ncopy 复制&#x2F;paste 粘贴,\nundo 撤销&#x2F;redo 重做\ninsert 插入&#x2F;delete 移除,\nadd 加入&#x2F;append 添加\nclean 清理&#x2F;clear 清除,\nindex 索引&#x2F;sort 排序\nfind 查找&#x2F;search 搜索,\nincrease 增加&#x2F;decrease 减少\nplay 播放&#x2F;pause 暂停,\nlaunch 启动&#x2F;run 运行\ncompile 编译&#x2F;execute 执行,\ndebug 调试&#x2F;trace 跟踪\nobserve 观察&#x2F;listen 监听,\nbuild 构建&#x2F;publish 发布\ninput 输入&#x2F;output 输出,\nencode 编码&#x2F;decode 解码\nencrypt 加密&#x2F;decrypt 解密,\ncompress 压缩&#x2F;decompress 解压缩\npack 打包&#x2F;unpack 解包,\nparse 解析&#x2F;emit 生成\nconnect 连接&#x2F;disconnect 断开,\nsend 发送&#x2F;receive 接收\ndownload 下载&#x2F;upload 上传,\nrefresh 刷新&#x2F;synchronize 同步\nupdate 更新&#x2F;revert 复原,\nlock 锁定&#x2F;unlock 解锁\ncheck out 签出&#x2F;check in 签入,\nsubmit 提交&#x2F;commit 交付\npush 推&#x2F;pull 拉,\nexpand 展开&#x2F;collapse 折叠\nbegin 起始&#x2F;end 结束,\nstart 开始&#x2F;finish 完成\nenter 进入&#x2F;exit 退出,\nabort 放弃&#x2F;quit 离开\nobsolete 废弃&#x2F;depreciate 废旧,\ncollect 收集&#x2F;aggregate 聚集</code></pre>\n\n<h5 id=\"3-常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。\"><a href=\"#3-常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。\" class=\"headerlink\" title=\"3) 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。\"></a>3) 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</h5><p>正例： <code>MAX_STOCK_COUNT</code></p>\n<p>反例： <code>MAX_COUNT</code></p>\n<h4 id=\"1-5-2-代码格式\"><a href=\"#1-5-2-代码格式\" class=\"headerlink\" title=\"1.5.2 代码格式\"></a>1.5.2 代码格式</h4><h5 id=\"1-使用-2-个空格进行缩进\"><a href=\"#1-使用-2-个空格进行缩进\" class=\"headerlink\" title=\"1) 使用 2 个空格进行缩进\"></a>1) 使用 2 个空格进行缩进</h5><p>正例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">if (x &lt; y) &#123;\n  x +&#x3D; 10\n&#125; else &#123;\n  x +&#x3D; 1\n&#125;</code></pre>\n\n<h5 id=\"2-不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。\"><a href=\"#2-不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。\" class=\"headerlink\" title=\"2) 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。\"></a>2) 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>说明：任何情形，没有必要插入多个空行进行隔开。</p></blockquote>\n<h4 id=\"1-5-3-字符串\"><a href=\"#1-5-3-字符串\" class=\"headerlink\" title=\"1.5.3 字符串\"></a>1.5.3 字符串</h4><h5 id=\"1-统一使用单引号-‘-，不使用双引号-“-。这在创建-HTML-字符串非常有好处：\"><a href=\"#1-统一使用单引号-‘-，不使用双引号-“-。这在创建-HTML-字符串非常有好处：\" class=\"headerlink\" title=\"1) 统一使用单引号(‘)，不使用双引号(“)。这在创建 HTML 字符串非常有好处：\"></a>1) 统一使用单引号(‘)，不使用双引号(“)。这在创建 HTML 字符串非常有好处：</h5><p>正例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let str &#x3D; &#39;foo&#39;\nlet testDiv &#x3D; &#39;&lt;div id&#x3D;&quot;test&quot;&gt;&lt;&#x2F;div&gt;&#39;</code></pre>\n\n<p>反例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let str &#x3D; &#39;foo&#39;\nlet testDiv &#x3D; &quot;&lt;div id&#x3D;&#39;test&#39;&gt;&lt;&#x2F;div&gt;&quot;</code></pre>\n\n<h5 id=\"2-字符串拼接统一使用-ES6-模板字符串处理\"><a href=\"#2-字符串拼接统一使用-ES6-模板字符串处理\" class=\"headerlink\" title=\"2) 字符串拼接统一使用 ES6 模板字符串处理\"></a>2) 字符串拼接统一使用 ES6 模板字符串处理</h5><p>正例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const firstName &#x3D; &#39;Tom&#39;\nconst lastName &#x3D; &#39;Hanks&#39;\nconst fullName &#x3D; &#96;$&#123;firstName&#125; $&#123;lastName&#125;&#96;</code></pre>\n\n<p>反例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const firstName &#x3D; &#39;Tom&#39;\nconst lastName &#x3D; &#39;Hanks&#39;\nconst fullName &#x3D; firstName + &#39; &#39; + lastName</code></pre>\n\n<h4 id=\"1-5-4-对象声明\"><a href=\"#1-5-4-对象声明\" class=\"headerlink\" title=\"1.5.4 对象声明\"></a>1.5.4 对象声明</h4><h5 id=\"1-使用字面值创建对象\"><a href=\"#1-使用字面值创建对象\" class=\"headerlink\" title=\"1) 使用字面值创建对象\"></a>1) 使用字面值创建对象</h5><p>正例： <code>let user = &#123;&#125;;</code></p>\n<p>反例： <code>let user = new Object();</code></p>\n<h5 id=\"2-使用字面量来代替对象构造器\"><a href=\"#2-使用字面量来代替对象构造器\" class=\"headerlink\" title=\"2) 使用字面量来代替对象构造器\"></a>2) 使用字面量来代替对象构造器</h5><p>正例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const user &#x3D; &#123;\n  age: 0,\n  name: 1,\n  city: 3\n&#125;</code></pre>\n\n<p>反例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const user &#x3D; new Object()\nuser.age &#x3D; 0\nuser.name &#x3D; 0\nuser.city &#x3D; 0</code></pre>\n\n<h4 id=\"1-5-5-使用-ES6-ES7\"><a href=\"#1-5-5-使用-ES6-ES7\" class=\"headerlink\" title=\"1.5.5 使用 ES6,ES7\"></a>1.5.5 使用 ES6,ES7</h4><p>必须优先使用 ES6,ES7 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复用。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>必须强制使用 ES6, ES7 的新语法，比如箭头函数、await/async，解构，let，for…of 等等</p></blockquote>\n<h4 id=\"1-5-6-括号\"><a href=\"#1-5-6-括号\" class=\"headerlink\" title=\"1.5.6 括号\"></a>1.5.6 括号</h4><p>下列关键字后必须有大括号（即使代码块的内容只有一行）：<code>if, else, for, while, do, switch, try, catch, finally, with</code>。</p>\n<p>正例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">if (condition) &#123;\n  doSomething()\n&#125;</code></pre>\n\n<p>反例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">if (condition) doSomething()</code></pre>\n\n<h4 id=\"1-5-7-undefined-判断\"><a href=\"#1-5-7-undefined-判断\" class=\"headerlink\" title=\"1.5.7 undefined 判断\"></a>1.5.7 undefined 判断</h4><p>永远不要直接使用 <code>undefined</code> 进行变量判断；使用 <code>typeof</code> 和字符串 <code>&#39;undefined&#39;</code> 对变量进行判断。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">if (typeof person &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;\n    ...\n&#125;</code></pre>\n\n<p>反例：1</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; person 为 null 也是 true\nif (person &#x3D;&#x3D; undefined) &#123;\n    ...\n&#125;</code></pre>\n\n<p>反例：2 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\">MDN 也有说明</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">if (person &#x3D;&#x3D;&#x3D; undefined) &#123;\n    ...\n&#125;\n\n&#x2F;&#x2F; JavaScript 设计问题， undefined 可以全局作用域中被当作标识符（变量名）来使用\n&#x2F;&#x2F; 因为 undefined 不是一个保留字\n&#x2F;&#x2F; 不要这样做！\n\n&#x2F;&#x2F; 打印 &#39;foo string&#39; PS：说明undefined的值和类型都已经改变\n(function() &#123;\nvar undefined &#x3D; &#39;foo&#39;;\nconsole.log(undefined, typeof undefined)\n&#125;)()\n\n&#x2F;&#x2F; 打印 &#39;foo string&#39; PS：说明undefined的值和类型都已经改变\n(function(undefined) &#123;\nconsole.log(undefined, typeof undefined)\n&#125;)(&#39;foo&#39;)</code></pre>\n\n<h4 id=\"1-5-8-条件判断和循环最多三层\"><a href=\"#1-5-8-条件判断和循环最多三层\" class=\"headerlink\" title=\"1.5.8 条件判断和循环最多三层\"></a>1.5.8 条件判断和循环最多三层</h4><p>条件判断能使用三目运算符和逻辑运算符解决的，就不要使用条件判断，但是谨记不要写太长的三目运算符。如果超过 3 层请抽成函数，并写清楚注释。</p>\n<h4 id=\"1-5-9-this-的转换命名\"><a href=\"#1-5-9-this-的转换命名\" class=\"headerlink\" title=\"1.5.9 this 的转换命名\"></a>1.5.9 this 的转换命名</h4><p>对上下文 <code>this</code> 的引用只能使用 <code>self</code> 来命名</p>\n<h4 id=\"1-5-10-慎用-console-log\"><a href=\"#1-5-10-慎用-console-log\" class=\"headerlink\" title=\"1.5.10 慎用 console.log\"></a>1.5.10 慎用 <code>console.log</code></h4><p>因 <code>console.log</code> 大量使用会有性能问题，所以在非 <code>webpack</code> 项目中谨慎使用 log 功能</p>\n<h2 id=\"二、Vue-项目规范\"><a href=\"#二、Vue-项目规范\" class=\"headerlink\" title=\"二、Vue 项目规范\"></a>二、Vue 项目规范</h2><h3 id=\"一-Vue-编码基础\"><a href=\"#一-Vue-编码基础\" class=\"headerlink\" title=\"(一) Vue 编码基础\"></a>(一) Vue 编码基础</h3><p>二、Vue 项目规范以 Vue 官方规范 （<a href=\"https://cn.vuejs.org/v2/style-guide/%EF%BC%89\">https://cn.vuejs.org/v2/style-guide/）</a> 中的 A 规范为基础，在其上面进行项目开发，故所有代码均遵守该规范。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>请仔仔细细阅读 Vue 官方规范，切记，此为第一步。</p></blockquote>\n<h4 id=\"2-1-1-组件规范\"><a href=\"#2-1-1-组件规范\" class=\"headerlink\" title=\"2.1.1. 组件规范\"></a>2.1.1. 组件规范</h4><h5 id=\"1-组件名为多个单词。\"><a href=\"#1-组件名为多个单词。\" class=\"headerlink\" title=\"1) 组件名为多个单词。\"></a>1) 组件名为多个单词。</h5><p>组件名应该始终是多个单词组成（大于等于 2），且命名规范为 <code>CamelCase</code> 格式。<br>这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。</p>\n<p>正例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n  name: &#39;TodoItem&#39;\n  &#x2F;&#x2F; ...\n&#125;</code></pre>\n\n<p>反例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n  name: &#39;todo&#39;\n  &#x2F;&#x2F; ...\n&#125;\nexport default &#123;\n  name: &#39;todo-item&#39;\n  &#x2F;&#x2F; ...\n&#125;</code></pre>\n\n<h5 id=\"2-组件文件名为-CamelCase-格式\"><a href=\"#2-组件文件名为-CamelCase-格式\" class=\"headerlink\" title=\"2) 组件文件名为 CamelCase 格式\"></a>2) 组件文件名为 CamelCase 格式</h5><p>正例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">components&#x2F;\n|- MyComponent.vue</code></pre>\n\n<p>反例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">components&#x2F;\n|- myComponent.vue\n|- my-component.vue</code></pre>\n\n<h5 id=\"3-基础组件文件名为-base-开头，使用完整单词而不是缩写。\"><a href=\"#3-基础组件文件名为-base-开头，使用完整单词而不是缩写。\" class=\"headerlink\" title=\"3) 基础组件文件名为 base 开头，使用完整单词而不是缩写。\"></a>3) 基础组件文件名为 base 开头，使用完整单词而不是缩写。</h5><p>正例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">components&#x2F;\n|- BaseButton.vue\n|- BaseTable.vue\n|- BaseIcon.vue</code></pre>\n\n<p>反例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">components&#x2F;\n|- MyButton.vue\n|- VueTable.vue\n|- Icon.vue</code></pre>\n\n<h5 id=\"4-和父组件紧密耦合的子组件应该以父组件名作为前缀命名\"><a href=\"#4-和父组件紧密耦合的子组件应该以父组件名作为前缀命名\" class=\"headerlink\" title=\"4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名\"></a>4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名</h5><p>正例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">components&#x2F;\n|- TodoList.vue\n|- TodoListItem.vue\n|- TodoListItemNutton.vue\n|- UserProfileOptions.vue （完整单词）</code></pre>\n\n<p>反例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">components&#x2F;\n|- TodoList.vue\n|- TodoItem.vue\n|- TodoButton.vue\n|- UProfOpts.vue （使用了缩写）</code></pre>\n\n<h5 id=\"5-在-Template-模版中使用组件，应使用-PascalCase-模式，并且使用自闭合组件。\"><a href=\"#5-在-Template-模版中使用组件，应使用-PascalCase-模式，并且使用自闭合组件。\" class=\"headerlink\" title=\"5) 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件。\"></a>5) 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件。</h5><p>正例：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!-- 在单文件组件、字符串模板和 JSX 中 --&gt;\n&lt;my-component &#x2F;&gt;\n&lt;row&gt;&lt;table :column&#x3D;&quot;data&quot; &#x2F;&gt;&lt;&#x2F;row&gt;</code></pre>\n\n<p>反例：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;MyComponent &#x2F;&gt; &lt;Row&gt;&lt;table :column&#x3D;&quot;data&quot; &#x2F;&gt;&lt;&#x2F;Row&gt;</code></pre>\n\n<h5 id=\"6-组件的-data-必须是一个函数\"><a href=\"#6-组件的-data-必须是一个函数\" class=\"headerlink\" title=\"6) 组件的 data 必须是一个函数\"></a>6) 组件的 data 必须是一个函数</h5><p>当在组件中使用 data 属性的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数。 因为如果直接是一个对象的话，子组件之间的属性值会互相影响。</p>\n<p>正例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n  data() &#123;\n    return &#123;\n      name: &#39;jack&#39;\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>反例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n  data: &#123;\n    name: &#39;jack&#39;\n  &#125;\n&#125;</code></pre>\n\n<h5 id=\"7-Prop-定义应该尽量详细\"><a href=\"#7-Prop-定义应该尽量详细\" class=\"headerlink\" title=\"7) Prop 定义应该尽量详细\"></a>7) Prop 定义应该尽量详细</h5><ul>\n<li>必须使用 camelCase 驼峰命名</li>\n<li>必须指定类型</li>\n<li>如果变量名不能表达其含义，必须加上注释，表明其含义</li>\n<li>必须加上 required 或者 default，两者二选其一</li>\n<li>如果有业务需要，必须加上 validator 验证</li>\n</ul>\n<p>正例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> props: &#123;\n  &#x2F;&#x2F; 组件状态，用于控制组件的颜色\n   status: &#123;\n     type: String,\n     required: true,\n     validator: function (value) &#123;\n       return [\n         &#39;succ&#39;,\n         &#39;info&#39;,\n         &#39;error&#39;\n       ].indexOf(value) !&#x3D;&#x3D; -1\n     &#125;\n   &#125;,\n    &#x2F;&#x2F; 用户级别，用于显示皇冠个数\n   userLevel：&#123;\n      type: String,\n      required: true\n   &#125;\n&#125;</code></pre>\n\n<h5 id=\"8-为组件样式设置作用域\"><a href=\"#8-为组件样式设置作用域\" class=\"headerlink\" title=\"8) 为组件样式设置作用域\"></a>8) 为组件样式设置作用域</h5><p>正例：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;button class&#x3D;&quot;btn btn-close&quot;&gt;X&lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;\n\n&lt;!-- 使用 &#96;scoped&#96; 特性 --&gt;\n&lt;style scoped&gt;\n.btn-close &#123;\n  background-color: red;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<p>反例：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;button class&#x3D;&quot;btn btn-close&quot;&gt;X&lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;\n&lt;!-- 没有使用 &#96;scoped&#96; 特性 --&gt;\n&lt;style&gt;\n.btn-close &#123;\n  background-color: red;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<h5 id=\"9-如果特性元素较多，应该主动换行。\"><a href=\"#9-如果特性元素较多，应该主动换行。\" class=\"headerlink\" title=\"9) 如果特性元素较多，应该主动换行。\"></a>9) 如果特性元素较多，应该主动换行。</h5><p>正例：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;ym-table :isLoading&#x3D;&quot;isTableLoading&quot; :tableData&#x3D;&quot;tableData&quot; :pageTotal&#x3D;&quot;pageTotal&quot; :pageNum&#x3D;&quot;pageNum&quot; :pageSize&#x3D;&quot;pageSize&quot; @page-num-change&#x3D;&quot;handlePageNumChange&quot; @page-size-change&#x3D;&quot;handlePageSizeChange&quot; &#x2F;&gt;</code></pre>\n\n<p>反例：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;ym-table :isLoading&#x3D;&quot;isTableLoading&quot; :tableData&#x3D;&quot;tableData&quot; :pageTotal&#x3D;&quot;pageTotal&quot; :pageNum&#x3D;&quot;pageNum&quot; :pageSize&#x3D;&quot;pageSize&quot; @page-num-change&#x3D;&quot;handlePageNumChange&quot; @page-size-change&#x3D;&quot;handlePageSizeChange&quot; &#x2F;&gt;</code></pre>\n\n<h4 id=\"2-1-2-模板中使用简单的表达式\"><a href=\"#2-1-2-模板中使用简单的表达式\" class=\"headerlink\" title=\"2.1.2. 模板中使用简单的表达式\"></a>2.1.2. 模板中使用简单的表达式</h4><p>组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。</p>\n<p>正例：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;p&gt;&#123;&#123; normalizedFullName &#125;&#125;&lt;&#x2F;p&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\n&#x2F;&#x2F; 复杂表达式已经移入一个计算属性\ncomputed: &#123;\n  normalizedFullName: function () &#123;\n    return this.fullName.split(&#39; &#39;).map(function (word) &#123;\n      return word[0].toUpperCase() + word.slice(1)\n    &#125;).join(&#39; &#39;)\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>反例：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;p&gt;\n    &#123;&#123;\n      fullName\n        .split(&#39; &#39;)\n        .map(function (word) &#123;\n          return word[0].toUpperCase() + word.slice(1)\n        &#125;)\n        .join(&#39; &#39;)\n    &#125;&#125;\n  &lt;&#x2F;p&gt;\n&lt;&#x2F;template&gt;</code></pre>\n\n<h4 id=\"2-1-3-指令都使用缩写形式\"><a href=\"#2-1-3-指令都使用缩写形式\" class=\"headerlink\" title=\"2.1.3 指令都使用缩写形式\"></a>2.1.3 指令都使用缩写形式</h4><p>指令推荐都使用缩写形式，(用 : 表示 v-bind: 、用 @ 表示 v-on: 和用 # 表示 v-slot:)</p>\n<p>正例：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;input :text&#x3D;&quot;text&quot; @change&#x3D;&quot;onChange&quot; &#x2F;&gt;</code></pre>\n\n<p>反例：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;input v-bind:text&#x3D;&quot;text&quot; v-on:change&#x3D;&quot;onChange&quot; &#x2F;&gt;</code></pre>\n\n<h4 id=\"2-1-4-标签顺序保持一致\"><a href=\"#2-1-4-标签顺序保持一致\" class=\"headerlink\" title=\"2.1.4 标签顺序保持一致\"></a>2.1.4 标签顺序保持一致</h4><p>单文件组件应该总是让标签顺序保持为 `</p>\n<p>正例：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;...&lt;&#x2F;template&gt;\n&lt;script&gt;\n...\n&lt;&#x2F;script&gt;\n&lt;style&gt;\n...;\n&lt;&#x2F;style&gt;</code></pre>\n\n<p>反例：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;...&lt;&#x2F;template&gt;\n&lt;style&gt;\n...\n&lt;&#x2F;style&gt;\n&lt;script&gt;\n...\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"2-1-5-必须为-v-for-设置键值-key\"><a href=\"#2-1-5-必须为-v-for-设置键值-key\" class=\"headerlink\" title=\"2.1.5 必须为 v-for 设置键值 key\"></a>2.1.5 必须为 v-for 设置键值 key</h4><h4 id=\"2-1-6-v-show-与-v-if-选择\"><a href=\"#2-1-6-v-show-与-v-if-选择\" class=\"headerlink\" title=\"2.1.6 v-show 与 v-if 选择\"></a>2.1.6 v-show 与 v-if 选择</h4><p>如果运行时，需要非常频繁地切换，使用 v-show ；如果在运行时，条件很少改变，使用 v-if。</p>\n<h4 id=\"2-1-7-script-标签内部结构顺序\"><a href=\"#2-1-7-script-标签内部结构顺序\" class=\"headerlink\" title=\"2.1.7 script 标签内部结构顺序\"></a>2.1.7 script 标签内部结构顺序</h4><p>components &gt; props &gt; data &gt; computed &gt; watch &gt; filter &gt; 钩子函数（钩子函数按其执行顺序） &gt; methods</p>\n<h4 id=\"2-1-8-Vue-Router-规范\"><a href=\"#2-1-8-Vue-Router-规范\" class=\"headerlink\" title=\"2.1.8 Vue Router 规范\"></a>2.1.8 Vue Router 规范</h4><h5 id=\"1-页面跳转数据传递使用路由参数\"><a href=\"#1-页面跳转数据传递使用路由参数\" class=\"headerlink\" title=\"1) 页面跳转数据传递使用路由参数\"></a>1) 页面跳转数据传递使用路由参数</h5><p>页面跳转，例如 A 页面跳转到 B 页面，需要将 A 页面的数据传递到 B 页面，推荐使用 路由参数进行传参，而不是将需要传递的数据保存 vuex，然后在 B 页面取出 vuex 的数据，因为如果在 B 页面刷新会导致 vuex 数据丢失，导致 B 页面无法正常显示数据。</p>\n<p>正例：</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">let id &#x3D; &#39; 123&#39;;\nthis.$router.push(&#123; name: &#39;userCenter&#39;, query: &#123; id: id &#125; &#125;);</code></pre>\n\n<h5 id=\"2-使用路由懒加载（延迟加载）机制\"><a href=\"#2-使用路由懒加载（延迟加载）机制\" class=\"headerlink\" title=\"2) 使用路由懒加载（延迟加载）机制\"></a>2) 使用路由懒加载（延迟加载）机制</h5><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#123;\n    path: &#39;&#x2F;uploadAttachment&#39;,\n    name: &#39;uploadAttachment&#39;,\n    meta: &#123;\n      title: &#39;上传附件&#39;\n    &#125;,\n    component: () &#x3D;&gt; import(&#39;@&#x2F;view&#x2F;components&#x2F;uploadAttachment&#x2F;index.vue&#39;)\n  &#125;,</code></pre>\n\n<h5 id=\"3-router-中的命名规范\"><a href=\"#3-router-中的命名规范\" class=\"headerlink\" title=\"3) router 中的命名规范\"></a>3) router 中的命名规范</h5><p>path、childrenPoints 命名规范采用 <code>kebab-case</code> 命名规范（尽量 Vue 文件的目录结构保持一致，因为目录、文件名都是 <code>kebab-case</code>，这样很方便找到对应的文件）</p>\n<p>name 命名规范采用 <code>KebabCase</code> 命名规范且和 component 组件名保持一致！（因为要保持 keep-alive 特性，keep-alive 按照 component 的 name 进行缓存，所以两者必须高度保持一致）</p>\n<p>JavaScript</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 动态加载\nexport const reload &#x3D; [\n  &#123;\n    path: &#39;&#x2F;reload&#39;,\n    name: &#39;reload&#39;,\n    component: Main,\n    meta: &#123;\n      title: &#39;动态加载&#39;,\n      icon: &#39;icon iconfont&#39;\n    &#125;,\n\n    children: [\n      &#123;\n        path: &#39;&#x2F;reload&#x2F;smart-reload-list&#39;,\n        name: &#39;SmartReloadList&#39;,\n        meta: &#123;\n          title: &#39;SmartReload&#39;,\n          childrenPoints: [\n            &#123;\n              title: &#39;查询&#39;,\n              name: &#39;smart-reload-search&#39;\n            &#125;,\n            &#123;\n              title: &#39;执行reload&#39;,\n              name: &#39;smart-reload-update&#39;\n            &#125;,\n            &#123;\n              title: &#39;查看执行结果&#39;,\n              name: &#39;smart-reload-result&#39;\n            &#125;\n          ]\n        &#125;,\n        component: () &#x3D;&gt;\n          import(&#39;@&#x2F;views&#x2F;reload&#x2F;smart-reload&#x2F;smart-reload-list.vue&#39;)\n      &#125;\n    ]\n  &#125;\n];</code></pre>\n\n<h5 id=\"4-router-中的-path-命名规范\"><a href=\"#4-router-中的-path-命名规范\" class=\"headerlink\" title=\"4) router 中的 path 命名规范\"></a>4) router 中的 path 命名规范</h5><p>path 除了采用 <code>kebab-case</code> 命名规范以外，必须以 / 开头，即使是 children 里的 path 也要以 / 开头。如下示例</p>\n<p>目的：</p>\n<p>经常有这样的场景：某个页面有问题，要立刻找到这个 vue 文件，如果不用以/开头，path 为 parent 和 children 组成的，可能经常需要在 router 文件里搜索多次才能找到，而如果以 / 开头，则能立刻搜索到对应的组件</p>\n<p>JavaScript</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#123;\n    path: &#39;&#x2F;file&#39;,\n    name: &#39;File&#39;,\n    component: Main,\n    meta: &#123;\n      title: &#39;文件服务&#39;,\n      icon: &#39;ios-cloud-upload&#39;\n    &#125;,\n    children: [\n      &#123;\n        path: &#39;&#x2F;file&#x2F;file-list&#39;,\n        name: &#39;FileList&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;file&#x2F;file-list.vue&#39;)\n      &#125;,\n      &#123;\n        path: &#39;&#x2F;file&#x2F;file-add&#39;,\n        name: &#39;FileAdd&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;file&#x2F;file-add.vue&#39;)\n      &#125;,\n      &#123;\n        path: &#39;&#x2F;file&#x2F;file-update&#39;,\n        name: &#39;FileUpdate&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;file&#x2F;file-update.vue&#39;)\n      &#125;\n    ]\n  &#125;</code></pre>\n\n<h3 id=\"二-Vue-项目目录规范\"><a href=\"#二-Vue-项目目录规范\" class=\"headerlink\" title=\"(二) Vue 项目目录规范\"></a>(二) Vue 项目目录规范</h3><h4 id=\"2-2-1-基础\"><a href=\"#2-2-1-基础\" class=\"headerlink\" title=\"2.2.1 基础\"></a>2.2.1 基础</h4><p>vue 项目中的所有命名一定要与后端命名统一。</p>\n<p>比如权限：后端 privilege, 前端无论 router , store, api 等都必须使用 privielege 单词！</p>\n<h4 id=\"2-2-2-使用-Vue-cli-脚手架\"><a href=\"#2-2-2-使用-Vue-cli-脚手架\" class=\"headerlink\" title=\"2.2.2 使用 Vue-cli 脚手架\"></a>2.2.2 使用 Vue-cli 脚手架</h4><p>使用 vue-cli3 来初始化项目，项目名按照上面的命名规范。</p>\n<h4 id=\"2-2-3-目录说明\"><a href=\"#2-2-3-目录说明\" class=\"headerlink\" title=\"2.2.3 目录说明\"></a>2.2.3 目录说明</h4><p>目录名按照上面的命名规范，其中 components 组件用大写驼峰，其余除 components 组件目录外的所有目录均使用 kebab-case 命名。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">├── build                      &#x2F;&#x2F; 构建相关\n├── bin                        &#x2F;&#x2F; 执行脚本\n├── public                     &#x2F;&#x2F; 公共文件\n│   ├── favicon.ico            &#x2F;&#x2F; favicon图标\n│   └── index.html             &#x2F;&#x2F; html模板\n├── src                        &#x2F;&#x2F; 源代码\n│   ├── api                    &#x2F;&#x2F; 所有请求\n│   ├── assets                 &#x2F;&#x2F; 主题 字体等静态资源\n│   ├── components             &#x2F;&#x2F; 全局公用组件\n│   ├── directive              &#x2F;&#x2F; 全局指令\n│   ├── layout                 &#x2F;&#x2F; 布局\n│   ├── router                 &#x2F;&#x2F; 路由\n│   ├── store                  &#x2F;&#x2F; 全局状态管理(Vuex)\n│   ├── utils                  &#x2F;&#x2F; 全局公用方法\n│   ├── views                  &#x2F;&#x2F; 页面\n│   ├── App.vue                &#x2F;&#x2F; 入口页面\n│   ├── main.js                &#x2F;&#x2F; 入口 加载组件 初始化等\n│   ├── permission.js          &#x2F;&#x2F; 权限管理\n│   └── settings.js            &#x2F;&#x2F; 系统配置\n├── .editorconfig              &#x2F;&#x2F; 编码格式\n├── .env.development           &#x2F;&#x2F; 开发环境配置\n├── .env.production            &#x2F;&#x2F; 生产环境配置\n├── .env.staging               &#x2F;&#x2F; 测试环境配置\n├── .eslintignore              &#x2F;&#x2F; 忽略语法检查\n├── .eslintrc.js               &#x2F;&#x2F; eslint 配置项\n├── .prettierrc                &#x2F;&#x2F; 代码格式化配置\n├── jsconfig.json              &#x2F;&#x2F; 指定了根文件和 JavaScript 语言服务提供的特性的选项\n├── .gitignore                 &#x2F;&#x2F; git 忽略项\n├── babel.config.js            &#x2F;&#x2F; babel.config.js\n├── package.json               &#x2F;&#x2F; package.json\n└── vue.config.js              &#x2F;&#x2F; Vue 项目配置</code></pre>\n\n<h5 id=\"1-api-目录\"><a href=\"#1-api-目录\" class=\"headerlink\" title=\"1) api 目录\"></a>1) api 目录</h5><ul>\n<li>文件、变量命名尽量与后端保持一致。</li>\n<li>此目录对应后端 API 接口，按照后端一个 controller 一个 api js 文件。若项目较大时，可以按照业务划分子目录，并与后端保持一致。</li>\n<li>api 中的方法名字要与后端 api url 尽量保持语义高度一致性。</li>\n<li>api 中的每个方法要添加注释，注释与后端 swagger 文档保持一致。</li>\n<li>api 中的每个方法的参数尽量定义完全，便于调用时参数的查看。</li>\n</ul>\n<p>正例：</p>\n<p>后端 ： EmployeeController.java</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;employee&#x2F;add\n&#x2F;employee&#x2F;delete&#x2F;&#123;id&#125;\n&#x2F;employee&#x2F;update</code></pre>\n\n<p>前端： employee.js</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 添加员工\nexport const addEmployee &#x3D; (username, age, gender) &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#39;&#x2F;employee&#x2F;add&#39;,\n    method: &#39;post&#39;,\n    data: &#123;\n      username,\n      age,\n      gender\n    &#125;\n  &#125;)\n&#125;\n&#x2F;&#x2F; 更新员工信息\nexport const updateEmployee &#x3D; (username, age, gender) &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#39;&#x2F;employee&#x2F;update&#39;,\n    method: &#39;post&#39;,\n    data: &#123;\n      username,\n      age,\n      gender\n    &#125;\n  &#125;)\n&#125;\n&#x2F;&#x2F; 删除员工\nexport const deleteEmployee &#x3D; (employeeId) &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#96;&#x2F;employee&#x2F;delete&#x2F;$&#123;employeeId&#125;&#96;,\n    method: &#39;post&#39;\n  &#125;)\n&#125;</code></pre>\n\n<h5 id=\"2-assets-目录\"><a href=\"#2-assets-目录\" class=\"headerlink\" title=\"2) assets 目录\"></a>2) assets 目录</h5><p>assets 为静态资源，里面存放 images, styles, icons 等静态资源，静态资源命名格式为 kebab-case</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">|assets\n|-- icons\n|-- images\n|   |-- background-color.png\n|   |-- upload-header.png\n|-- styles</code></pre>\n\n<h5 id=\"3-components-目录\"><a href=\"#3-components-目录\" class=\"headerlink\" title=\"3) components 目录\"></a>3) components 目录</h5><p>此目录应按照组件进行目录划分，目录命名为 CamelCase，组件命名规则也为 CamelCase</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">|components\n|-- ErrorLog\n|   |-- index.vue\n|   |-- index.scss\n|-- MarkdownEditor\n|   |-- index.vue\n|   |-- index.scss</code></pre>\n\n<h5 id=\"4-constants-目录\"><a href=\"#4-constants-目录\" class=\"headerlink\" title=\"4) constants 目录\"></a>4) constants 目录</h5><p>此目录存放项目所有常量，如果常量在 vue 中使用，请使用 vue-enum 插件(<a href=\"https://www.npmjs.com/package/vue-enum\">https://www.npmjs.com/package/vue-enum</a>)</p>\n<p>目录结构：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">|constants\n|-- index.js\n|-- role.js\n|-- employee.js</code></pre>\n\n<p>例子： employee.js</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export const EMPLOYEE_STATUS &#x3D; &#123;\n  NORMAL: &#123;\n    value: 1,\n    desc: &#39;正常&#39;\n  &#125;,\n  DISABLED: &#123;\n    value: 1,\n    desc: &#39;禁用&#39;\n  &#125;,\n  DELETED: &#123;\n    value: 2,\n    desc: &#39;已删除&#39;\n  &#125;\n&#125;\n\nexport const EMPLOYEE_ACCOUNT_TYPE &#x3D; &#123;\n  QQ: &#123;\n    value: 1,\n    desc: &#39;QQ登录&#39;\n  &#125;,\n  WECHAT: &#123;\n    value: 2,\n    desc: &#39;微信登录&#39;\n  &#125;,\n  DINGDING: &#123;\n    value: 3,\n    desc: &#39;钉钉登录&#39;\n  &#125;,\n  USERNAME: &#123;\n    value: 4,\n    desc: &#39;用户名密码登录&#39;\n  &#125;\n&#125;\n\nexport default &#123;\n  EMPLOYEE_STATUS,\n  EMPLOYEE_ACCOUNT_TYPE\n&#125;</code></pre>\n\n<h5 id=\"5-router-与-store-目录\"><a href=\"#5-router-与-store-目录\" class=\"headerlink\" title=\"5) router 与 store 目录\"></a>5) router 与 store 目录</h5><p>这两个目录一定要将业务进行拆分，不能放到一个 js 文件里。</p>\n<p>router 尽量按照 views 中的结构保持一致</p>\n<p>store 按照业务进行拆分不同的 js 文件</p>\n<h5 id=\"6-views-目录\"><a href=\"#6-views-目录\" class=\"headerlink\" title=\"6) views 目录\"></a>6) views 目录</h5><ul>\n<li>命名要与后端、router、api 等保持一致</li>\n<li>components 中组件要使用 CamelCase 规则</li>\n<li><code>index.vue</code>除外</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">|-- views                            视图目录\n|   |-- Role                             role模块名\n|   |   |-- RoleList.vue                    role列表页面\n|   |   |-- RoleAdd.vue                     role新建页面\n|   |   |-- RoleUpdate.vue                  role更新页面\n|   |   |-- index.vue                      role模块样式\n|   |-- Employee                         employee模块\n|   |-- BehaviorLog                      行为日志log模块\n|   |-- CodeGenerator                    代码生成器模块</code></pre>\n\n<h4 id=\"2-2-4-注释说明\"><a href=\"#2-2-4-注释说明\" class=\"headerlink\" title=\"2.2.4 注释说明\"></a>2.2.4 注释说明</h4><ul>\n<li>在变量名和函数名不足以表达其含义时才需要注释</li>\n<li>公共组件需要注释</li>\n<li>store 中的 state, mutation, action 等需要注释</li>\n<li>函数的逻辑特别复杂时需要注释</li>\n</ul>\n<h4 id=\"2-2-5-其他\"><a href=\"#2-2-5-其他\" class=\"headerlink\" title=\"2.2.5 其他\"></a>2.2.5 其他</h4><h5 id=\"1-尽量不要手动操作-DOM\"><a href=\"#1-尽量不要手动操作-DOM\" class=\"headerlink\" title=\"1) 尽量不要手动操作 DOM\"></a>1) 尽量不要手动操作 DOM</h5><p>因使用 Vue 框架，所以在项目开发中尽量使用 Vue 的数据驱动更新 DOM，尽量（不到万不得已）不要手动操作 DOM，包括：增删改 Dom 元素、以及更改样式、添加事件等。</p>\n<h5 id=\"2-删除无用代码\"><a href=\"#2-删除无用代码\" class=\"headerlink\" title=\"2) 删除无用代码\"></a>2) 删除无用代码</h5><p>因使用了 Git 代码版本工具，对于无用代码必须及时删除，例如：一些调试的 console 语句、无用的弃用功能代码。</p>\n","text":" 此规范基于 阿里前端开发规范 | Tim 并结合实际项目进行部分修改 一、编程规约(一) 命名规范1.1.1 项目命名全部采用小写方式， 以中划线分隔。 正例：mall-management-system 反例：mall_management-system / mallMana...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"}],"tags":[{"name":"规范","slug":"规范","count":1,"path":"api/tags/规范.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6\"><span class=\"toc-text\">一、编程规约</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80-%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">(一) 命名规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-1-%E9%A1%B9%E7%9B%AE%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">1.1.1 项目命名</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-2-%E7%9B%AE%E5%BD%95%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">1.1.2 目录命名</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-3-JS%E3%80%81CSS%E3%80%81SCSS%E3%80%81HTML%E3%80%81PNG-%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-4-%E5%91%BD%E5%90%8D%E4%B8%A5%E8%B0%A8%E6%80%A7\"><span class=\"toc-text\">1.1.4 命名严谨性</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C-HTML-%E8%A7%84%E8%8C%83-%EF%BC%88Vue-Template-%E5%90%8C%E6%A0%B7%E9%80%82%E7%94%A8%EF%BC%89\"><span class=\"toc-text\">(二) HTML 规范 （Vue Template 同样适用）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-1-HTML-%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1.2.1 HTML 类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-2-%E7%BC%A9%E8%BF%9B\"><span class=\"toc-text\">1.2.2 缩进</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-3-%E5%88%86%E5%9D%97%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">1.2.3 分块注释</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-4-%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">1.2.4 语义化标签</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-5-%E5%BC%95%E5%8F%B7\"><span class=\"toc-text\">1.2.5 引号</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89-CSS-%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">(三) CSS 规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-1-%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">1.3.1 命名</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-2-%E9%80%89%E6%8B%A9%E5%99%A8\"><span class=\"toc-text\">1.3.2 选择器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-3-%E5%B0%BD%E9%87%8F%E4%BD%BF%E7%94%A8%E7%BC%A9%E5%86%99%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">1.3.3 尽量使用缩写属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-4-%E6%AF%8F%E4%B8%AA%E9%80%89%E6%8B%A9%E5%99%A8%E5%8F%8A%E5%B1%9E%E6%80%A7%E7%8B%AC%E5%8D%A0%E4%B8%80%E8%A1%8C\"><span class=\"toc-text\">1.3.4 每个选择器及属性独占一行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-5-%E7%9C%81%E7%95%A5-0-%E5%90%8E%E9%9D%A2%E7%9A%84%E5%8D%95%E4%BD%8D\"><span class=\"toc-text\">1.3.5 省略 0 后面的单位</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-6-%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8-ID-%E9%80%89%E6%8B%A9%E5%99%A8%E5%8F%8A%E5%85%A8%E5%B1%80%E6%A0%87%E7%AD%BE%E9%80%89%E6%8B%A9%E5%99%A8%E9%98%B2%E6%AD%A2%E6%B1%A1%E6%9F%93%E5%85%A8%E5%B1%80%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">1.3.6 避免使用 ID 选择器及全局标签选择器防止污染全局样式</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B-SCSS-%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">(四) SCSS 规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-1-%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87\"><span class=\"toc-text\">1.4.1 代码组织</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%B0%86%E5%85%AC%E5%85%B1-scss-%E6%96%87%E4%BB%B6%E6%94%BE%E7%BD%AE%E5%9C%A8-src-assets-styles-%E6%96%87%E4%BB%B6%E5%A4%B9\"><span class=\"toc-text\">1) 将公共 scss 文件放置在 src&#x2F;assets&#x2F;styles 文件夹</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E6%8C%89%E4%BB%A5%E4%B8%8B%E9%A1%BA%E5%BA%8F%E7%BB%84%E7%BB%87\"><span class=\"toc-text\">2) 按以下顺序组织</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-2-%E9%81%BF%E5%85%8D%E5%B5%8C%E5%A5%97%E5%B1%82%E7%BA%A7%E8%BF%87%E5%A4%9A\"><span class=\"toc-text\">1.4.2 避免嵌套层级过多</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94-Javascript-%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">(五) Javascript 规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-1-%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">1.5.1 命名</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E9%87%87%E7%94%A8%E5%B0%8F%E5%86%99%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D-lowerCamelCase%EF%BC%8C%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84%E5%91%BD%E5%90%8D%E5%9D%87%E4%B8%8D%E8%83%BD%E4%BB%A5%E4%B8%8B%E5%88%92%E7%BA%BF%EF%BC%8C%E4%B9%9F%E4%B8%8D%E8%83%BD%E4%BB%A5%E4%B8%8B%E5%88%92%E7%BA%BF%E6%88%96%E7%BE%8E%E5%85%83%E7%AC%A6%E5%8F%B7%E7%BB%93%E6%9D%9F\"><span class=\"toc-text\">1) 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E6%96%B9%E6%B3%95%E5%90%8D%E3%80%81%E5%8F%82%E6%95%B0%E5%90%8D%E3%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E9%83%BD%E7%BB%9F%E4%B8%80%E4%BD%BF%E7%94%A8-lowerCamelCase-%E9%A3%8E%E6%A0%BC%EF%BC%8C%E5%BF%85%E9%A1%BB%E9%81%B5%E4%BB%8E%E9%A9%BC%E5%B3%B0%E5%BD%A2%E5%BC%8F%E3%80%82\"><span class=\"toc-text\">2) 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E5%B8%B8%E9%87%8F%E5%91%BD%E5%90%8D%E5%85%A8%E9%83%A8%E5%A4%A7%E5%86%99%EF%BC%8C%E5%8D%95%E8%AF%8D%E9%97%B4%E7%94%A8%E4%B8%8B%E5%88%92%E7%BA%BF%E9%9A%94%E5%BC%80%EF%BC%8C%E5%8A%9B%E6%B1%82%E8%AF%AD%E4%B9%89%E8%A1%A8%E8%BE%BE%E5%AE%8C%E6%95%B4%E6%B8%85%E6%A5%9A%EF%BC%8C%E4%B8%8D%E8%A6%81%E5%AB%8C%E5%90%8D%E5%AD%97%E9%95%BF%E3%80%82\"><span class=\"toc-text\">3) 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-2-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">1.5.2 代码格式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8-2-%E4%B8%AA%E7%A9%BA%E6%A0%BC%E8%BF%9B%E8%A1%8C%E7%BC%A9%E8%BF%9B\"><span class=\"toc-text\">1) 使用 2 个空格进行缩进</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E4%B8%8D%E5%90%8C%E9%80%BB%E8%BE%91%E3%80%81%E4%B8%8D%E5%90%8C%E8%AF%AD%E4%B9%89%E3%80%81%E4%B8%8D%E5%90%8C%E4%B8%9A%E5%8A%A1%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B9%8B%E9%97%B4%E6%8F%92%E5%85%A5%E4%B8%80%E4%B8%AA%E7%A9%BA%E8%A1%8C%E5%88%86%E9%9A%94%E5%BC%80%E6%9D%A5%E4%BB%A5%E6%8F%90%E5%8D%87%E5%8F%AF%E8%AF%BB%E6%80%A7%E3%80%82\"><span class=\"toc-text\">2) 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-3-%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">1.5.3 字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E7%BB%9F%E4%B8%80%E4%BD%BF%E7%94%A8%E5%8D%95%E5%BC%95%E5%8F%B7-%E2%80%98-%EF%BC%8C%E4%B8%8D%E4%BD%BF%E7%94%A8%E5%8F%8C%E5%BC%95%E5%8F%B7-%E2%80%9C-%E3%80%82%E8%BF%99%E5%9C%A8%E5%88%9B%E5%BB%BA-HTML-%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%9D%9E%E5%B8%B8%E6%9C%89%E5%A5%BD%E5%A4%84%EF%BC%9A\"><span class=\"toc-text\">1) 统一使用单引号(‘)，不使用双引号(“)。这在创建 HTML 字符串非常有好处：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E7%BB%9F%E4%B8%80%E4%BD%BF%E7%94%A8-ES6-%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86\"><span class=\"toc-text\">2) 字符串拼接统一使用 ES6 模板字符串处理</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-4-%E5%AF%B9%E8%B1%A1%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">1.5.4 对象声明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8%E5%AD%97%E9%9D%A2%E5%80%BC%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">1) 使用字面值创建对象</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8%E5%AD%97%E9%9D%A2%E9%87%8F%E6%9D%A5%E4%BB%A3%E6%9B%BF%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E5%99%A8\"><span class=\"toc-text\">2) 使用字面量来代替对象构造器</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-5-%E4%BD%BF%E7%94%A8-ES6-ES7\"><span class=\"toc-text\">1.5.5 使用 ES6,ES7</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-6-%E6%8B%AC%E5%8F%B7\"><span class=\"toc-text\">1.5.6 括号</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-7-undefined-%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">1.5.7 undefined 判断</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-8-%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF%E6%9C%80%E5%A4%9A%E4%B8%89%E5%B1%82\"><span class=\"toc-text\">1.5.8 条件判断和循环最多三层</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-9-this-%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">1.5.9 this 的转换命名</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-10-%E6%85%8E%E7%94%A8-console-log\"><span class=\"toc-text\">1.5.10 慎用 console.log</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81Vue-%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">二、Vue 项目规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80-Vue-%E7%BC%96%E7%A0%81%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">(一) Vue 编码基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-1-%E7%BB%84%E4%BB%B6%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">2.1.1. 组件规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E7%BB%84%E4%BB%B6%E5%90%8D%E4%B8%BA%E5%A4%9A%E4%B8%AA%E5%8D%95%E8%AF%8D%E3%80%82\"><span class=\"toc-text\">1) 组件名为多个单词。</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E7%BB%84%E4%BB%B6%E6%96%87%E4%BB%B6%E5%90%8D%E4%B8%BA-CamelCase-%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">2) 组件文件名为 CamelCase 格式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E6%96%87%E4%BB%B6%E5%90%8D%E4%B8%BA-base-%E5%BC%80%E5%A4%B4%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%AE%8C%E6%95%B4%E5%8D%95%E8%AF%8D%E8%80%8C%E4%B8%8D%E6%98%AF%E7%BC%A9%E5%86%99%E3%80%82\"><span class=\"toc-text\">3) 基础组件文件名为 base 开头，使用完整单词而不是缩写。</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E5%92%8C%E7%88%B6%E7%BB%84%E4%BB%B6%E7%B4%A7%E5%AF%86%E8%80%A6%E5%90%88%E7%9A%84%E5%AD%90%E7%BB%84%E4%BB%B6%E5%BA%94%E8%AF%A5%E4%BB%A5%E7%88%B6%E7%BB%84%E4%BB%B6%E5%90%8D%E4%BD%9C%E4%B8%BA%E5%89%8D%E7%BC%80%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-%E5%9C%A8-Template-%E6%A8%A1%E7%89%88%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%EF%BC%8C%E5%BA%94%E4%BD%BF%E7%94%A8-PascalCase-%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%BD%BF%E7%94%A8%E8%87%AA%E9%97%AD%E5%90%88%E7%BB%84%E4%BB%B6%E3%80%82\"><span class=\"toc-text\">5) 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件。</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-%E7%BB%84%E4%BB%B6%E7%9A%84-data-%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">6) 组件的 data 必须是一个函数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-Prop-%E5%AE%9A%E4%B9%89%E5%BA%94%E8%AF%A5%E5%B0%BD%E9%87%8F%E8%AF%A6%E7%BB%86\"><span class=\"toc-text\">7) Prop 定义应该尽量详细</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-%E4%B8%BA%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">8) 为组件样式设置作用域</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#9-%E5%A6%82%E6%9E%9C%E7%89%B9%E6%80%A7%E5%85%83%E7%B4%A0%E8%BE%83%E5%A4%9A%EF%BC%8C%E5%BA%94%E8%AF%A5%E4%B8%BB%E5%8A%A8%E6%8D%A2%E8%A1%8C%E3%80%82\"><span class=\"toc-text\">9) 如果特性元素较多，应该主动换行。</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-2-%E6%A8%A1%E6%9D%BF%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95%E7%9A%84%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">2.1.2. 模板中使用简单的表达式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-3-%E6%8C%87%E4%BB%A4%E9%83%BD%E4%BD%BF%E7%94%A8%E7%BC%A9%E5%86%99%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">2.1.3 指令都使用缩写形式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-4-%E6%A0%87%E7%AD%BE%E9%A1%BA%E5%BA%8F%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4\"><span class=\"toc-text\">2.1.4 标签顺序保持一致</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-5-%E5%BF%85%E9%A1%BB%E4%B8%BA-v-for-%E8%AE%BE%E7%BD%AE%E9%94%AE%E5%80%BC-key\"><span class=\"toc-text\">2.1.5 必须为 v-for 设置键值 key</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-6-v-show-%E4%B8%8E-v-if-%E9%80%89%E6%8B%A9\"><span class=\"toc-text\">2.1.6 v-show 与 v-if 选择</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-7-script-%E6%A0%87%E7%AD%BE%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">2.1.7 script 标签内部结构顺序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-8-Vue-Router-%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">2.1.8 Vue Router 规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">1) 页面跳转数据传递使用路由参数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD%EF%BC%88%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%EF%BC%89%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">2) 使用路由懒加载（延迟加载）机制</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-router-%E4%B8%AD%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">3) router 中的命名规范</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-router-%E4%B8%AD%E7%9A%84-path-%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">4) router 中的 path 命名规范</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C-Vue-%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">(二) Vue 项目目录规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-1-%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">2.2.1 基础</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-2-%E4%BD%BF%E7%94%A8-Vue-cli-%E8%84%9A%E6%89%8B%E6%9E%B6\"><span class=\"toc-text\">2.2.2 使用 Vue-cli 脚手架</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-3-%E7%9B%AE%E5%BD%95%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">2.2.3 目录说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-api-%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">1) api 目录</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-assets-%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">2) assets 目录</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-components-%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">3) components 目录</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-constants-%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">4) constants 目录</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-router-%E4%B8%8E-store-%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">5) router 与 store 目录</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-views-%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">6) views 目录</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-4-%E6%B3%A8%E9%87%8A%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">2.2.4 注释说明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-5-%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">2.2.5 其他</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%B0%BD%E9%87%8F%E4%B8%8D%E8%A6%81%E6%89%8B%E5%8A%A8%E6%93%8D%E4%BD%9C-DOM\"><span class=\"toc-text\">1) 尽量不要手动操作 DOM</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%88%A0%E9%99%A4%E6%97%A0%E7%94%A8%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">2) 删除无用代码</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"申请LetsEncrypt通配符SSL证书","uid":"defa8072864be9cd1bcb03fd50d832a5","slug":"申请LetsEncrypt通配符SSL证书","date":"2021-01-26T03:49:01.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/申请LetsEncrypt通配符SSL证书.json","keywords":"👨‍💻🎸🍺","cover":null,"text":"获取 Certbot 客户端# 下载 Certbot 客户端 wget https:&#x2F;&#x2F;dl.eff.org&#x2F;certbot-auto # 设为可执行权限 chmod a+x certbot-auto 申请通配符证书.&#x2F;certbot-au...","link":"","photos":[],"count_time":{"symbolsCount":320,"symbolsTime":"1 mins."},"categories":[{"name":"运维","slug":"运维","count":5,"path":"api/categories/运维.json"}],"tags":[{"name":"Nginx","slug":"Nginx","count":3,"path":"api/tags/Nginx.json"},{"name":"Linux","slug":"Linux","count":3,"path":"api/tags/Linux.json"}],"author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"一网打尽this","uid":"b88101b328f136c8f25d5c4f4b2521da","slug":"一网打尽this","date":"2021-01-24T21:06:53.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/一网打尽this.json","keywords":"👨‍💻🎸🍺","cover":null,"text":"例题组合 1：全局环境下的 thisfunction f1() &#123; console.log(this) &#125; function f2() &#123; &#39;use strict&#39; console.log(this) &#125; f1() &#x2...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":14,"path":"api/tags/JavaScript.json"}],"author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}