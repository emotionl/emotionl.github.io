{"title":"JS的三种继承","uid":"a5b603fdecca7f9969a0f73abd417029","slug":"JS的三种继承","date":"2021-04-17T11:04:48.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/JS的三种继承.json","keywords":"👨‍💻🎸🍺","cover":null,"content":"<h2 id=\"ES6-Class\"><a href=\"#ES6-Class\" class=\"headerlink\" title=\"ES6 Class\"></a>ES6 Class</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Person &#123;\n  constructor(name, age) &#123;\n    this.name &#x3D; name\n    this.age &#x3D; age\n  &#125;\n  getInfo() &#123;\n    return &#96;name : $&#123;this.name&#125; $&#123;this.age&#125;&#96;\n  &#125;\n&#125;\n\nclass Student extends Person &#123;\n  constructor(name, age, grade) &#123;\n    super(name, age)\n    this.grade &#x3D; grade\n  &#125;\n  getGrade() &#123;\n    return &#96;grade : $&#123;this.grade&#125;&#96;\n  &#125;\n&#125;\n\nconst s1 &#x3D; new Student(&#39;Jack&#39;, 17, 100)\nconst s2 &#x3D; new Student(&#39;Tim&#39;, 19, 90)</code></pre>\n\n<h2 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Person(name, age) &#123;\n  this.name &#x3D; name\n  this.age &#x3D; age\n&#125;\n\nPerson.prototype.getInfo &#x3D; function () &#123;\n  return &#96;name : $&#123;this.name&#125; $&#123;this.age&#125;&#96;\n&#125;\n\nfunction Student(name, age, grade) &#123;\n  Person.call(this, name, age)\n  this.grade &#x3D; grade\n&#125;\n\nStudent.prototype &#x3D; Object.create(Person.prototype)\n\nStudent.prototype.getGrade &#x3D; function () &#123;\n  return &#96;grade : $&#123;this.grade&#125;&#96;\n&#125;\n\nStudent.prototype.constructor &#x3D; Student\n\nconst s1 &#x3D; new Student(&#39;Jack&#39;, 17, 100)\nconst s2 &#x3D; new Student(&#39;Tim&#39;, 19, 90)</code></pre>\n\n<h2 id=\"OLOO-Objects-Linked-to-Other-Objects\"><a href=\"#OLOO-Objects-Linked-to-Other-Objects\" class=\"headerlink\" title=\"OLOO ( Objects Linked to Other Objects )\"></a>OLOO ( Objects Linked to Other Objects )</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 使用 OLOO 的方式重构继承\n&#x2F;&#x2F; 创建 Person 对象\nconst Person &#x3D; &#123;\n  init(name, age) &#123;\n    this.name &#x3D; name\n    this.age &#x3D; age\n    return this\n  &#125;,\n  getInfo() &#123;\n    return &#96;name : $&#123;this.name&#125;\\n age : $&#123;this.age&#125;&#96;\n  &#125;\n&#125;\nconst p1 &#x3D; Object.create(Person).init(&#39;Tim&#39;, 20)\n\n&#x2F;* \n  使用 Object.create 创建一个以 Person 为原型的 Student 对象\n  Student 的 init 方法在原型链上会先比 Person 的 init 方法先被找到，所以不用担心\n  ---- Student 结构图 ----\n  ➡️ getGrade: ƒ ()\n  ➡️ init: ƒ (name, age, grade)\n  ⬇️ __proto__:\n    ➡️ getInfo: ƒ getInfo()\n    ➡️ init: ƒ init(name, age)\n    ➡️ __proto__: Object \n*&#x2F;\nconst Student &#x3D; Object.create(Person)\nStudent.init &#x3D; function (name, age, grade) &#123;\n  Person.init.call(this, name, age)\n  this.grade &#x3D; grade\n  return this\n&#125;\nStudent.getGrade &#x3D; function () &#123;\n  return &#96;grade : $&#123;this.grade&#125;&#96;\n&#125;\nconst s1 &#x3D; Object.create(Student).init(&#39;Jack&#39;, 17, 100)\nconst s2 &#x3D; Object.create(Student).init(&#39;Tim&#39;, 19, 90)</code></pre>\n\n\n\n","text":"ES6 Classclass Person &#123; constructor(name, age) &#123; this.name &#x3D; name this.age &#x3D; age &#125; getInfo() &#123; return &#96;nam...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":14,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ES6-Class\"><span class=\"toc-text\">ES6 Class</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E5%BC%8F%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">寄生组合式继承</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#OLOO-Objects-Linked-to-Other-Objects\"><span class=\"toc-text\">OLOO ( Objects Linked to Other Objects )</span></a></li></ol>","author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C指针","uid":"e1904a6ce18376ef8b5f00b597175c9f","slug":"C指针","date":"2021-06-17T05:12:05.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/C指针.json","keywords":"👨‍💻🎸🍺","cover":null,"text":"什么是指针 &amp; 指针变量 指针就是变量的内存地址，而用来存储指针的变量则是指针变量。 指针变量的声明&#x2F;* type *var-name; *&#x2F; int *ip; double *dp; float *fp; char *ch; 在这里，type 是指针...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"拓展","slug":"拓展","count":10,"path":"api/categories/拓展.json"}],"tags":[{"name":"C","slug":"C","count":2,"path":"api/tags/C.json"}],"author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"对象链接的方法","uid":"0ec65ba286b3197dc2b4ec62da6fde2a","slug":"对象链接的方法","date":"2021-04-10T11:26:01.000Z","updated":"2021-06-22T10:16:30.101Z","comments":true,"path":"api/articles/对象链接的方法.json","keywords":"👨‍💻🎸🍺","cover":null,"text":"对象链接也叫 OLOO ( Objects Linked to Other Objects )， 说的直白一点就是对象 A 链接对象 B，对象 A 可以访问对象 B 的属性和方法。 举个🌰，我们创建一个工具对象 BasicFormatter，然后通过不同的方式创建可以访问 Bas...","link":"","photos":[],"count_time":{"symbolsCount":802,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":17,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":14,"path":"api/tags/JavaScript.json"}],"author":{"name":"ZV","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"致过去的时光","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}