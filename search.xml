<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MongoDB 高级查询</title>
    <url>/2019/08/26/MongoDB%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h2 id="MongoDB-聚合管道"><a href="#MongoDB-聚合管道" class="headerlink" title="MongoDB 聚合管道"></a>MongoDB 聚合管道</h2><p>使用聚合管道可以对集合中的文档进行变换和组合<br>实际运用：表关联查询、数据的统计<br><code>MongoDB</code> 中使用 <code>db.COLLECTION_NAME.aggregate([&#123;&#125;,...])</code> 方法来构建和使用聚合管道</p>
<h2 id="Aggregation-Pipeline-Stages-amp-Operators"><a href="#Aggregation-Pipeline-Stages-amp-Operators" class="headerlink" title="Aggregation Pipeline Stages &amp; Operators"></a>Aggregation Pipeline Stages &amp; Operators</h2><h3 id="Stages-操作"><a href="#Stages-操作" class="headerlink" title="Stages 操作"></a>Stages 操作</h3><table>
<thead>
<tr>
<th>操作符 S</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>$project</code></td>
<td>修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档</td>
</tr>
<tr>
<td><code>$match</code></td>
<td>用于过滤数据，只输出符合条件的文档。<code>$match</code> 使用 MongoDB 的标准查询操作</td>
</tr>
<tr>
<td><code>$limit</code></td>
<td>用来限制 MongoDB 聚合管道返回的文档数</td>
</tr>
<tr>
<td><code>$skip</code></td>
<td>在聚合管道中跳过指定数量的文档，并返回余下的文档</td>
</tr>
<tr>
<td><code>$group</code></td>
<td>将集合中的文档分组，可用于统计结果</td>
</tr>
<tr>
<td><code>$sort</code></td>
<td>将输入文档排序后输出</td>
</tr>
<tr>
<td><code>$lookup</code></td>
<td>用以引入其它集合的数据 （表关联查询）</td>
</tr>
</tbody></table>
<h3 id="Operators-运算符"><a href="#Operators-运算符" class="headerlink" title="Operators 运算符"></a>Operators 运算符</h3><table>
<thead>
<tr>
<th align="left">Operators</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>$sum</code></td>
<td align="left">计算总和</td>
</tr>
<tr>
<td align="left"><code>$avg</code></td>
<td align="left">计算平均值</td>
</tr>
<tr>
<td align="left"><code>$min</code></td>
<td align="left">获取集合中所有文档对应值得最小值</td>
</tr>
<tr>
<td align="left"><code>$max</code></td>
<td align="left">获取集合中所有文档对应值得最大值</td>
</tr>
<tr>
<td align="left"><code>$push</code></td>
<td align="left">在结果文档中插入值到一个数组中</td>
</tr>
<tr>
<td align="left"><code>$addToSet</code></td>
<td align="left">在结果文档中插入值到一个数组中，但不创建副本</td>
</tr>
<tr>
<td align="left"><code>$first</code></td>
<td align="left">根据资源文档的排序获取第一个文档数据</td>
</tr>
<tr>
<td align="left"><code>$last</code></td>
<td align="left">根据资源文档的排序获取最后一个文档数据</td>
</tr>
</tbody></table>
<blockquote>
<p>管道操作符作为<strong>键</strong>，所对应的<strong>值</strong>叫做管道表达式<br>例如<code>&#123;$match:&#123;status:&quot;A&quot;&#125;&#125;</code>，<code>$match</code> 称为管道操作符，而 <code>status:&quot;A&quot;</code>称为管道表达式<br>每个管道表达式是一个文档结构，它是由字段名、字段值、和一些表达式操作符组成的</p>
</blockquote>
<h2 id="数据模拟"><a href="#数据模拟" class="headerlink" title="数据模拟"></a>数据模拟</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"order_id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"uid"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"trade_no"</span><span class="token operator">:</span><span class="token string">"111"</span><span class="token punctuation">,</span><span class="token string">"all_price"</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"all_num"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"order_id"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"uid"</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"trade_no"</span><span class="token operator">:</span><span class="token string">"222"</span><span class="token punctuation">,</span><span class="token string">"all_price"</span><span class="token operator">:</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"all_num"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"order_id"</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"uid"</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">"trade_no"</span><span class="token operator">:</span><span class="token string">"333"</span><span class="token punctuation">,</span><span class="token string">"all_price"</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"all_num"</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>order_item<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"order_id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token operator">:</span><span class="token string">"商品鼠标 1"</span><span class="token punctuation">,</span><span class="token string">"price"</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">,</span>num<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>order_item<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"order_id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token operator">:</span><span class="token string">"商品键盘 2"</span><span class="token punctuation">,</span><span class="token string">"price"</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">,</span>num<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>order_item<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"order_id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token operator">:</span><span class="token string">"商品键盘 3"</span><span class="token punctuation">,</span><span class="token string">"price"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>order_item<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"order_id"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token operator">:</span><span class="token string">"牛奶"</span><span class="token punctuation">,</span><span class="token string">"price"</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">,</span>num<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>order_item<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"order_id"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token operator">:</span><span class="token string">"酸奶"</span><span class="token punctuation">,</span><span class="token string">"price"</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">,</span>num<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>order_item<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"order_id"</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token operator">:</span><span class="token string">"矿泉水"</span><span class="token punctuation">,</span><span class="token string">"price"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>num<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>order_item<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"order_id"</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token operator">:</span><span class="token string">"毛巾"</span><span class="token punctuation">,</span><span class="token string">"price"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>num<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="project"><a href="#project" class="headerlink" title="$project"></a>$project</h2><p>自定义文档的结构，可以用来重命名、增加或删除文档中的字段</p>
<p>查找 order 只返回文档中 trade_no 和 all_price 字段</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
        $project<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            trade_no<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            all_price<span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="match"><a href="#match" class="headerlink" title="$match"></a>$match</h2><p>过滤。用法类似于 <code>find()</code> 方法中的参数</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
        $project<span class="token operator">:</span> <span class="token punctuation">&#123;</span> trade_no<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> all_price<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
        $match<span class="token operator">:</span> <span class="token punctuation">&#123;</span> all_price<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $gte<span class="token operator">:</span> <span class="token number">90</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="group"><a href="#group" class="headerlink" title="$group"></a>$group</h2><p>分组，可用于统计结果</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>order_item<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
        $group<span class="token operator">:</span> <span class="token punctuation">&#123;</span> _id<span class="token operator">:</span> <span class="token string">'$order_id'</span><span class="token punctuation">,</span> total<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $sum<span class="token operator">:</span> <span class="token string">'$num'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="sort"><a href="#sort" class="headerlink" title="$sort"></a>$sort</h2><p>排序</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
        $project<span class="token operator">:</span> <span class="token punctuation">&#123;</span> trade_no<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> all_price<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
        $sort<span class="token operator">:</span> <span class="token punctuation">&#123;</span> all_price<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="limit"><a href="#limit" class="headerlink" title="$limit"></a>$limit</h2><p>限制数量</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
        $project<span class="token operator">:</span> <span class="token punctuation">&#123;</span> trade_no<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> all_price<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
        $limit<span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="skip"><a href="#skip" class="headerlink" title="$skip"></a>$skip</h2><p>跳过</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
        $project<span class="token operator">:</span> <span class="token punctuation">&#123;</span> trade_no<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> all_price<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
        $skip<span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="lookup"><a href="#lookup" class="headerlink" title="$lookup"></a>$lookup</h2><p>表关联</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
        $lookup<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">from</span><span class="token operator">:</span> <span class="token string">'order_item'</span><span class="token punctuation">,</span>
            localField<span class="token operator">:</span> <span class="token string">'order_id'</span><span class="token punctuation">,</span>
            foreignField<span class="token operator">:</span> <span class="token string">'order_id'</span><span class="token punctuation">,</span>
            <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">'items'</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="综合运用"><a href="#综合运用" class="headerlink" title="综合运用"></a>综合运用</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
        $lookup<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">from</span><span class="token operator">:</span> <span class="token string">'order_item'</span><span class="token punctuation">,</span>
            localField<span class="token operator">:</span> <span class="token string">'order_id'</span><span class="token punctuation">,</span>
            foreignField<span class="token operator">:</span> <span class="token string">'order_id'</span><span class="token punctuation">,</span>
            <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">'items'</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
        $match<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            all_price<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                $gt<span class="token operator">:</span> <span class="token number">90</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
        $project<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            items<span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制</title>
    <url>/2019/08/26/%E4%BA%8C%E8%BF%9B%E5%88%B6/</url>
    <content><![CDATA[<h2 id="什么是二进制计数法？"><a href="#什么是二进制计数法？" class="headerlink" title="什么是二进制计数法？"></a>什么是二进制计数法？</h2><p>53 的十进制表达</p>
<pre class="line-numbers language-none"><code class="language-none">53 &#x3D; 5*10^1 + 3*10^0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>53 的二进制表达</p>
<pre class="line-numbers language-none"><code class="language-none">53 &#x3D; 1*2^5 + 1*2^4 + 0*2^3 + 1*2^2 + 0*2^1 + 1*2^0   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>JavaScript</code> 中 <code>Number.prototype.toString</code> 的模拟实现</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toStringFake</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> decNumber <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">let</span> remArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> rem <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>decNumber <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        rem <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>decNumber <span class="token operator">%</span> base<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rem <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> rem <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>rem <span class="token operator">+</span> <span class="token number">87</span><span class="token punctuation">)</span> <span class="token comment">// 余数超过9以[a-f]显示</span>
        remArr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>rem<span class="token punctuation">)</span>
        decNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>decNumber <span class="token operator">/</span> base<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> remArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>JavaScript</code> 中 <code>parseInt</code> 的模拟实现</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">parseIntFake</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">numText<span class="token punctuation">,</span> dec <span class="token operator">=</span> <span class="token number">10</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> numText
        <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> next<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            next <span class="token operator">=</span> <span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token operator">+</span>next<span class="token punctuation">)</span> <span class="token operator">?</span> next<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">87</span> <span class="token operator">:</span> <span class="token operator">+</span>next
            <span class="token keyword">return</span> prev <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>dec<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">*</span> next
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>余数</title>
    <url>/2019/08/26/%E4%BD%99%E6%95%B0/</url>
    <content><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>余数总是在一个固定的范围内。</p>
<p>整数是没有边界的，它可能是正无穷，也可能是负无穷。但是余数却可以通过某一种关系，让整数处于一个确定的边界内。</p>
<p>同余定理：简单来说，就是两个整数 a 和 b，如果它们除以正整数 m 得到的余数相等，我们就可以说 a 和 b 对于模 m 同余。</p>
<p>还有，我们经常提到的奇数和偶数，其实也是同余定理的一个应用。当然，这个应用里，它的模就是 2 了，2 除以 2 余 0，所以它是偶数；3 除以 2 余 1，所以它是奇数。2 和 4 除以 2 的余数都是 0，所以它们都是一类，都是偶数。3 和 5 除以 2 的余数都是 1，所以它们都是一类，都是奇数。</p>
<p>简单来说， <strong>同余定理其实就是用来分类的</strong> 。你知道，我们有无穷多个整数，那怎么能够全面、多维度地管理这些整数？同余定理就提供了一个思路。</p>
<p>因为不管你的模是几，最终得到的余数肯定都在一个范围内。比如我们上面除以 7，就得到了星期几；我们除以 2，就得到了奇偶数。所以按照这种方式, 我们就可以<strong>把无穷多个整数分成有限多个类</strong>。</p>
<h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><p>哈希有的时候也会被翻译为散列，简单来说，它就是 <strong>将任意长度的输入，通过哈希算法，压缩为某一固定长度的输出</strong> </p>
<p><img src="./../../assets/image/08.png" alt="07"></p>
<p>在这个公式中，x 表示等待被转换的数值，而 size 表示有限存储空间的大小，mod 表示取余操作。 <strong>通过余数，你就能将任何数值，转换为有限范围内的一个数值，然后根据这个新的数值，来确定将数据存放在何处</strong>。</p>
<p>让我以加密算法为例，举个例子，比如说我们要加密一组三位数，那我们设定一个这样的加密规则：</p>
<ol>
<li>先对每个三位数的个、十和百位数，都加上一个较大的随机数</li>
<li>然后将每位上的数都除以 7，用所得的余数代替原有的个、十、百位数</li>
<li>最后将第一位和第三位交换。</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 加密</span>
<span class="token keyword">const</span> <span class="token function-variable function">hashEncrypt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> salt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> valueList <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">+</span>item<span class="token punctuation">)</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> valueList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> quotient <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">+</span> salt<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> rem <span class="token operator">=</span> <span class="token punctuation">(</span>item <span class="token operator">+</span> salt<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">7</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
            quotient<span class="token punctuation">,</span>
            rem
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> encryptValue <span class="token operator">=</span> <span class="token operator">+</span>result<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>rem<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> iv <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>quotient<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        encryptValue<span class="token punctuation">,</span>
        iv
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 解密</span>
<span class="token keyword">const</span> <span class="token function-variable function">hashDecrypt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> iv<span class="token punctuation">,</span> salt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> valueList <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">+</span>item<span class="token punctuation">)</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> valueList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> iv<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">+</span> item <span class="token operator">-</span> salt
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> decryptValue <span class="token operator">=</span> <span class="token operator">+</span>result<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> decryptValue
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> testValue <span class="token operator">=</span> <span class="token number">751</span>
<span class="token keyword">let</span> salt <span class="token operator">=</span> <span class="token number">4523645</span>
<span class="token keyword">let</span> <span class="token punctuation">&#123;</span> encryptValue<span class="token punctuation">,</span> iv <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">hashEncrypt</span><span class="token punctuation">(</span>testValue<span class="token punctuation">,</span> salt<span class="token punctuation">)</span>
<span class="token keyword">let</span> decryptValue <span class="token operator">=</span> <span class="token function">hashDecrypt</span><span class="token punctuation">(</span>encryptValue<span class="token punctuation">,</span> iv<span class="token punctuation">,</span> salt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>关于进制的思考</title>
    <url>/2019/08/26/%E5%85%B3%E4%BA%8E%E8%BF%9B%E5%88%B6%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h2 id="三个基本类型"><a href="#三个基本类型" class="headerlink" title="三个基本类型"></a>三个基本类型</h2><ul>
<li><code>int</code></li>
<li><code>float</code></li>
<li><code>char</code></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>bit 二进制位</p>
<p>计算机用来存储数据最基本的单位是电子管 有两种状态开启和关闭 即 0 和 1 这两种可能</p>
<p>对应到计算机中的存储单位就是 <code>bit</code></p>
<p><code>n</code>个<code>bit</code>可以表示 <code>0 ~ 2^n - 1</code> 这个区间的数</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">二进制</th>
<th align="center">十进制</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">100</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">101</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">110</td>
<td align="center">6</td>
</tr>
<tr>
<td align="center">111</td>
<td align="center">7</td>
</tr>
</tbody></table>
<ul>
<li><p>Byte</p>
<p>在计算机中 8 个二进制位为一个字节 (B)，最常用的单位。</p>
<p>所以可以得出 1 个 <code>Byte</code> 可以表示一个<code>0 ~ 2^8 - 1</code>大小的数</p>
</li>
<li><p>进制</p>
<p>进制只是数字的一种表现形式</p>
<p>也就是说<code>10 进制 32</code>和<code>2 进制的 100000</code>其实是一样的 只是展现方式的有所不同 </p>
</li>
<li><p>int 与 char 的关系</p>
<p>在 C 语言中 int 与 char 是可以无缝转换的</p>
</li>
<li><p>string 类型的的本质是个数组</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 此时 a 是一个整形数字 即 int 类型</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span>						
<span class="token comment">// 由于 int 和 char 是相同的那么我们可以找到 ASCII 码为 100 的 char 即 "d"</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>	
<span class="token comment">// 然而把 a 从 int 转换成 string 得到 "100" 后其实得到的是一个装满 char 的一个数组</span>
<span class="token comment">// 每一个 char 都可以找到它的 int 类型</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>			<span class="token comment">// "100"</span>
c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>					<span class="token comment">// 54</span>
c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>					<span class="token comment">// 52</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>同一个数由于进制不同而导致的显示方式不同并不影响他们相等</p>
<p>但是一个 int 类型的 100 和一个 string 类型的 “100”是完全不同的</p>
<p>存储一个 int 的 100 用 1 Byte 又就可以了</p>
<p>存储一个 string 类型的 “100” 需要用 3 Byte （1 个 char 需要 1 Byte 大小的空间去存储）</p>
</li>
</ul>
<h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><h3 id="计算机存储单位的换算关系"><a href="#计算机存储单位的换算关系" class="headerlink" title="计算机存储单位的换算关系"></a>计算机存储单位的换算关系</h3><p>计算机存储单位一般用<code>bit、B、KB、MB、GB、TB、PB、EB、ZB、YB、BB、NB、DB……</code>来表示，它们之间的关系是：</p>
<p>位 bit (比特)(Binary Digits)：存放一位二进制数，即 0 或 1，最小的存储单位。[英文缩写：b(固定小写)]</p>
<p>字节byte：8个二进制位为一个字节(B)，最常用的单位。</p>
<ul>
<li><code>1 Byte (B) = 8 bit</code></li>
<li><code>1 Kilo Byte (KB) = 1024 B</code></li>
<li><code>1 Mega Byte (MB) = 1024 KB</code></li>
<li><code>1 Giga Byte (GB) = 1024 MB</code></li>
<li><code>1 Tera Byte (TB) = 1024 GB</code></li>
<li><code>1 Peta Byte (PB) = 1024 TB</code></li>
<li><code>1 Exa Byte (EB) = 1024 PB</code></li>
<li><code>1 Zetta Byte (ZB) = 1024 EB</code></li>
<li><code>1 Yotta Byte (YB) = 1024 ZB</code></li>
<li><code>1 Bronto Byte (BB) = 1024 YB</code></li>
<li><code>1 Nona Byte (NB) = 1024 BB</code></li>
<li><code>1 Dogga Byte (DB) = 1024 NB</code></li>
<li><code>1 Corydon Byte (CB) = 1024 DB</code></li>
</ul>
<h3 id="JS-中整形转换成字节数组"><a href="#JS-中整形转换成字节数组" class="headerlink" title="JS 中整形转换成字节数组"></a>JS 中整形转换成字节数组</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">intToBytes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> len</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> int8Arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            int8Arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>value <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>
        <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> int8Arr
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="JS中10进制转任意进制"><a href="#JS中10进制转任意进制" class="headerlink" title="JS中10进制转任意进制"></a>JS中10进制转任意进制</h3>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">divideByDec</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">decNumber<span class="token punctuation">,</span> base</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> remArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> rem <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>decNumber <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        rem <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>decNumber <span class="token operator">%</span> base<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rem <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> rem <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>rem <span class="token operator">+</span> <span class="token number">87</span><span class="token punctuation">)</span>
        remArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rem<span class="token punctuation">)</span>
        decNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>decNumber <span class="token operator">/</span> base<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> remArr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// Math.floor() 方法返回小于等于x的最大整数。</span>
<span class="token comment">// String.fromCharCode() 返回ASCII码对应的字符</span>
<span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">divideByDec</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> decNumber <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">let</span> remArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> rem <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>decNumber <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        rem <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>decNumber <span class="token operator">%</span> base<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rem <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> rem <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>rem <span class="token operator">+</span> <span class="token number">87</span><span class="token punctuation">)</span>
        remArr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>rem<span class="token punctuation">)</span>
        decNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>decNumber <span class="token operator">/</span> base<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> remArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>小试 MongoDB</title>
    <url>/2019/08/26/%E5%B0%8F%E8%AF%95MongoDB/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>cls</td>
<td>清屏</td>
</tr>
<tr>
<td>show dbs</td>
<td>查看所有数据库</td>
</tr>
<tr>
<td>show collections</td>
<td>显示当前数据库中的所有集合</td>
</tr>
</tbody></table>
<h2 id="NoSQL-Not-Only-SQL-vs-SQL"><a href="#NoSQL-Not-Only-SQL-vs-SQL" class="headerlink" title="NoSQL( Not Only SQL) vs SQL"></a>NoSQL( Not Only SQL) vs SQL</h2><p><code>MySQL</code> 中的许多概念在 <code>MongoDB</code> 中具有相近的类比。本表概述了每个系统中的一些常见概念。</p>
<table>
<thead>
<tr>
<th><code>MySQL</code></th>
<th><code>MongoDB</code></th>
</tr>
</thead>
<tbody><tr>
<td>表</td>
<td>集合</td>
</tr>
<tr>
<td>行</td>
<td>文档</td>
</tr>
<tr>
<td>列</td>
<td>字段</td>
</tr>
<tr>
<td><code>joins</code></td>
<td>嵌入文档或者链接</td>
</tr>
</tbody></table>
<blockquote>
<p><a href="https://www.cnblogs.com/beilin/p/5981870.html">关系型数据库与 NoSQL 的对比</a></p>
<p><a href="https://juejin.im/post/5b6d62ddf265da0f491bd200">NoSQL 还是 SQL ？这一篇讲清楚</a></p>
<p><a href="https://juejin.im/entry/5b97e4446fb9a05d1b2e3b79">小白必须懂的 MongoDB 的十大总结</a></p>
</blockquote>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><ul>
<li><p>开启<code>MongoDB</code>服务</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">mongod <span class="token operator">--</span>dbpath <span class="token constant">D</span><span class="token operator">:</span>\data\db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>管理数据库</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mongo <span class="token number">127.0</span>.0.1:27017<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><ol>
<li><p>使用并创建数据库</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>在数据库<code>user</code>中的集合<code>member</code>中插入一条数据（集合需要通过向其插入数据进行创建）</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Jack'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>删除数据库<code>user</code>中的集合<code>member</code></p>
 <pre class="line-numbers language-none"><code class="language-none">db.member.drop()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>删除数据库<code>user</code></p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">use user <span class="token comment">// 需要先使用数据库</span>
db<span class="token punctuation">.</span><span class="token function">dropDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ol>
<h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><h3 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>表名<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Jack'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h3><ol>
<li><p>查找所有记录</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查询一个字段的所有值</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查询 age = 25 的记录</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查询 age &gt; 20 的记录</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $gt<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查询 age &lt; 20 的记录</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $lt<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查询 age &gt;= 20 的记录</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $gte<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查询 age &gt;= 20 的记录</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $lte<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查询 age &gt;= 20 并且 age &lt;= 25</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $gte<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> $lte<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查询 name 中包含 im 的记录</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">im</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查询 name 中以 J 开头的记录</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^J</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查询 name 中以 m 结尾的记录</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">m$</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查询指定列 name 数据, age &gt; 20</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $gt<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>按照年龄排序</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 升序</span>
db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 降序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>查询前 3 条数据</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查询 3 条以后的数据</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查询在 3-5 之间的数据</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member
    <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>or 查询（年龄为 19 或 25 的记录）</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    $or<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">19</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>and 查询（年龄大于 20 的性别为男的记录）</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    $and<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $gte<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> sex<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>查询第一条数据</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>查询某个结果集的记录条数</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $lte<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ol>
<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><ol>
<li><p>查找名字叫做 Jack 的，把年龄更改为 30 岁：</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Jack'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> $set<span class="token operator">:</span> <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ol>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><ol>
<li><p>删除 age = 20 岁的记录</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>删除 age &gt; 20 记录</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $gt<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> justOne<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>删除 age = 20 的一条记录</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> justOne<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>删除集合</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>删除数据库</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span><span class="token function">dropDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ol>
<h2 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h2><h3 id="获取查询时间（单位-毫秒）"><a href="#获取查询时间（单位-毫秒）" class="headerlink" title="获取查询时间（单位:毫秒）"></a>获取查询时间（单位:毫秒）</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>itemlist<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'xxx'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">explain</span><span class="token punctuation">(</span><span class="token string">'executionStats'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>executionStats<span class="token punctuation">.</span>executionTimeMillis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote>
<p>索引是对数据库表中一列或多列的值进行排序的一种结构</p>
<p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB 在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个50000条的数据</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    db<span class="token punctuation">.</span>itemlist<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        name<span class="token operator">:</span> <span class="token string">'item'</span> <span class="token operator">+</span> i
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<ol>
<li><p>创建索引</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>获取当前集合的索引</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">getIndexes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>删除索引</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">dropIndex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>创建复合索引</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>该索引被创建后，基于 <code>name</code> 和 <code>age</code> 的查询将会用到该索引，或者是基于 <code>name</code> 的查询也会用到该索引，但是只是基于 <code>age</code> 的查询将不会用到该复合索引。因此可以说，如果想用到复合索引，必须在查询条件中包含复合索引中的前 N 个索引列。</p>
<p>然而如果查询条件中的键值顺序和复合索引中的创建顺序不一致的话，MongoDB 可以智能的帮助我们调<br>整该顺序，以便使复合索引可以为查询所用。</p>
<p><code>db.member.find(&#123;age: 30, name: &quot;Jack&quot;&#125;)</code></p>
</blockquote>
</li>
<li><p>在创建索引时为其指定索引名</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'username'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>创建唯一索引</p>
<p> 不允许具有索引值相同的行，从而禁止重复的索引或键值</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">db<span class="token punctuation">.</span>member<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> unique<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代法</title>
    <url>/2019/08/26/%E8%BF%AD%E4%BB%A3%E6%B3%95/</url>
    <content><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>在<code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;]</code>中查找<code>&#39;f&#39;</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">searchWord</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dictionary<span class="token punctuation">,</span> wordToFind</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> dictionary<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dictionary<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">===</span> wordToFind<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dictionary<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">></span> wordToFind<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                right <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> dictionary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> wordToFind <span class="token operator">=</span> <span class="token string">'f'</span>
<span class="token function">searchWord</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">,</span> wordToFind<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>GoAccess使用指北</title>
    <url>/2019/08/27/GoAccess%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> goaccess<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ol>
<li><p>跳转到 <code>nginx/logs</code>目录</p>
</li>
<li><p>使用命令将<code>report.html</code>输出到 <code>nginx/html</code>目录下</p>
<ul>
<li><p>实时版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">goaccess access.log -o <span class="token punctuation">..</span>/html/report.html --log-format<span class="token operator">=</span>COMBINED --real-time-html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>静态版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">goaccess access.log -o <span class="token punctuation">..</span>/html/report.html --log-format<span class="token operator">=</span>COMBINED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>配置 <code>nginx.conf</code></p>
 <pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">http</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">server</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">listen</span> <span class="token number">1234</span><span class="token punctuation">;</span>
        <span class="token keyword">location</span> <span class="token operator">/</span>report<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>
            <span class="token keyword">alias</span> html<span class="token operator">/</span>report<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>最后打开<code>xx.xxx.xxx.xx：1234/report.html</code>就可以访问<code>GoAccess</code>了</p>
</li>
</ol>
<h2 id="使用-crontabs-定时更新"><a href="#使用-crontabs-定时更新" class="headerlink" title="使用 crontabs 定时更新"></a>使用 crontabs 定时更新</h2><ol>
<li><p>编写更新 <code>goaccess</code>的脚本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
goaccess /home/nginx/logs/access.log -o /home/nginx/html/report/index.html --log-format<span class="token operator">=</span>COMBINED
<span class="token builtin class-name">echo</span> -e <span class="token string">"update success"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>yum install crontabs</code>安装 <code>crontabs</code></p>
</li>
<li><p><code>crontab -e</code>配置定时任务</p>
<p>贴入以下配置，保存即可</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> <span class="token number">0</span> * * * /common_shell/update_goaccess.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ol>
<blockquote>
<p><a href="https://crontab.guru/">CRON可视化工具</a></p>
<p><a href="https://www.youtube.com/watch?v=QZJ1drMQz1A">Linux/Mac Tutorial: Cron Jobs - How to Schedule Commands with crontab</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 反向代理</title>
    <url>/2019/08/27/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="真实应用"><a href="#真实应用" class="headerlink" title="真实应用"></a>真实应用</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>一台阿里云 ECS，一个域名</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p><code>emotionl.fun</code> 的二级域名分别指向服务器的两个服务</p>
<div class="mermaid">
graph LR
A[一级域名 emotionl.fun]
B[二级域名 site1.emotionl.fun]
C[二级域名 site2.emotionl.fun]
D[服务器]
E[外网IP 11.123.44.555]
F[端口一 11.123.44.555:4444]
G[端口二 11.123.44.555:6666]
A --&gt; B
A --&gt; C
B --&gt; F
C --&gt; G
F --&gt; E
G --&gt; E
E --&gt; D
</div>

<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>使用<code>nginx</code>的<code>upstream</code>控制上游服务器，用<code>proxy_pass</code>进行反向代理</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol>
<li><p>使用第一台 <code>nginx</code> 开启两个静态服务</p>
 <pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">worker_processes</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">events</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">worker_connections</span> <span class="token number">1024</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">http</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">include</span> mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>
    <span class="token keyword">default_type</span> application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>
    <span class="token keyword">sendfile</span> on<span class="token punctuation">;</span>
    <span class="token keyword">keepalive_timeout</span> <span class="token number">65</span><span class="token punctuation">;</span>
    <span class="token keyword">gzip</span> on<span class="token punctuation">;</span>
    <span class="token keyword">gzip_min_length</span> <span class="token number">1024</span><span class="token punctuation">;</span>
    <span class="token keyword">gzip_comp_level</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">gzip_types</span> text<span class="token operator">/</span>plain text<span class="token operator">/</span>css application<span class="token operator">/</span>x<span class="token operator">-</span>javascript application<span class="token operator">/</span>javascript application<span class="token operator">/</span>xml<span class="token punctuation">;</span>
    <span class="token keyword">server</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">listen</span> <span class="token number">4444</span><span class="token punctuation">;</span>
        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">alias</span> test_website<span class="token operator">/</span>site1<span class="token operator">/</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>
            <span class="token keyword">root</span> html<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">server</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">listen</span> <span class="token number">6666</span><span class="token punctuation">;</span>
        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">alias</span> test_website<span class="token operator">/</span>site2<span class="token operator">/</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>
            <span class="token keyword">root</span> html<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用第二台 <code>nginx</code>开启反向代理</p>
 <pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">worker_processes</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">events</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">worker_connections</span> <span class="token number">1024</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">http</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">include</span> mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>
    <span class="token keyword">default_type</span> application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>
    <span class="token keyword">sendfile</span> on<span class="token punctuation">;</span>
    <span class="token keyword">keepalive_timeout</span> <span class="token number">65</span><span class="token punctuation">;</span>
    <span class="token keyword">upstream</span> site1 <span class="token punctuation">&#123;</span>
        <span class="token keyword">server</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">1234</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">upstream</span> site2 <span class="token punctuation">&#123;</span>
        <span class="token keyword">server</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">2342</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">server</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>
        <span class="token keyword">server_name</span> site1<span class="token punctuation">.</span>emotionl<span class="token punctuation">.</span>fun<span class="token punctuation">;</span>
        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>site1<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>
            <span class="token keyword">root</span> html<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">server</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>
        <span class="token keyword">server_name</span> site2<span class="token punctuation">.</span>emotionl<span class="token punctuation">.</span>fun<span class="token punctuation">;</span>
        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>
            <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>site2<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>
            <span class="token keyword">root</span> html<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义Linux登录页面</title>
    <url>/2019/09/04/%E8%87%AA%E5%AE%9A%E4%B9%89Linux%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<ol>
<li><p>在 <code>VSCode</code> 中下载 <code>ASCIIDecorator</code></p>
</li>
<li><p>使用 <code>ASCIIDecorator</code>创建字符画<br> <img src="/images/01.gif" alt="01"></p>
</li>
<li><p>使用 <code>vim</code>或 <code>nano</code>打开 <code>/etc/motd</code>把上一步生成的字符画拷贝进来即可</p>
</li>
<li><p>最后<br> <img src="/images/02.png" alt="02"></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串的比较</title>
    <url>/2019/10/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<p>初次碰到 <code>&#39;100&#39; &gt; &#39;99&#39;</code> 这个问题的时候还是有点懵逼的，因为这种比较也不涉及之前所想的隐式类型转换，</p>
<p>通过几次试验，发现<code>JS</code>中字符串与字符串比较是根据第一个不同的字符的ASCii值码进行比较的。</p>
<p>举个例子</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'100'</span> <span class="token operator">></span> <span class="token string">'99'</span>
<span class="token comment">// 1. '100'.charCodeAt(0) === 49</span>
<span class="token comment">// 2. '99'.charCodeAt(0) === 57</span>
<span class="token comment">// 3. 49 &lt; 57 所以结果为 false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在来一个有隐式转换的例子</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token string">'100'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">99</span>
<span class="token comment">// 1. 对象类型与其他类型比较 对象类型会转换为原始值 ['100'] ==> '100'</span>
<span class="token comment">// 2. 字符串与数字类型比较，字符串会变为数字 '100' ==> 100</span>
<span class="token comment">// 3. 100 > 99 所以结果为 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>移动Web开发</title>
    <url>/2019/12/25/%E7%A7%BB%E5%8A%A8Web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<ul>
<li>运行在手机端的 <code>Web</code>页面（<code>H5</code>页面）</li>
<li>跨平台</li>
<li>基于<code>Webview</code></li>
<li>告别<code>IE</code>拥抱<code>Webkit</code></li>
<li>更好的<strong>适配</strong>和<strong>性能</strong>要求</li>
</ul>
<h2 id="常见移动web适配方法"><a href="#常见移动web适配方法" class="headerlink" title="常见移动web适配方法"></a>常见移动web适配方法</h2><h3 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h3><ul>
<li>960px / 1000px 居中</li>
<li>盒子模型，定高，定宽</li>
<li><code>display:inline-block</code></li>
</ul>
<h3 id="移动web"><a href="#移动web" class="headerlink" title="移动web"></a>移动web</h3><ul>
<li>定高，宽度百分比</li>
<li>Flex布局</li>
<li>Media Query（媒体查询）</li>
</ul>
<h2 id="Media-Query（媒体查询）"><a href="#Media-Query（媒体查询）" class="headerlink" title="Media Query（媒体查询）"></a>Media Query（媒体查询）</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> 媒体类型 <span class="token keyword">and</span> <span class="token punctuation">(</span>媒体特性<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/*css样式*/</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>举个例子</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
        <span class="token selector">.inner</span> <span class="token punctuation">&#123;</span>
            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
            <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token selector">.box .inner:nth-child(2n)</span> <span class="token punctuation">&#123;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> palegreen<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token selector">.box .inner:nth-child(2n+1)</span> <span class="token punctuation">&#123;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> palevioletred<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 320px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
            <span class="token selector">.inner</span> <span class="token punctuation">&#123;</span>
                <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 321px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
            <span class="token selector">.inner</span> <span class="token punctuation">&#123;</span>
                <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span>
                <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="rem-布局"><a href="#rem-布局" class="headerlink" title="rem 布局"></a>rem 布局</h2><blockquote>
<p>rem：font size of the root element</p>
</blockquote>
<ul>
<li>字体单位：值根据<code>html</code>根元素大小而定，同样可以作为宽度高度等单位</li>
<li>适配原理：将<code>px</code>替换成<code>rem</code>，动态修改<code>html</code>的<code>font-size</code>适配</li>
<li>兼容性：<code>IOS 6</code>以上和<code>Android 2.1</code>以上，基本覆盖所有流行的手机系统</li>
</ul>
<h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><p>使用设备：<code>iPhone 6/7/8 </code></p>
<p>切图：<code>750px x 1334px 两倍图</code></p>
<ol>
<li><p>使用<code>JS</code>动态修改 <code>html</code>的 <code>font-size</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//得到手机屏幕的宽度</span>
    <span class="token keyword">let</span> htmlWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>
    <span class="token comment">//得到html的Dom元素</span>
    <span class="token keyword">let</span> htmlDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//设置根元素字体大小</span>
    htmlDom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> htmlWidth <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用<code>scss</code>编写<code>px</code>转换成<code>rem</code>的函数</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@function</span> <span class="token function">px2rem</span><span class="token punctuation">(</span><span class="token variable">$px</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token property"><span class="token variable">$rem</span></span><span class="token punctuation">:</span> 37.5px<span class="token punctuation">;</span>
    <span class="token keyword">@return</span> <span class="token punctuation">(</span><span class="token variable">$px</span>/<span class="token variable">$rem</span><span class="token punctuation">)</span>+rem<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>愉快的编写样式代码喽</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.box </span><span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">px2rem</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">px2rem</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">px2rem</span><span class="token punctuation">(</span>24px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
</ol>
<blockquote>
<p>参考：</p>
<p><a href="https://www.imooc.com/learn/942">移动web开发适配秘籍Rem</a></p>
<p><a href="https://juejin.im/post/5cddf289f265da038f77696c">关于移动端适配，你必须要知道的</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>移动端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端项目中的路径解析</title>
    <url>/2019/11/21/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>这里说的路径解析分两种</p>
<ol>
<li><code>Webpack</code>打包配置项中的 <code>alias</code></li>
<li><code>jsconfig.json</code>中的 <code>compilerOptions</code></li>
</ol>
<h2 id="Webpack-打包配置项中的-alias"><a href="#Webpack-打包配置项中的-alias" class="headerlink" title="Webpack 打包配置项中的 alias"></a>Webpack 打包配置项中的 alias</h2><p>相信很多人都很喜欢这个配置，因为在引用其他目录下的文件时，通过 <code>./../utils/tools.js</code>这种写法显得特别的笨重。</p>
<p>可是如果在配置了 <code>alias</code>这个属性就会好很多。</p>
<p>这块不多说，文档讲的很详细了</p>
<blockquote>
<p><a href="https://webpack.docschina.org/configuration/resolve/#resolve-alias">解析(resolve)</a></p>
</blockquote>
<h2 id="jsconfig-json中的-compilerOptions"><a href="#jsconfig-json中的-compilerOptions" class="headerlink" title="jsconfig.json中的 compilerOptions"></a>jsconfig.json中的 compilerOptions</h2><p>由于 <code>Webpack</code>的 <code>alias</code>配置你可能会在编写代码的时候遇到一些问题。</p>
<p>因为通过 <code>alias</code>的方式编写的路径，你并不能通过转到定义访问到源文件。</p>
<p>所以这个时候就需要 <code>jsconfig.json</code>来帮帮你了</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>
    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"@/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">"comps/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/comps/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">"config/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/config/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">"pages/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/pages/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">"resource/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/resource/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">"styles/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/styles/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">"utils/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/utils/*"</span><span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过这个<code>jsconfig.json</code>你就可以解决因为使用 <code>alias</code>配置而导致的无法访问源文件问题了</p>
<blockquote>
<p><a href="https://segmentfault.com/a/1190000018013282">VSCode中的 jsconfig.json</a></p>
<p><a href="https://juejin.im/post/5dedd6c8f265da33d15884bf">Create React App无eject配置</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>我的 Prettier 设置</title>
    <url>/2019/12/19/%E6%88%91%E7%9A%84Prettier%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>在项目根目录中添加<code>.prettierrc</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>
  <span class="token string">"arrowParens"</span><span class="token operator">:</span> <span class="token string">"avoid"</span><span class="token punctuation">,</span>
  <span class="token string">"bracketSpacing"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string">"htmlWhitespaceSensitivity"</span><span class="token operator">:</span> <span class="token string">"css"</span><span class="token punctuation">,</span>
  <span class="token string">"insertPragma"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token string">"jsxBracketSameLine"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string">"jsxSingleQuote"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token string">"printWidth"</span><span class="token operator">:</span> <span class="token number">140</span><span class="token punctuation">,</span> 
  <span class="token string">"proseWrap"</span><span class="token operator">:</span> <span class="token string">"preserve"</span><span class="token punctuation">,</span>
  <span class="token string">"quoteProps"</span><span class="token operator">:</span> <span class="token string">"as-needed"</span><span class="token punctuation">,</span>
  <span class="token string">"requirePragma"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token string">"semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token string">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string">"tabWidth"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token string">"trailingComma"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>
  <span class="token string">"useTabs"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token string">"vueIndentScriptAndStyle"</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果想批量格式化文件，可以在<code>package.json</code>的<code>scripts</code>中添加</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token property">"format"</span><span class="token operator">:</span> <span class="token string">"npx prettier .prettierrc --write \"src/**/*.&#123;ts,tsx&#125;\""</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>分析一下这段代码的时间复杂度</title>
    <url>/2019/12/24/%E5%88%86%E6%9E%90%E4%B8%80%E4%B8%8B%E8%BF%99%E6%AE%B5%E4%BB%A3%E7%A0%81%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>

<span class="token comment">// 向数组中添加一个元素</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 数组空间不够了</span>
    <span class="token comment">// 重新申请一个2倍大小的数组空间</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 把原来array数组中的数据依次copy到new_array</span>
        <span class="token keyword">let</span> new_array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            new_array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// new_array复制给array，array现在大小就是2倍len了</span>
        array <span class="token operator">=</span> new_array
        len <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> len
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 将element放到下标为i的位置，下标i加一</span>
    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> element
    <span class="token operator">++</span>i
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>分析：</p>
<ul>
<li>  当<code>i &lt; len</code>时，即<code>i = 0,1,2...n-1</code>的时候，不走<code>for</code>循环，所以这<code>n</code>次的时间复杂度都是<code>O(1)</code></li>
<li>  当<code>i &gt;= len</code>时，即<code>i = n</code>的时候，需要走<code>for</code>循环拷贝 <code>array</code>到<code>new_array</code>，所以这<code>1</code>次的时间复杂度是<code>O(n)</code></li>
</ul>
<p>由此可知：</p>
<ul>
<li><p>最好情况时间复杂度<code>(best case time complexity)</code>为<code>O(1)</code></p>
</li>
<li><p>最坏情况时间复杂度<code>(worst case time complexity)</code>为<code>O(n)</code></p>
</li>
<li><p>平均情况时间复杂度<code>(average case time complexity)</code></p>
<ul>
<li><p>方法一：<br>$$<br>\frac{1+1+…+1+n}{n+1}=\frac{2n}{n+1}<br>$$<br>所以时间复杂度为<code>O(n)</code></p>
<p>注：<code>1+1+...+1</code>中有<code>n</code>个<code>1</code></p>
</li>
<li><p>方法二（加权平均法，也称期望）：<br>$$<br>1<em>\frac{1}{n+1}+1</em>\frac{1}{n+1}+…+1<em>\frac{1}{n+1}+n</em>\frac{1}{n+1}=\frac{2n}{n+1}<br>$$<br>所以时间复杂度为<code>O(n)</code></p>
<p>注：<code>1*(1/n+1)+1*(1/n+1)+...+1*(1/n+1)</code>中有<code>n</code>个<code>1*(1/n+1)</code></p>
</li>
<li><p>方法三（均摊时间复杂度）：</p>
<p>前 <code>n</code> 个操作复杂度都是 <code>O(1)</code>，第 <code>n+1</code> 次操作的复杂度是 <code>O(n)</code>，所以把最后一次的复杂度分摊到前 <code>n</code> 次上，那么均摊下来每次操作的复杂度为 <code>O(1)</code></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>链表了解一下？</title>
    <url>/2019/12/25/%E9%93%BE%E8%A1%A8%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%EF%BC%9F/</url>
    <content><![CDATA[<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 声明节点</span>
<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 单链表</span>
<span class="token keyword">class</span> <span class="token class-name">SingleLinkedList</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 末尾追加节点</span>
  <span class="token function">append</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> currentNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">let</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    currentNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode
    <span class="token keyword">return</span> newNode
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 根据value查找节点</span>
  <span class="token function">findNodeByValue</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> currentNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next
    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> currentNode<span class="token punctuation">.</span>value <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> currentNode <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> currentNode
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 根据index查找节点</span>
  <span class="token function">findNodeByIndex</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> currentNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next
    <span class="token keyword">let</span> pos <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> pos <span class="token operator">!==</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next
      pos<span class="token operator">++</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> currentNode <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> currentNode
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 转化ArrayList</span>
  <span class="token function">toArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> currentNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next
    <span class="token keyword">let</span> arrayList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      arrayList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> arrayList
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 插入节点</span>
  <span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> prevNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findNodeByValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prevNode <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>
      newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> prevNode<span class="token punctuation">.</span>next
      prevNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode
      <span class="token keyword">return</span> newNode
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 根据value查找value的前一个节点y</span>
  <span class="token function">findPrevNodeByValue</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> currentNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> currentNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>value <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> currentNode<span class="token punctuation">.</span>next <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> currentNode
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 根据value删除节点</span>
  <span class="token function">removeNodeByValue</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> prevNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findPrevNodeByValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prevNode <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      prevNode<span class="token punctuation">.</span>next <span class="token operator">=</span> prevNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 反转链表</span>
  <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> currentNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next
    <span class="token keyword">let</span> prevNode <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> nextNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next
      currentNode<span class="token punctuation">.</span>next <span class="token operator">=</span> prevNode
      prevNode <span class="token operator">=</span> currentNode
      currentNode <span class="token operator">=</span> nextNode
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> prevNode
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 清空链表</span>
  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 数组转单链表</span>
  <span class="token keyword">static</span> <span class="token function">arrayToLinkedList</span><span class="token punctuation">(</span><span class="token parameter">arrayList</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> sll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> value <span class="token operator">=</span> arrayList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        sll<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> sll
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 环验证</span>
  <span class="token function">checkCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> slow <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
    <span class="token keyword">let</span> fast <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
      slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">+++++++++++++++++++++++++</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'slow'</span><span class="token punctuation">,</span> slow<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fast'</span><span class="token punctuation">,</span> fast<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">+++++++++++++++++++++++++</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> sll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  sll<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">num </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// console.log(sll.toArrayList())</span>
<span class="token comment">// console.log(sll.findNodeByIndex(2))</span>
<span class="token comment">// console.log(sll.findNodeByValue('num 3'))</span>
<span class="token comment">// console.log(sll.insertAfter('xxx', 'num 3'))</span>
<span class="token comment">// console.log(sll.removeNodeByValue('num 1'))</span>
<span class="token comment">// console.log(SingleLinkedList.arrayToLinkedList([4, 2, 3, 6, 7]))</span>

<span class="token comment">// 环验证测试</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sll<span class="token punctuation">.</span><span class="token function">checkCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> n2 <span class="token operator">=</span> sll<span class="token punctuation">.</span><span class="token function">findNodeByIndex</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> n4 <span class="token operator">=</span> sll<span class="token punctuation">.</span><span class="token function">findNodeByIndex</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
n4<span class="token punctuation">.</span>next <span class="token operator">=</span> n2
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sll<span class="token punctuation">.</span><span class="token function">checkCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>R 语言知识点杂记</title>
    <url>/2020/03/17/R%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li><strong>Vectors</strong> (one dimensional array): can hold numeric, character or logical values. The elements in a vector all have the same data type.</li>
<li><strong>Matrices</strong> (two dimensional array): can hold numeric, character or logical values. The elements in a matrix all have the same data type.</li>
<li><strong>Data frames</strong> (two-dimensional objects): can hold numeric, character or logical values. Within a column all elements have the same data type, but different columns can be of different data type.</li>
<li><strong>Lists</strong>: ‘As opposed to vectors, lists can hold components of different types, just as your to-do lists can contain different categories of tasks. This chapter will teach you how to create, name, and subset these lists.’</li>
</ul>
<h2 id="R-语言的标准差"><a href="#R-语言的标准差" class="headerlink" title="R 语言的标准差"></a>R 语言的标准差</h2><p>当我们按照课本里的公式去实现一个求标准差的函数时大概是这样的</p>
<pre class="line-numbers language-rgit" data-language="rgit"><code class="language-rgit">get_sd &lt;- function(vec) &#123;
  square_sum &lt;- 0
  vec_length &lt;- length(vec)
  vec_mean &lt;- mean(vec)
  for (item in vec) &#123;
    square_sum &lt;- square_sum + (item - vec_mean) ^ 2
  &#125;
  vec_sd &lt;- sqrt(square_sum &#x2F; vec_length)
  return(vec_sd)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是当我们使用 <code>R</code> 语言中自带的 <code>sd</code>函数计算标准差的时候答案却不太一样</p>
<p>测试数据 <code>num_vec &lt;- c(1, 2, 3, 4)</code></p>
<p>测试结果</p>
<pre class="line-numbers language-rgit" data-language="rgit"><code class="language-rgit">get_sd(num_vec)
# [1] 1.118034
sd(num_vec)
# [1] 1.290994<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>那么问题到底出现在哪一个环节呢</p>
<p>一通 <code>Google</code> 后在 <a href="https://stackoverflow.com/questions/6457755/standard-deviation-in-r-seems-to-be-returning-the-wrong-answer-am-i-doing-some">Standard Deviation in R Seems to be Returning the Wrong Answer - Am I Doing Something Wrong?</a>找到了答案</p>
<p>意思大致是说 <code>R</code>语言中内建的 <code>sd</code>函数计算的是<strong>样本标准差</strong>而我们书本里教的则是<strong>整体标准差</strong></p>
<p><strong>样本标准差</strong>的时候分母是<code>n-1</code> 而<strong>整体标准差</strong>的分母则是<code>n</code></p>
<p>分母的差别造成了两次实验结果的差异</p>
<blockquote>
<p><a href="https://www.zhihu.com/question/20099757/answer/658048814">为什么样本方差（sample variance）的分母是 n-1？ - 张英锋的回答 - 知乎</a></p>
<p><a href="https://www.shuxuele.com/data/standard-deviation.html">标准差和方差</a></p>
</blockquote>
<h2 id="R-语言的返回值"><a href="#R-语言的返回值" class="headerlink" title="R 语言的返回值"></a>R 语言的返回值</h2><ul>
<li>R 语言中 return 本身就是一个函数，所以必须使用 <code>return(...)</code> 的方式，括号不能省略；这意味着显式返回变成一种函数调用，可能降低程序运行效率。</li>
<li>不使用 return 也可以提供返回值，所以 R 语言的普遍习惯用法是<strong>避免显式调用</strong> <code>return()</code>。</li>
<li>如果显式调用 <code>return()</code> 可以使得函数的结构更加清楚，那就尽管调用吧，没有问题。</li>
</ul>
<blockquote>
<p>参考资料：<a href="https://link.zhihu.com/?target=http://stackoverflow.com/questions/11738823/explicitly-calling-return-in-a-function-or-not">StackOverflow - Explicitly calling return in a function or not</a></p>
</blockquote>
<h2 id="NA-与-NULL-的区别"><a href="#NA-与-NULL-的区别" class="headerlink" title="NA 与 NULL 的区别"></a>NA 与 NULL 的区别</h2><p>在 R 语言中，缺失值用 <strong>NA</strong>表示，空值用<strong>NULL</strong>表示。初学者在学习 R 语言时，一般都会被这两者弄糊涂，常常错误地把这两者视为等价的。</p>
<blockquote>
<p><a href="https://www.cnblogs.com/100thMountain/archive/2012/12/12/2815212.html">R 语言中”NA”与”NULL”的区别</a></p>
</blockquote>
<h2 id="library-与-require-的区别"><a href="#library-与-require-的区别" class="headerlink" title="library() 与 require() 的区别"></a>library() 与 require() 的区别</h2><p><code>library()</code>和<code>require()</code>都可以载入包，但二者存在区别。</p>
<p>在一个函数中，如果一个包不存在，执行到 library 将会停止执行，require 则会继续执行。</p>
<p>require 将会根据包的存在与否返回<code>TRUE</code>或者<code>FALSE</code></p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/5595512/what-is-the-difference-between-require-and-library">What is the difference between require() and library()?</a></p>
</blockquote>
<h2 id="apply-函数族"><a href="#apply-函数族" class="headerlink" title="apply 函数族"></a>apply 函数族</h2><p><img src="/images/03.png" alt="03"></p>
<ul>
<li><p>lapply</p>
<ul>
<li>apply function over list or vector</li>
<li>output = list</li>
</ul>
</li>
<li><p>sapply</p>
<ul>
<li>apply function over list or vector</li>
<li><strong>try to</strong> simplify list to array</li>
</ul>
</li>
<li><p>vapply</p>
<ul>
<li>apply function over list or vector</li>
<li><strong>explicitly specify</strong> output format</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://nsaunders.wordpress.com/2010/08/20/a-brief-introduction-to-apply-in-r/">A brief introduction to “apply” in R</a></p>
<p><a href="http://blog.fens.me/r-apply/">掌握 R 语言中的 apply 函数族</a></p>
</blockquote>
<h2 id="碰到的函数"><a href="#碰到的函数" class="headerlink" title="碰到的函数"></a>碰到的函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>rnorm</code></td>
<td>生成一系列的随机数</td>
</tr>
<tr>
<td><code>strsplit</code></td>
<td>分割字符串</td>
</tr>
<tr>
<td><code>sd</code></td>
<td>计算样本标准差</td>
</tr>
<tr>
<td><code>args</code></td>
<td>获得函数参数</td>
</tr>
<tr>
<td><code>sample</code></td>
<td>对数据进行抽样</td>
</tr>
<tr>
<td><code>gsub</code></td>
<td>用于对的删减、增补、替换和切割</td>
</tr>
<tr>
<td><code>identical</code></td>
<td>判断两个对象是否相等</td>
</tr>
<tr>
<td><code>cat</code></td>
<td>连接并输出</td>
</tr>
<tr>
<td><code>runif</code></td>
<td>生成均匀分布随机数</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="数字相关函数"><a href="#数字相关函数" class="headerlink" title="数字相关函数"></a>数字相关函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>abs</code></td>
<td>取绝对值</td>
</tr>
<tr>
<td><code>sum</code></td>
<td>求和</td>
</tr>
<tr>
<td><code>mean</code></td>
<td>求平均住</td>
</tr>
<tr>
<td><code>round</code></td>
<td>四舍五入</td>
</tr>
<tr>
<td><code>floor</code></td>
<td>向下取整</td>
</tr>
<tr>
<td><code>ceiling</code></td>
<td>向上取整</td>
</tr>
<tr>
<td><code>trunc</code></td>
<td>向零的方向截取</td>
</tr>
<tr>
<td><code>signif</code></td>
<td>保留有效数字</td>
</tr>
</tbody></table>
<h2 id="数据相关函数"><a href="#数据相关函数" class="headerlink" title="数据相关函数"></a>数据相关函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>seq</code></td>
<td>Generate sequences, by specifying the <code>from</code>, <code>to</code>, and <code>by</code> arguments.</td>
</tr>
<tr>
<td><code>rep</code></td>
<td>Replicate elements of vectors and lists.</td>
</tr>
<tr>
<td><code>sort</code></td>
<td>Sort a vector in ascending order. Works on numerics, but also on character strings and logicals.</td>
</tr>
<tr>
<td><code>rev</code></td>
<td>Reverse the elements in a data structures for which reversal is defined.</td>
</tr>
<tr>
<td><code>str</code></td>
<td>Display the structure of any R object.</td>
</tr>
<tr>
<td><code>append</code></td>
<td>Merge vectors or lists.</td>
</tr>
<tr>
<td><code>is.*()</code></td>
<td>Check for the class of an R object.</td>
</tr>
<tr>
<td><code>as.*()</code></td>
<td>Convert an R object from one class to another.</td>
</tr>
<tr>
<td><code>unlist</code></td>
<td>Flatten (possibly embedded) lists to produce a vector.</td>
</tr>
</tbody></table>
<h2 id="正则表达式相关函数"><a href="#正则表达式相关函数" class="headerlink" title="正则表达式相关函数"></a>正则表达式相关函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>grepl</code></td>
<td>which returns <code>TRUE</code> when a pattern is found in the corresponding character string</td>
</tr>
<tr>
<td><code>grep</code></td>
<td>which returns a vector of indices of the character strings that contains the pattern</td>
</tr>
<tr>
<td><code>sub</code></td>
<td>replace first match</td>
</tr>
<tr>
<td><code>gsub</code></td>
<td>replace all matches</td>
</tr>
</tbody></table>
<h2 id="如何安装-XLConnect"><a href="#如何安装-XLConnect" class="headerlink" title="如何安装 XLConnect"></a>如何安装 XLConnect</h2><ol>
<li><p>安装 <a href="https://mirrors.huaweicloud.com/java/jdk/">JDK</a></p>
</li>
<li><p>配置 <code>JAVA_HOME</code></p>
<pre class="line-numbers language-r" data-language="r"><code class="language-r">Sys.setenv<span class="token punctuation">(</span>JAVA_HOME<span class="token operator">=</span><span class="token string">'D:\\Program Files\\Java\\jre1.8.0_202'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>安装 <code>XLConnect</code></p>
<pre class="line-numbers language-r" data-language="r"><code class="language-r">install.packages<span class="token punctuation">(</span><span class="token string">"XLConnect"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



</li>
</ol>
]]></content>
      <tags>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>R 语言日期与时间</title>
    <url>/2020/03/18/R%E8%AF%AD%E8%A8%80%E6%97%A5%E6%9C%9F%E4%B8%8E%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h2 id="获取当前的日期和时间"><a href="#获取当前的日期和时间" class="headerlink" title="获取当前的日期和时间"></a>获取当前的日期和时间</h2><p>在编程中，为了获得当前的日期和时间，有两个常用的函数，这两个函数以 Sys 开头，返回的时间受到操作系统区域设置的影响，因此，返回的时间采用本地格式，符合本地的阅读习惯：</p>
<pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> Sys.Date<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"2020-03-18"</span>
<span class="token operator">></span> class<span class="token punctuation">(</span>Sys.Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"Date"</span>

<span class="token operator">></span> Sys.time<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"2020-03-18 09:07:53 CST"</span>
<span class="token operator">></span> class<span class="token punctuation">(</span>Sys.time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"POSIXct"</span> <span class="token string">"POSIXt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>R 还有一个函数 date()，用于返回当前时间对应的文本</p>
<pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> date<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"Wed Mar 18 09:12:28 2020"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="文本-gt-gt-日期和时间"><a href="#文本-gt-gt-日期和时间" class="headerlink" title="文本 &gt;&gt; 日期和时间"></a>文本 &gt;&gt; 日期和时间</h2><ol>
<li><p><code>as.Date()</code> 把文本转换为日期</p>
<pre class="line-numbers language-r" data-language="r"><code class="language-r">as.Date<span class="token punctuation">(</span>x<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>format</code> 参数用于指定输入的格式，常用的日期格式符号是：</p>
<ul>
<li><code>%y</code>：两位数字表示的年份（00-99），不带世纪，例如，数值是 18，格式%y，表示 2018 年 </li>
<li><code>%Y</code>：四位数字表示的年份（0000-9999）                                              </li>
<li><code>%m</code>：两位数字的月份，取值范围是 01-12，或 1-12                                    </li>
<li><code>%d</code>：月份中的天，取值范围是 01-31                                                 </li>
<li><code>%e</code>：月份中的天，取值范围是 1-31                                                  </li>
<li><code>%b</code>：月份的缩写（Jan、Feb、Mar 等）                                               </li>
<li><code>%B</code>：月份的全名（January、February 、March 等）                                   </li>
<li><code>%a</code>：星期的缩写（Mon、Tue、Wed、Thur、Fri、Sat、Sun）                             </li>
<li><code>%A</code>：星期的全名（Monday、Tuesday、Wednesday 等）  </li>
</ul>
<pre class="line-numbers language-r" data-language="r"><code class="language-r">date_vec <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span><span class="token string">"2020-01-01"</span><span class="token punctuation">,</span> <span class="token string">"2020-12-31"</span><span class="token punctuation">)</span>
date_vec_format <span class="token operator">&lt;-</span> as.Date<span class="token punctuation">(</span>date_vec<span class="token punctuation">,</span> format <span class="token operator">=</span> <span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><code>strptime()</code> 解析日期</p>
<p>函数<code>strptime()</code>，是<code>string parse time</code>的简称，返回<code>POSIXlt</code>日期。在解析日期时，必须指定文本和日期对应的位置，日期的格式使用<code>%+字母</code>来指定。</p>
<pre class="line-numbers language-r" data-language="r"><code class="language-r">format<span class="token punctuation">(</span>x<span class="token punctuation">,</span> format <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> tz <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>参数<code>tz</code>是时区<code>（time zone）</code>，默认值是空，在解析时，如果不指定时区，R 会调用 <code>Sys.timezone</code></p>
<p>日期格式和 format()函数相同，常用的时间格式符号是：</p>
<ul>
<li><code>%H</code>： 小时（24 小时制） </li>
<li><code>%I</code>： 小时（12 小时制） </li>
<li><code>%p</code>： 对于 12 小时制，指定上午（AM）或下午（PM） </li>
<li><code>%M</code>： 分钟 </li>
<li><code>%S</code>： 秒 </li>
</ul>
<pre class="line-numbers language-r" data-language="r"><code class="language-r">cur_date <span class="token operator">&lt;-</span> date<span class="token punctuation">(</span><span class="token punctuation">)</span>
cur_date_parse <span class="token operator">&lt;-</span> strptime<span class="token punctuation">(</span>current_date<span class="token punctuation">,</span> format <span class="token operator">=</span> <span class="token string">"%a %b %d %H:%M:%S %Y"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ol>
<h2 id="日期和时间-gt-gt-文本"><a href="#日期和时间-gt-gt-文本" class="headerlink" title="日期和时间 &gt;&gt; 文本"></a>日期和时间 &gt;&gt; 文本</h2><ol>
<li><p><code>format()</code> 把日期转换为文本</p>
<p>对日期进行格式化，转换为可读的文本，<code>format()</code>函数的定义是：</p>
<pre class="line-numbers language-r" data-language="r"><code class="language-r">format<span class="token punctuation">(</span>x<span class="token punctuation">,</span> format <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> tz <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>x 是日期参数，<code>format</code>是输出的格式，<code>tz</code>是时区，该函数按照指定的格式输出文本：</p>
<pre class="line-numbers language-r" data-language="r"><code class="language-r">today <span class="token operator">&lt;-</span> Sys.Date<span class="token punctuation">(</span><span class="token punctuation">)</span>
mydate <span class="token operator">&lt;-</span> format<span class="token punctuation">(</span>today<span class="token punctuation">,</span>format<span class="token operator">=</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><code>strftime()</code>格式化日期</p>
<p>函数<code>strftime()</code>，是<code>string formated time</code>的简称，用于把时间转换为字符串</p>
<pre class="line-numbers language-r" data-language="r"><code class="language-r">strptime<span class="token punctuation">(</span>x<span class="token punctuation">,</span> format<span class="token punctuation">,</span> tz <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>该函数和<code>format()</code>函数的功能和使用方式几乎完全相同。</p>
<pre class="line-numbers language-r" data-language="r"><code class="language-r">today <span class="token operator">&lt;-</span> Sys.Date<span class="token punctuation">(</span><span class="token punctuation">)</span>
mydate <span class="token operator">&lt;-</span> strftime<span class="token punctuation">(</span>today<span class="token punctuation">,</span>format<span class="token operator">=</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ol>
<h2 id="日期的比较"><a href="#日期的比较" class="headerlink" title="日期的比较"></a>日期的比较</h2><p>由于<code>POSIXct</code>类是以秒为单位来计算时间，<code>Date</code>类是以天为单位类计算日期，这意味着可以在日期值上执行比较运算和算术运算：</p>
<ul>
<li>将数字和<code>Date</code>类相加，增加或减少相应的天数</li>
<li>将数字和<code>POSIXct</code>类相加，增加或减少相应的秒数</li>
</ul>
<ol>
<li><p>时间和数字相加</p>
<p>时间以秒为单位</p>
<pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> time1 <span class="token operator">&lt;-</span> Sys.time<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">></span> print<span class="token punctuation">(</span>time1<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"2018-05-08 13:16:36 CST"</span>
<span class="token operator">></span> print<span class="token punctuation">(</span>time1<span class="token operator">+</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"2018-05-08 14:16:36 CST"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>日期以天为单位</p>
<pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token operator">></span> date1 <span class="token operator">&lt;-</span> Sys.Date<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">></span> print<span class="token punctuation">(</span>date1<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"2018-05-08"</span>
<span class="token operator">></span> print<span class="token punctuation">(</span>date1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token string">"2018-05-09"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>时间比较</p>
<p>由于<code>Date</code>类和<code>POSIXct</code>类实际上都是一个整数，可以直接比较大小</p>
<pre class="line-numbers language-r" data-language="r"><code class="language-r">date1 <span class="token operator">&lt;-</span> as.Date<span class="token punctuation">(</span><span class="token string">'2018-01-01'</span><span class="token punctuation">)</span>
date2 <span class="token operator">&lt;-</span> as.Date<span class="token punctuation">(</span><span class="token string">'2018-02-01'</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>date2 <span class="token operator">></span> date1<span class="token punctuation">)</span>
  print <span class="token punctuation">(</span><span class="token string">'gt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h3><table>
<thead>
<tr>
<th>文本 &gt;&gt; 日期和时间</th>
<th>日期和时间 &gt;&gt; 文本</th>
</tr>
</thead>
<tbody><tr>
<td><code>as.Date()</code> 返回<code>Date</code>类型</td>
<td><code>format()</code></td>
</tr>
<tr>
<td><code>strptime()</code> 返回 <code>POSIXct</code>类型</td>
<td><code>strftime()</code></td>
</tr>
</tbody></table>
<blockquote>
<p><a href="https://www.cnblogs.com/ljhdo/p/4804113.html">R 学习 第八篇：日期和时间</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>数学归纳法</title>
    <url>/2020/03/31/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95/</url>
    <content><![CDATA[<p>对于类似这种无穷数列的问题，我们通常可以采用<strong>数学归纳法（Mathematical Induction）</strong>来证明。</p>
<p>在数论中，数学归纳法用来证明任意一个给定的情形都是正确的，也就是说，第一个、第二个、第三个，一直到所有情形，概不例外。</p>
<p>数学归纳法的一般步骤是这样的：</p>
<ul>
<li>证明基本情况（通常是 <code>n = 1</code> 的时候）是否成立；</li>
<li>假设 <code>n = k − 1</code> 成立，再证明 <code>n = k</code> 也是成立的（k 为任意大于 11 的自然数）</li>
</ul>
<h2 id="迭代-VS-数学归纳法"><a href="#迭代-VS-数学归纳法" class="headerlink" title="迭代 VS 数学归纳法"></a>迭代 VS 数学归纳法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">TOTAL_GRID</span> <span class="token operator">=</span> <span class="token number">64</span>

<span class="token comment">// 迭代法</span>
<span class="token keyword">const</span> <span class="token function-variable function">iterativeFunc</span> <span class="token operator">=</span> <span class="token parameter">totalGrid</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> currentGrid <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>currentGrid <span class="token operator">&lt;</span> totalGrid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    sum <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> currentGrid<span class="token punctuation">)</span>
    currentGrid <span class="token operator">+=</span> <span class="token number">1</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> sum
<span class="token punctuation">&#125;</span>
<span class="token comment">// 数学归纳法</span>
<span class="token keyword">const</span> <span class="token function-variable function">inductionFunc</span> <span class="token operator">=</span> <span class="token parameter">totalGrid</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> totalGrid<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

<span class="token keyword">const</span> res1 <span class="token operator">=</span> <span class="token function">iterativeFunc</span><span class="token punctuation">(</span><span class="token constant">TOTAL_GRID</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token function">inductionFunc</span><span class="token punctuation">(</span><span class="token constant">TOTAL_GRID</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>Better-Scroll使用小例子</title>
    <url>/2020/04/03/Better-Scroll%E4%BD%BF%E7%94%A8%E5%B0%8F%E4%BE%8B%E5%AD%90/</url>
    <content><![CDATA[<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
    <span class="token selector">*</span> <span class="token punctuation">&#123;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token selector">.wrapper</span> <span class="token punctuation">&#123;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>
      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 10vh<span class="token punctuation">;</span>
      <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
      <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
      <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
      <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>
      <span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 04<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 05<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 06<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 07<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 08<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 09<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BOX 20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./bscroll.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> wrapper <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.wrapper'</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> scroll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BScroll</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      scrollX<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      scrollY<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      probeType<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

    scroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'on scroll'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>正则案例1</title>
    <url>/2020/05/28/%E6%AD%A3%E5%88%99%E6%A1%88%E4%BE%8B1/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>提取字符串中数据处理成数组嵌套对象的格式</p>
<p>处理前</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">1.辅导
如何发挥每位员工都有独特的潜力？辅导是催化剂，学会辅导便能催化潜力。
Need a unique potential? Mastering coaching skill can catalyze people’s potential.


2.培养员工
员工是组织的最大资产，培养员工，就可以成就团队，繁荣组织。
Develop your employees to make your team and organization successful.



3.沟通难题
冲突是了解对方、了解自己的途径。通过无伤害式回应保护自己的同时保护对手。
Conflict is to understand. Communication is to protect.


4.多元化
多元化是一段追寻价值与尊重的旅程，管理者需换位思考去建立多元化联系。
Alter your mindset and build diversified connection to show your value and respect.



5.反馈要领
最有效的反馈是提出新挑战，鼓励员工学习和成长，如导师般持续沟通与激励。
Effective feedback is the key to greater results and higher engagement.


6.全球合作 APP里面叫全球协作
你目前或许不需要全球化协作，但不能不具备全球化视野去思考与解决问题。
Global collaboration might not be on your plate now, but the vision is a must.

7.招聘
你做的任何事都取决于你招聘的员工。学习如何招聘会让你的职业生涯会更成功。
You are who you hire. Recruiting the right talent is vital to thriving in your field.


8.   领导员工
领导员工可以表达自己的价值观，构建组织，让员工充实生活，并实现组织目标。
Lead it right, you’ll create a culture in which peoples’ work make their hearts sing.

 
9.   利用您的人际网络
人际网络的价值不单是解决问题，更有你与其他人之间的无形却强大的人际关系。
Networking not only solves problems, it also opens up your vision and opportunities.

 
10. 管理您的上司
你与上司的关系对你的成败至关重要，对上司越了解，越有利于把事情做到最好。
You and your boss are on the same boat. To succeed, you as well be on the same page.

 
11. 会议管理
会议越高效，结果就越好。这是你作为领导者脱颖而出的好机会。
Short and efficient meetings help you go a longer way and achieve greater success.

 
12. 绩效评估
绩效评估让员工了解公司的期望和对他们工作表现的反馈，并鼓励员工积极改进。
Performance review should be a motivation that elicits the staffs’ improvements. 

 
13. 说服他人
你的每个梦想都与他人相关，需通过他人实现。说服他人的能力是你成功的标志。
You always need a hand. How you persuade others determines how likely you’ll succeed.

 
14. 留住关键员工
以你希望的领导者对待你的方式对待你的员工，这才能把你的最佳员工留在身边。
Treating your employees the way you want to be treated keeps the best talent around. 

 
15. 团队组建
寻找性格适合的人确实重要，但你更应寻找的是愿意和渴望学习并分享知识的人。
Look not only for good spirit, but also for those who are eager to learn and share.

 
16. 团队管理
培养信任与团队认同感，简化政策，鼓励开放交流，促进协作，公允的绩效奖励。
Foster trust and set down clear regulations to create strong bonds between members.


17. 预算编制
预算编制会给你挑战，但也给你一个实现目标的机会。通过编制预算来掌控未来。
Budgeting is how you measure the resources you have in hand to control the future.

 
18. 撰写立项报告
立项报告涉及确定战略机会，以及确定各方可享有的好处与财务收益的挂钩。
A strong business case sets a clear view of your strategic opportunities and returns. 

 
19. 编写商业计划书
商业计划书是制定满足未满足的需求的战略，并证明团队的制胜能力与策应能力。
Use your business plan to pinpoint unmet customer needs and how you’ll fulfill them.

 
20. 变革管理
周围的变化是永恒且不可避免的，但可通过变革以使自己保持竞争力并正确前进。
Change is eternal. Knowing how to manage it keeps you on the top of your game.

21. 危机管理
危机管理是一个不断学习的过程，如遇危机请冷静并开放的发掘新机遇与新能力。
In the light of crisis, never stop learning and keep a clear mind for new breaks. 

 
22. 以客户为中心
你若认真倾听客户，他们便会反过来帮助你，二者是相互依存，协作双赢。
Pondering upon the true needs of your customers builds you a win-win relationship.

 
23. 决策
决策不是容易的事情，但若你了解决策的陷阱和复杂性，就可以提高成功的机会。
See through the complexity of decision making, you will make better decisions.

 
24. 授权
授权意味着放手，信任并赋予责任，提供支持与辅导，监督进度，但让员工主导。
Granting others trust and responsibilities are the key instruments of delegating.

 
25. 财务概要
我们不想生活在靠预感做决策的世界，在财务领域的一切都是可知的，可获得的。
Nowadays, finance is how we elaborate on what we can deliver and what we want.

 
26. 设定目标
确定目标与价值观，坚定愿景并用语言表达，确定短期与长期的行动目标与路径。
Think it through then put your goals down into words and transform them into actions.

 
27. 创新和创造力
你无法控制创新的灵光何时闪现。但创意的过程可以由你管理、培养和提升。
You can’t control when the bulb lights up, but the action afterwards is up to you. 


28. 实施创新
要不断尝试并持续收集反馈，在过程中不断改进计划，尝试并探索做事的新方法。
Stay hungry, stay innovative. There's no a bed of roses in business. 

 
29. 营销精要
向营销专家那样思考，你可以更好了解利益相关者要什么，以及你怎样帮助他们。
Think like an expert, what do the stakeholders want and how you can carry them out.

 
30. 谈判
我需要理解他们，他们也需要理解我，我们需要弄清楚我们之间能达成什么交易。
Keep in mind what our ultimate goals are, and how we can reach a deal on it. 


31. 绩效衡量
绩效衡量的核心目标是制定真正有用的标准，而不是展示你已衡量过这些绩效。
Performance measurement supports accountability and helps demonstrate success.

32. 流程优化
处理公司流程改进的最重要的方法是下定改进流程的决心。决心是第一步。
Set forth your commitment to improve your process and deliver greater value. 


33. 项目管理
运营良好的项目是企业发展和创新的动力，是学习复制推广经验的机会。
All project is an innovative journey and the impact may last longer than you think.


34. 战略思维
定义你的经营方式并能让你脱颖而出的理念是什么？这才是战略思维的核心问题。
What makes you stand out? Strategic thinking is your unique take on the future.


35. 战略规划与执行
执行就是让每个人按照既定的战略采取行动。战略在持续演变，组织要及时行动。
As a manager you have to lead your unit to connect their actions to the strategy. 


36. 职业生涯管理
成功，最大障碍是害怕失败和被拒绝，需靠信仰和勇气下的激情、行动与坚持。
Pursuing your dream is challenging. Thus, you should uphold your courage and grid.


37. 职业道德
忠诚代表一种价值观，有一些方法可以帮你系统、高效且公平地应对伦理挑战。
Ethical challenges can be handled fairly and efficiently via various ways.


38. 演讲技巧
演讲技能让人在任何场合或做的每件事中，都有感染性的自信和内驱力。
Building up presentation skill also strengthens your self-confidence wherever you go.


39. 压力管理
参与你热爱的活动，并不只是让你拥有好心情，这还是让你取得高绩效的好策略。
What builds great resiliency is the ability to engage in activities that bring us joy.


40. 时间管理
时间管理就是严于律己并保持专注和分清轻重缓急，能让你充实且快乐做好事情。
Discipline, focus and prioritizing are the three pillars of wise time management. 


41. 写作技巧
了解你的受众以创造吸引力。在明确目的下思考、组织、起草、修改及润饰文稿。
Understand your audience and craft your words carefully to fully convey your thought.</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>处理后</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"辅导"</span><span class="token punctuation">,</span><span class="token string">"docZh"</span><span class="token operator">:</span><span class="token string">"如何发挥每位员工都有独特的潜力？辅导是催化剂，学会辅导便能催化潜力。"</span><span class="token punctuation">,</span><span class="token string">"docEn"</span><span class="token operator">:</span><span class="token string">"Need a unique potential? Mastering coaching skill can catalyze people’s potential."</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"培养员工"</span><span class="token punctuation">,</span><span class="token string">"docZh"</span><span class="token operator">:</span><span class="token string">"员工是组织的最大资产，培养员工，就可以成就团队，繁荣组织。"</span><span class="token punctuation">,</span><span class="token string">"docEn"</span><span class="token operator">:</span><span class="token string">"Develop your employees to make your team and organization successful."</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 确定正则</span>
<span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;1,2&#125;)\.\s*(.+)\n(.+)\n(.+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token comment">// 创建空数组</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment">// 处理</span>
str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> p4</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        id<span class="token operator">:</span> p1<span class="token punctuation">,</span>
        name<span class="token operator">:</span> p2<span class="token punctuation">,</span>
        docZh<span class="token operator">:</span> p3<span class="token punctuation">,</span>
        docEn<span class="token operator">:</span> p4
    <span class="token punctuation">&#125;</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 打印结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>正则案例2</title>
    <url>/2020/05/28/%E6%AD%A3%E5%88%99%E6%A1%88%E4%BE%8B2/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>提取网址中的指定片段</p>
<p>处理前</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> url1 <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8123/#/monitoring'</span>
<span class="token keyword">let</span> url2 <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8123/#/monitoring?id=1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>处理后</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'monitoring'</span>
<span class="token string">'monitoring'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 确定正则</span>
<span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\w+\W+(\d+\.?)&#123;4&#125;\W\d+\W+(\w+)(\?.+)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token comment">// 准备数据</span>
<span class="token keyword">let</span> url1 <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8123/#/monitoring'</span>
<span class="token keyword">let</span> url2 <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8123/#/monitoring?id=1'</span>
<span class="token comment">// 处理</span>
<span class="token keyword">let</span> result1 <span class="token operator">=</span> url1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> p2
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> result2 <span class="token operator">=</span> url2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> p2
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 打印结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





]]></content>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>正则案例3</title>
    <url>/2020/05/28/%E6%AD%A3%E5%88%99%E6%A1%88%E4%BE%8B3/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>提取字符串中的指定片段</p>
<p>处理前</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">1234@Chesh我ire我 f我（qegqg3(2604)  @Cheshire fqegqg3(2604)@(111)(111)(123)Asdasdasdasdasd@1asd(111)@1asd(111)@1asd(111)@张=阿萨德-阿1(111)(111)(123)Asdasdasdasdasd@1asd(111)@1asd(111)@张=阿萨德(0)1111@张=阿萨德-阿1(111)(111)(123)Asdasdasdasdasd@1asd(111)@1asd(111)@1asd(111)@张=阿萨德-阿1(111)(111)(123)Asdasdasdasdasd@1asd(111)@1asd(111)   @辉煌（……！&amp;（*……*（！……（&amp;）（E(111)</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>处理后</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>
  <span class="token string">'@Chesh我ire我 f我（qegqg3(2604)'</span><span class="token punctuation">,</span>
  <span class="token string">'@Cheshire fqegqg3(2604)'</span><span class="token punctuation">,</span>
  <span class="token string">'@(111)(111)(123)'</span><span class="token punctuation">,</span>
  <span class="token string">'@1asd(111)'</span><span class="token punctuation">,</span>
  <span class="token string">'@1asd(111)'</span><span class="token punctuation">,</span>
  <span class="token string">'@1asd(111)'</span><span class="token punctuation">,</span>
  <span class="token string">'@张=阿萨德-阿1(111)(111)(123)'</span><span class="token punctuation">,</span>
  <span class="token string">'@1asd(111)'</span><span class="token punctuation">,</span>
  <span class="token string">'@1asd(111)'</span><span class="token punctuation">,</span>
  <span class="token string">'@张=阿萨德(0)'</span><span class="token punctuation">,</span>
  <span class="token string">'@张=阿萨德-阿1(111)(111)(123)'</span><span class="token punctuation">,</span>
  <span class="token string">'@1asd(111)'</span><span class="token punctuation">,</span>
  <span class="token string">'@1asd(111)'</span><span class="token punctuation">,</span>
  <span class="token string">'@1asd(111)'</span><span class="token punctuation">,</span>
  <span class="token string">'@张=阿萨德-阿1(111)(111)(123)'</span><span class="token punctuation">,</span>
  <span class="token string">'@1asd(111)'</span><span class="token punctuation">,</span>
  <span class="token string">'@1asd(111)'</span><span class="token punctuation">,</span>
  <span class="token string">'@辉煌（……！&amp;（*……*（！……（&amp;）（E(111)'</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 确定处理函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">getFormatText</span> <span class="token operator">=</span> <span class="token parameter">text</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\@[^(]*(?=\()((\(\d*\)))+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span>
  <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 准备数据</span>
<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">1234@Chesh我ire我 f我（qegqg3(2604)  @Cheshire fqegqg3(2604)@(111)(111)(123)Asdasdasdasdasd@1asd(111)@1asd(111)@1asd(111)@张=阿萨德-阿1(111)(111)(123)Asdasdasdasdasd@1asd(111)@1asd(111)@张=阿萨德(0)1111@张=阿萨德-阿1(111)(111)(123)Asdasdasdasdasd@1asd(111)@1asd(111)@1asd(111)@张=阿萨德-阿1(111)(111)(123)Asdasdasdasdasd@1asd(111)@1asd(111)   @辉煌（……！&amp;（*……*（！……（&amp;）（E(111)</span><span class="token template-punctuation string">`</span></span>

<span class="token comment">// 处理</span>
<span class="token keyword">const</span> formatText <span class="token operator">=</span> <span class="token function">getFormatText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>

<span class="token comment">// 打印结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formatText<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>正则案例4</title>
    <url>/2020/05/28/%E6%AD%A3%E5%88%99%E6%A1%88%E4%BE%8B4/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>根据需求匹配数据并提取所需数据</p>
<p>处理前</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> textList <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">'@[]'</span><span class="token punctuation">,</span> <span class="token comment">// 不匹配</span>
    <span class="token string">'@[123]'</span><span class="token punctuation">,</span> <span class="token comment">// 不匹配</span>
    <span class="token string">'@asd[133]'</span><span class="token punctuation">,</span> <span class="token comment">// 匹配</span>
    <span class="token string">'@阿里巴巴(杭州)(西湖)[546789][12113][12113][12113][12113][12113][12113]'</span><span class="token punctuation">,</span> <span class="token comment">// 匹配</span>
    <span class="token string">'@阿里巴巴(杭州)(西湖)[12113]'</span><span class="token punctuation">,</span> <span class="token comment">// 匹配</span>
    <span class="token string">'@阿里巴巴[444]'</span> <span class="token comment">// 匹配</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>处理后</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'asd'</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token string">'133'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'阿里巴巴(杭州)(西湖)'</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token string">'546789'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'阿里巴巴(杭州)(西湖)'</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token string">'12113'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'阿里巴巴'</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token string">'444'</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 确定处理函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">getFormatTextList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">textList</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\@([^\[]+)(?&lt;=\@.+)\[(\d+)\]</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">return</span> textList
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>_<span class="token punctuation">,</span> name<span class="token punctuation">,</span> id<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        name<span class="token punctuation">,</span>
        id
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 准备数据</span>
<span class="token keyword">const</span> textList <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">'@[]'</span><span class="token punctuation">,</span> <span class="token comment">// 不匹配</span>
  <span class="token string">'@[123]'</span><span class="token punctuation">,</span> <span class="token comment">// 不匹配</span>
  <span class="token string">'@asd[133]'</span><span class="token punctuation">,</span> <span class="token comment">// 匹配</span>
  <span class="token string">'@阿里巴巴(杭州)(西湖)[546789][12113][12113][12113][12113][12113][12113]'</span><span class="token punctuation">,</span> <span class="token comment">// 匹配</span>
  <span class="token string">'@阿里巴巴(杭州)(西湖)[12113]'</span><span class="token punctuation">,</span> <span class="token comment">// 匹配</span>
  <span class="token string">'@阿里巴巴[444]'</span> <span class="token comment">// 匹配</span>
<span class="token punctuation">]</span>

<span class="token comment">// 处理</span>
<span class="token keyword">const</span> formatTextList <span class="token operator">=</span> <span class="token function">getFormatTextList</span><span class="token punctuation">(</span>textList<span class="token punctuation">)</span>

<span class="token comment">// 打印结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formatTextList<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>在解决问题之前先了解一下<strong>贪婪匹配模式</strong>和<strong>惰性匹配模式</strong>。</p>
<blockquote>
<p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 <code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p>
<p>贪婪匹配模式</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"/(.*at)/"</span> <span class="token operator">=></span> The fat cat sat on the mat<span class="token punctuation">.</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>贪婪匹配模式</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"/(.*?at)/"</span> <span class="token operator">=></span> The fat cat sat on the mat<span class="token punctuation">.</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>基于<strong>惰性匹配模式</strong>，我们用代码来实现一下</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 确定处理函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">getFormatTextList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">textList</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\@(.+?)\[(\d+)\]</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">return</span> textList
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>_<span class="token punctuation">,</span> name<span class="token punctuation">,</span> id<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        name<span class="token punctuation">,</span>
        id
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 准备数据</span>
<span class="token keyword">const</span> textList <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">'@[]'</span><span class="token punctuation">,</span> <span class="token comment">// 不匹配</span>
  <span class="token string">'@[123]'</span><span class="token punctuation">,</span> <span class="token comment">// 不匹配</span>
  <span class="token string">'@asd[133]'</span><span class="token punctuation">,</span> <span class="token comment">// 匹配</span>
  <span class="token string">'@阿里巴巴(杭州)(西湖)[546789][12113][12113][12113][12113][12113][12113]'</span><span class="token punctuation">,</span> <span class="token comment">// 匹配</span>
  <span class="token string">'@阿里巴巴(杭州)(西湖)[12113]'</span><span class="token punctuation">,</span> <span class="token comment">// 匹配</span>
  <span class="token string">'@阿里巴巴[444]'</span> <span class="token comment">// 匹配</span>
<span class="token punctuation">]</span>

<span class="token comment">// 处理</span>
<span class="token keyword">const</span> formatTextList <span class="token operator">=</span> <span class="token function">getFormatTextList</span><span class="token punctuation">(</span>textList<span class="token punctuation">)</span>

<span class="token comment">// 打印结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formatTextList<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





]]></content>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>给我来棵二叉树</title>
    <url>/2020/05/29/%E7%BB%99%E6%88%91%E6%9D%A5%E6%A3%B5%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 声明节点</span>
<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key
    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">BST</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 新增节点</span>
  <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_insertNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">_insertNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 中序遍历</span>
  <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_inOrderNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">_inOrderNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_inOrderNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
      <span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_inOrderNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 先序遍历</span>
  <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_preOrderNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">_preOrderNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_preOrderNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_preOrderNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 后续遍历</span>
  <span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_postOrderNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">_postOrderNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_postOrderNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_postOrderNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
      <span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 最小值</span>
  <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_minNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">_minNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> currentNode <span class="token operator">=</span> node
    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> currentNode<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>left
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> currentNode
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 最大值</span>
  <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_maxNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">_maxNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> currentNode <span class="token operator">=</span> node
    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> currentNode<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>right
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> currentNode
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 搜索节点</span>
  <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_searchNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">_searchNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_searchNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_searchNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 移除节点</span>
  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_removeNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">_removeNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 节点为空 返回null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token comment">// key 小于或大于 node.key 继续调用 _removeNode</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token keyword">return</span> node
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token keyword">return</span> node
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// key 等于 node.key</span>
      <span class="token comment">// 第一种情况 搜索到的 node 没有左子树和右子树</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">// 第二种情况 搜索到的 node 只有一个左子树或右子树</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        node <span class="token operator">=</span> node<span class="token punctuation">.</span>right
        <span class="token keyword">return</span> node
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        node <span class="token operator">=</span> node<span class="token punctuation">.</span>left
        <span class="token keyword">return</span> node
      <span class="token punctuation">&#125;</span>
      <span class="token comment">// 第三种情况 搜索到的 node 不仅有左子树还有右子树</span>
      <span class="token comment">// (1) 当找到了要移除的节点后，需要找到它右边子树中最小的节点。</span>
      <span class="token comment">// (2) 然后，用它右侧子树中最小节点的键去更新这个节点的值。通过这一步，我们改变了这个节点的键，也就是说它被移除了。</span>
      <span class="token comment">// (3) 但是，这样在树中就有两个拥有相同键的节点了，这是不行的。要继续把右侧子树中的最小节点移除，毕竟它已经被移至要移除的节点的位置了。</span>
      <span class="token comment">// (4) 最后，向它的父节点返回更新后节点的引用。</span>
      <span class="token keyword">const</span> aux <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_minNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token comment">// 找到搜索到的 node 的右子树中的最小节点</span>
      node<span class="token punctuation">.</span>key <span class="token operator">=</span> aux<span class="token punctuation">.</span>key <span class="token comment">// 把 aux 的 key 赋值给搜索到的 node</span>
      node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> aux<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token comment">// 递归调用 removeNode 用于删除 aux 这个节点</span>
      <span class="token keyword">return</span> node
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> bst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BST</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> keyList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
keyList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> bst<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bst<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'========================'</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">inOrder</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'========================'</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'========================'</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">postOrder</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'========================'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bst<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'========================'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bst<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'========================'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">key 2 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bst<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'is exist'</span> <span class="token operator">:</span> <span class="token string">'not exist'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">key 3 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bst<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'is exist'</span> <span class="token operator">:</span> <span class="token string">'not exist'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">key 10 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bst<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'is exist'</span> <span class="token operator">:</span> <span class="token string">'not exist'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">key 6 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bst<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'is exist'</span> <span class="token operator">:</span> <span class="token string">'not exist'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'========================'</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">inOrder</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象和原型</title>
    <url>/2020/05/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8E%9F%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="实现-new-操作"><a href="#实现-new-操作" class="headerlink" title="实现 new 操作"></a>实现 <code>new</code> 操作</h2><p>首先，我们先来看看<code>new</code>操作起了什么作用</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 构造函数 People (无显式返回值)</span>
<span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">&#125;</span>

<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">printInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 构造函数 Student (有显式返回值，且返回值为对象类型)</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> ps<span class="token operator">:</span> <span class="token string">'balabala'</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token comment">// Jack</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span>         <span class="token comment">// 17</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// My name is Jack and 17</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>             <span class="token comment">// &#123;ps: "balabala"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看出 <code>new</code>关键字大体上有一下几个作用</p>
<ul>
<li>构造函数无显式返回值时（例如<code>Person</code>），通过<code>new</code>操作得到的<code>p1</code> 可以访问到构造函数<code>Person</code>里的属性和<code>Person.prototype</code>里的属性</li>
<li>构造函数有显式返回值并且返回值为对象类型时（例如<code>Student</code>），通过<code>new</code>操作得到的<code>s1</code>是构造函数的显示返回值<code>&#123;ps: &quot;balabala&quot;&#125;</code></li>
</ul>
<p>基于以上的内容，我们来实现一个<code>new</code>操作</p>
<ol>
<li>首先创建一个空对象，这个对象将会作为执行 <code>new 构造函数()</code> 之后，返回的对象实例</li>
<li>将上面创建的空对象的原型（<code>__proto__</code>），指向构造函数的 prototype 属性</li>
<li>将这个空对象赋值给构造函数内部的 <code>this</code>，并执行构造函数逻辑</li>
<li>根据构造函数执行逻辑，返回第一步创建的对象或者构造函数的显式返回值</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">neo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Con<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Con</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">Con</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token function">neo</span><span class="token punctuation">(</span>People<span class="token punctuation">,</span> <span class="token string">'Jason'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">neo</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span> <span class="token string">'Doug'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<blockquote>
<p><a href="https://github.com/mqyqingfeng/Blog/issues/13">JavaScript深入之new的模拟实现</a></p>
<p><a href="https://www.jianshu.com/p/aa2f885ba871">深入浅出JS对象原型</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个集合</title>
    <url>/2020/06/04/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">CustomSet</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">getKeyForValue</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getKeyForValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> value
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">delete</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getKeyForValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getKeyForValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">const</span> keyList <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span>
    <span class="token keyword">return</span> keyList<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">===</span> key<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span>length
  <span class="token punctuation">&#125;</span>
  <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 并集</span>
  <span class="token function">union</span><span class="token punctuation">(</span><span class="token parameter">otherSet</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> unionSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token operator">=></span> unionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span>
    otherSet<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token operator">=></span> unionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> unionSet
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 交集</span>
  <span class="token function">intersection</span><span class="token punctuation">(</span><span class="token parameter">otherSet</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> intersectionSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        intersectionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> intersectionSet
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 差集</span>
  <span class="token function">difference</span><span class="token punctuation">(</span><span class="token parameter">otherSet</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> differenceSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        differenceSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> differenceSet
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 子集</span>
  <span class="token function">isSubsetOf</span><span class="token punctuation">(</span><span class="token parameter">otherSet</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> otherSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'Tim'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s3 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'======================================'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s4<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s5 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intersection</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'======================================'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s5<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'======================================'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s6 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s6<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'======================================'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s7<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">isSubsetOf</span><span class="token punctuation">(</span>s7<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>分析一道「微信」面试题</title>
    <url>/2020/06/05/%E5%88%86%E6%9E%90%E4%B8%80%E9%81%93%E3%80%8C%E5%BE%AE%E4%BF%A1%E3%80%8D%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>题目：实现一个 <code>LazyMan</code>，按照以下方式调用时，得到相关输出：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token string">'Hank'</span><span class="token punctuation">)</span>
<span class="token comment">// Hi! This is Hank!</span>
<span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token string">'Hank'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">'dinner'</span><span class="token punctuation">)</span>
<span class="token comment">// Hi! This is Hank!</span>
<span class="token comment">// 等待 10 秒..</span>
<span class="token comment">// Wake up after 10</span>
<span class="token comment">// Eat dinner~</span>
<span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token string">'Hank'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">'dinner'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">'supper'</span><span class="token punctuation">)</span>
<span class="token comment">// Hi This is Hank!</span>
<span class="token comment">// Eat dinner~</span>
<span class="token comment">// Eat supper~</span>
<span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token string">'Hank'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleepFirst</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">'supper'</span><span class="token punctuation">)</span>
<span class="token comment">// 等待 5 秒</span>
<span class="token comment">// Wake up after 5</span>
<span class="token comment">// Hi This is Hank!</span>
<span class="token comment">// Eat supper</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>代码实现：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">LazyManCreator</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>taskList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> <span class="token function-variable function">task</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hi! This is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>taskList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> task <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>taskList<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    task <span class="token operator">&amp;&amp;</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">timeout</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">task</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Wake up after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>timeout<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> timeout <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>taskList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">sleepFirst</span><span class="token punctuation">(</span><span class="token parameter">timeout</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">task</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Wake up after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>timeout<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> timeout <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>taskList<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token parameter">meal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">task</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Eat </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>meal<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>taskList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token function-variable function">LazyMan</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LazyManCreator</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'=============='</span><span class="token punctuation">)</span>
<span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token string">'Hank'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleepFirst</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">'supper'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>追加一道类似的题目：实现下面这道题中的machine函数</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">machine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span>
<span class="token function">machine</span><span class="token punctuation">(</span><span class="token string">'ygy'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token comment">// start ygy</span>
<span class="token function">machine</span><span class="token punctuation">(</span><span class="token string">'ygy'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span><span class="token string">'eat'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// start ygy</span>
<span class="token comment">// ygy eat</span>
<span class="token function">machine</span><span class="token punctuation">(</span><span class="token string">'ygy'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span><span class="token string">'eat'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// start ygy</span>
<span class="token comment">// wait 5s（这里等待了5s）</span>
<span class="token comment">// ygy eat</span>
<span class="token function">machine</span><span class="token punctuation">(</span><span class="token string">'ygy'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">waitFirst</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span><span class="token string">'eat'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// wait 5s</span>
<span class="token comment">// start ygy</span>
<span class="token comment">// ygy eat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>代码实现：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">machine</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">class</span> <span class="token class-name">Machine</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
      <span class="token keyword">this</span><span class="token punctuation">.</span>taskList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token keyword">const</span> <span class="token function-variable function">task</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">start </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>taskList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> task <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>taskList<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      task <span class="token operator">&amp;&amp;</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">do</span><span class="token punctuation">(</span>something<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token function-variable function">task</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>something<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>taskList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">timeout</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token function-variable function">task</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wait </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>timeout<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">s</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> timeout<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>taskList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">waitFirst</span><span class="token punctuation">(</span><span class="token parameter">timeout</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token function-variable function">task</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wait </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>timeout<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">s</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> timeout<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>taskList<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Machine</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>百度地图与React</title>
    <url>/2020/07/21/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E4%B8%8EReact/</url>
    <content><![CDATA[<h2 id="WEB-端文档"><a href="#WEB-端文档" class="headerlink" title="WEB 端文档"></a>WEB 端文档</h2><ul>
<li><a href="http://lbsyun.baidu.com/index.php?title=jspopularGL">JavaScript API</a></li>
<li><a href="http://lbsyun.baidu.com/index.php?title=wxjsapi">微信小程序 JavaScript API</a></li>
<li><a href="http://lbsyun.baidu.com/index.php?title=subway">地铁图 JavaScript API</a></li>
<li><a href="http://lbsyun.baidu.com/solutions/mapvdata">位置数据可视化 MapV GL</a></li>
</ul>
<h2 id="与-React-结合"><a href="#与-React-结合" class="headerlink" title="与 React 结合"></a>与 React 结合</h2><p>以 <code>JavaScript API GL v1.0</code> 版本的 <code>SDK</code>为例</p>
<ol>
<li><p>首先在<code>public\index.html</code>添加引入 <code>BMapGL</code></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ltr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/favicon.ico<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theme-color<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/manifest.json<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token comment">&lt;!-- 引入 BMapGL --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://api.map.baidu.com/api?type=webgl&amp;v=1.0&amp;ak=4gaWxQf2AUtC51IhrHLVVUW5f10K1GTN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>修改<code>config-overrides.js</code>添加<code>externals</code>配置</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
  override<span class="token punctuation">,</span>
  addWebpackPlugin<span class="token punctuation">,</span>
  addPostcssPlugins<span class="token punctuation">,</span>
  addWebpackExternals
<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'customize-cra'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> WebpackBuildNotifierPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-build-notifier'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> WebpackBar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpackbar'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  webpack<span class="token operator">:</span> <span class="token function">override</span><span class="token punctuation">(</span>
    <span class="token function">addWebpackPlugin</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">WebpackBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">WebpackBuildNotifierPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        title<span class="token operator">:</span> <span class="token string">'MISSION SUCCESS!'</span><span class="token punctuation">,</span>
        logo<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/logo.svg'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        suppressSuccess<span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">addPostcssPlugins</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'postcss-rtl'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 添加 externals 配置</span>
    <span class="token function">addWebpackExternals</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      BMapGL<span class="token operator">:</span> <span class="token string">'BMapGL'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>最后导入并使用<code>BMapGL</code></p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useRef<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> BMapGL <span class="token keyword">from</span> <span class="token string">'BMapGL'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Card <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'reactstrap'</span>

<span class="token keyword">const</span> <span class="token function-variable function">BMapDemo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> bMapContainerRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建 BMapGL 实例</span>
    <span class="token keyword">const</span> bMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMapGL<span class="token punctuation">.</span>Map</span><span class="token punctuation">(</span>bMapContainerRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span>
    <span class="token comment">// 初始化中心点坐标</span>
    <span class="token keyword">const</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMapGL<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">116.404</span><span class="token punctuation">,</span> <span class="token number">39.915</span><span class="token punctuation">)</span>
    <span class="token comment">// 初始化地图，设置中心点坐标和地图级别</span>
    bMap<span class="token punctuation">.</span><span class="token function">centerAndZoom</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
    bMap<span class="token punctuation">.</span><span class="token function">enableScrollWheelZoom</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span></span>
      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>
        width<span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>
        height<span class="token operator">:</span> <span class="token string">'300px'</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
        <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>bMapContainerRef<span class="token punctuation">&#125;</span></span>
        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>
          width<span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>
          height<span class="token operator">:</span> <span class="token string">'100%'</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>
      <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Card</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Nestjs 开发流</title>
    <url>/2020/08/13/Nestjs%20%E5%BC%80%E5%8F%91%E6%B5%81/</url>
    <content><![CDATA[<div class="mermaid">
graph LR
A[Entity]
B[Repository]
C[Service]
D[Controller]
A --&gt; B
B --&gt; C
C --&gt; D
</div>

<h2 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h2><p>定义数据</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> BaseEntity<span class="token punctuation">,</span> Entity<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> Column <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'typeorm'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TaskStatus <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./task-status.enum'</span>

@<span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">&#123;</span>
  @<span class="token function">PrimaryGeneratedColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 定义主键</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span>

  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span>

  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span>

  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  status<span class="token operator">:</span> TaskStatus
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h2><p>操作数据</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Task <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./task.entity'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> EntityRepository<span class="token punctuation">,</span> Repository <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'typeorm'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CreateTaskDto <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./dto/create-task.dto'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TaskStatus <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./task-status.enum'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> GetTasksFilterDto <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./dto/get-tasks-filter-dto'</span>

@<span class="token function">EntityRepository</span><span class="token punctuation">(</span>Task<span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TaskRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository<span class="token operator">&lt;</span>Task<span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 继承 Repository 享用 findOne delete 等操作</span>
  <span class="token keyword">async</span> <span class="token function">getTasks</span><span class="token punctuation">(</span>filterDto<span class="token operator">:</span> GetTasksFilterDto<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Task<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> status<span class="token punctuation">,</span> search <span class="token punctuation">&#125;</span> <span class="token operator">=</span> filterDto
    <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createQueryBuilder</span><span class="token punctuation">(</span><span class="token string">'task'</span><span class="token punctuation">)</span> <span class="token comment">// 使用 QueryBuilder 生成 SQL</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      query<span class="token punctuation">.</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token string">'task.status = :status'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> status <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 添加条件</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>search<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      query<span class="token punctuation">.</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token string">'task.title LIKE :search OR task.description LIKE :search'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> search<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">%</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>search<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">%</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">await</span> query<span class="token punctuation">.</span><span class="token function">getMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 执行 SQL 获取数据</span>
    <span class="token keyword">return</span> tasks
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">async</span> <span class="token function">createTask</span><span class="token punctuation">(</span>createTaskDto<span class="token operator">:</span> CreateTaskDto<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Task<span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> title<span class="token punctuation">,</span> description <span class="token punctuation">&#125;</span> <span class="token operator">=</span> createTaskDto
    <span class="token keyword">const</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    task<span class="token punctuation">.</span>title <span class="token operator">=</span> title
    task<span class="token punctuation">.</span>description <span class="token operator">=</span> description
    task<span class="token punctuation">.</span>status <span class="token operator">=</span> TaskStatus<span class="token punctuation">.</span><span class="token constant">OPEN</span>
    <span class="token keyword">await</span> task<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> task
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>提供服务</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Injectable<span class="token punctuation">,</span> NotFoundException <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CreateTaskDto <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./dto/create-task.dto'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> GetTasksFilterDto <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./dto/get-tasks-filter-dto'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> UpdateTaskStatusDto <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./dto/update-task-status.dto'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TaskRepository <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./task.repository'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> InjectRepository <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/typeorm'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Task <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./task.entity'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TaskStatus <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./task-status.enum'</span>

@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TasksService</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">constructor</span><span class="token punctuation">(</span>
    @<span class="token function">InjectRepository</span><span class="token punctuation">(</span>TaskRepository<span class="token punctuation">)</span>
    <span class="token keyword">private</span> taskRepository<span class="token operator">:</span> TaskRepository
  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

  <span class="token keyword">async</span> <span class="token function">getTasks</span><span class="token punctuation">(</span>filterDto<span class="token operator">:</span> GetTasksFilterDto<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Task<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>taskRepository<span class="token punctuation">.</span><span class="token function">getTasks</span><span class="token punctuation">(</span>filterDto<span class="token punctuation">)</span> <span class="token comment">// 调用 TaskRepository 中封装好的数据操作</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">async</span> <span class="token function">getTaskById</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Task<span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 当数据操作比较简单时 可以直接调用 Repository 的方法</span>
    <span class="token keyword">const</span> foundTask <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>taskRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>foundTask<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Task with ID </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> not found</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> foundTask
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">async</span> <span class="token function">createTask</span><span class="token punctuation">(</span>createTaskDto<span class="token operator">:</span> CreateTaskDto<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Task<span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>taskRepository<span class="token punctuation">.</span><span class="token function">createTask</span><span class="token punctuation">(</span>createTaskDto<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">async</span> <span class="token function">deleteTask</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>taskRepository<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>affected <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Task with ID </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> not found</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">async</span> <span class="token function">updateTaskStatus</span><span class="token punctuation">(</span>updateTaskStatusDto<span class="token operator">:</span> UpdateTaskStatusDto<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Task<span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> status <span class="token punctuation">&#125;</span> <span class="token operator">=</span> updateTaskStatusDto
    <span class="token keyword">const</span> foundTask <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTaskById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    foundTask<span class="token punctuation">.</span>status <span class="token operator">=</span> TaskStatus<span class="token punctuation">[</span>status<span class="token punctuation">]</span>
    <span class="token keyword">await</span> foundTask<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> foundTask
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>处理请求</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Controller<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> Post<span class="token punctuation">,</span> Body<span class="token punctuation">,</span> Param<span class="token punctuation">,</span> Query<span class="token punctuation">,</span> UsePipes<span class="token punctuation">,</span> ValidationPipe<span class="token punctuation">,</span> ParseIntPipe <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TasksService <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./tasks.service'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CreateTaskDto <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./dto/create-task.dto'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> GetTasksFilterDto <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./dto/get-tasks-filter-dto'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> UpdateTaskStatusDto <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./dto/update-task-status.dto'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Task <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./task.entity'</span>

@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">'tasks'</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TasksController</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> taskService<span class="token operator">:</span> TasksService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  @<span class="token function">UsePipes</span><span class="token punctuation">(</span>ValidationPipe<span class="token punctuation">)</span> <span class="token comment">// 使用 ValidationPipe 和 DTO 进行字段的校验</span>
  <span class="token function">getTasks</span><span class="token punctuation">(</span>@<span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> filterDto<span class="token operator">:</span> GetTasksFilterDto<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>taskService<span class="token punctuation">.</span><span class="token function">getTasks</span><span class="token punctuation">(</span>filterDto<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">'/:id'</span><span class="token punctuation">)</span>
  <span class="token function">getTaskById</span><span class="token punctuation">(</span>@<span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> ParseIntPipe<span class="token punctuation">)</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Task<span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ParseIntPipe string=>number (如果转换失败将抛出异常)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>taskService<span class="token punctuation">.</span><span class="token function">getTaskById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  @<span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">'/create'</span><span class="token punctuation">)</span>
  @<span class="token function">UsePipes</span><span class="token punctuation">(</span>ValidationPipe<span class="token punctuation">)</span>
  <span class="token function">createTask</span><span class="token punctuation">(</span>@<span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> createTaskDto<span class="token operator">:</span> CreateTaskDto<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Task<span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>taskService<span class="token punctuation">.</span><span class="token function">createTask</span><span class="token punctuation">(</span>createTaskDto<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  @<span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">'/delete'</span><span class="token punctuation">)</span>
  <span class="token function">deleteTask</span><span class="token punctuation">(</span>@<span class="token function">Body</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> ParseIntPipe<span class="token punctuation">)</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>taskService<span class="token punctuation">.</span><span class="token function">deleteTask</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  @<span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">'/status/update'</span><span class="token punctuation">)</span>
  @<span class="token function">UsePipes</span><span class="token punctuation">(</span>ValidationPipe<span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">updateTaskStatus</span><span class="token punctuation">(</span>@<span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> updateTaskStatusDto<span class="token operator">:</span> UpdateTaskStatusDto<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Task<span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>taskService<span class="token punctuation">.</span><span class="token function">updateTaskStatus</span><span class="token punctuation">(</span>updateTaskStatusDto<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>复习一下Generator的使用</title>
    <url>/2020/08/25/%E5%A4%8D%E4%B9%A0%E4%B8%80%E4%B8%8BGenerator%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>先来个例题 看一下结果</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">addGen</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>
  <span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token keyword">yield</span> y <span class="token operator">/</span> <span class="token number">4</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token function">addGen</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1> &#123;value: 6, done: false&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2> &#123;value: NaN, done: false&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3> &#123;value: NaN, done: true&#125;</span>
<span class="token comment">/* 
  1> g.next() 返回的 value 是 x + 5 => 6
  2> g.next() 返回的 value 是 y / 3，由于本次 g.next() 并未传值，所以 y = undefined * 2 => NaN，所以本次的 value 是 NaN / 3 => NaN
  3> g.next() 返回的 value 是 x + y + z => 1 + NaN + NaN => NaN
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如何让以上代码执行的更符合一般的逻辑<code>y = (1 + 5) * 2 ; z = y / 4</code>，最后返回 16</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">addGen</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>
  <span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token keyword">yield</span> y <span class="token operator">/</span> <span class="token number">4</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token function">addGen</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> v1 <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value
<span class="token keyword">let</span> v2 <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">.</span>value
<span class="token keyword">let</span> v3 <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">.</span>value
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再来个实例，以 “敲七” 这个游戏为例，从零开始获取每一个符合 “敲七” 的数字</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">count7Gen</span><span class="token punctuation">(</span><span class="token parameter">count <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> count <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">===</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">yield</span> count
    <span class="token punctuation">&#125;</span>
    count<span class="token operator">++</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> c7g <span class="token operator">=</span> <span class="token function">count7Gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c7g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#123;value: 7, done: false&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c7g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#123;value: 14, done: false&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c7g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#123;value: 17, done: false&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c7g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#123;value: 21, done: false&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c7g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#123;value: 27, done: false&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><code>count7Gen</code>这个函数本身是一个死循环，但是 <code>Generator</code>这种模式使其能在特定的节点停止或继续</p>
</blockquote>
<p>模拟一个简单的 <code>Generator</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">makeGenerator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> value <span class="token operator">=</span> list<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span>
      <span class="token keyword">const</span> done <span class="token operator">=</span> index <span class="token operator">>=</span> list<span class="token punctuation">.</span>length
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> done <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> g <span class="token operator">=</span> <span class="token function">makeGenerator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>试试 Proxy 和 Reflect</title>
    <url>/2020/08/26/%E8%AF%95%E8%AF%95%20Proxy%20%E5%92%8C%20Reflect/</url>
    <content><![CDATA[<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>使用 <code>Object.defineProperty()</code>模拟<code>Vue</code>的数据绑定</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">VData</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">bindData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">bindData</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> newData <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        newData<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
          <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> newData<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            newData<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    b<span class="token operator">:</span> <span class="token number">2</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用<code>Proxy</code>封装一个可设置类型的数组<code>TypeArray</code>，并且对数组中不存在的值返回默认值</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> TypeArray <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">'N/A'</span><span class="token punctuation">,</span> initArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>initArray<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">||</span> defaultValue
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> type <span class="token operator">||</span> prop <span class="token operator">===</span> <span class="token string">'length'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> numArr <span class="token operator">=</span> <span class="token function">TypeArray</span><span class="token punctuation">(</span><span class="token string">'number'</span><span class="token punctuation">)</span>
numArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">// Proxy 代理数组 数组本身的方法属性不会被破坏</span>
numArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span> <span class="token comment">// Uncaught TypeError: 'set' on proxy: trap returned falsish for property '2' at Proxy.push (&lt;anonymous>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用 <code>has</code>方法捕获<code>in</code>操作符</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> checkRange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>
  <span class="token punctuation">&#123;</span>
    start<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    end<span class="token operator">:</span> <span class="token number">100</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> prop <span class="token operator">>=</span> target<span class="token punctuation">.</span>start <span class="token operator">&amp;&amp;</span> prop <span class="token operator">&lt;=</span> target<span class="token punctuation">.</span>end
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">50</span> <span class="token keyword">in</span> checkRange<span class="token punctuation">)</span>	<span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">150</span> <span class="token keyword">in</span> checkRange<span class="token punctuation">)</span>	<span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用<code>ownKeys</code>拦截 <code>Reflect.ownKeys()</code>也可以拦截 <code>Object.keys() ; for in Loop ; Object.getOwnPropertySymbols()</code> 中的部分的 key </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  attr<span class="token operator">:</span> <span class="token string">'attr'</span><span class="token punctuation">,</span>
  _attr<span class="token operator">:</span> <span class="token string">'_attr'</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'attr'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'Symbol(attr)'</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'_attr'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'Symbol(_attr)'</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 未使用 Proxy 的 ownKeys 拦截</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ["attr", "_attr"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [Symbol(attr), Symbol(_attr)]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ["attr", "_attr", Symbol(attr), Symbol(_attr)]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// attr _attr</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 使用 Proxy 的 ownKeys 拦截</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token function">ownKeys</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> normalKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
    <span class="token keyword">const</span> normalFilterKeys <span class="token operator">=</span> normalKeys<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 拦截以下划线开头的 key</span>
    <span class="token keyword">const</span> symbolKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
    <span class="token keyword">const</span> symbolFilterKeys <span class="token operator">=</span> symbolKeys<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'Symbol(_'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 拦截以下划线开头的 key</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>normalFilterKeys<span class="token punctuation">,</span> <span class="token operator">...</span>symbolFilterKeys<span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ["attr"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [Symbol(attr)]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ["attr", Symbol(attr)]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// attr</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>来个综合案例</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>
  _address<span class="token operator">:</span> <span class="token string">'London UK'</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prop<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 不可访问</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">'N/A'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">不能设置 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prop<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> value
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">不能删除</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prop<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">delete</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">ownKeys</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用 <code>apply</code>拦截函数的调用（包装函数）</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> sumText <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> thisArg<span class="token punctuation">,</span> argArray</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">total number is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token operator">...</span>argArray<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token function">sumText</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nvm管理Node.js版本</title>
    <url>/2021/01/07/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86Node-js%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在实验 <code>Vue3</code> 的时候，提示 <code>Error: Cannot find module &#39;vue-loader-v16/package.json&#39;</code>，排查后发现是<code>Node.js npm</code>的问题于是安装了最新的 <code>14.15.4 LTS</code>，但是在解决完 <code>Vue3</code>的问题后，使用 <code>npm</code>打包老项目又挂了，所以决定使用 <code>nvm</code>去管理 <code>Node.js</code>的版本</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>因为是使用 <code>windows</code>开发，所以使用 <a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows</a>，版本选择最新的就可以。</p>
<p>安装完毕之后，需要去 <code>C:\Users\&#123;用户名&#125;\AppData\Roaming\nvm</code>目录下，给 <code>settings.txt</code>添加 <code>node_mirror</code>和 <code>npm_mirror</code>配置</p>
<pre class="line-numbers language-none"><code class="language-none">root: C:\Users\emotionl\AppData\Roaming\nvm
path: D:\Program Files\nodejs
node_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;
npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安装想要使用的 Node.js 版本</p>
<pre class="line-numbers language-none"><code class="language-none">nvm install &lt;version&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看已安装的 Node.js 版本</p>
<pre class="line-numbers language-none"><code class="language-none">nvm list [available]  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>使用已经安装的 Node.js 版本</p>
<pre class="line-numbers language-none"><code class="language-none">nvm use [version]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>一网打尽this</title>
    <url>/2021/01/24/%E4%B8%80%E7%BD%91%E6%89%93%E5%B0%BDthis/</url>
    <content><![CDATA[<h2 id="例题组合-1：全局环境下的-this"><a href="#例题组合-1：全局环境下的-this" class="headerlink" title="例题组合 1：全局环境下的 this"></a>例题组合 1：全局环境下的 this</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token string">'use strict'</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  bar<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> fn1 <span class="token operator">=</span> foo<span class="token punctuation">.</span>fn <span class="token comment">// 相当于 window.fn1 = foo.fn</span>
<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  bar<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
foo<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// foo 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>结论：在执行函数时，如果函数中的 this 是被上一级的对象所调用，那么 this 指向的就是上一级的对象；否则指向全局环境。</p>
</blockquote>
<h2 id="例题组合-2：上下文对象调用中的-this"><a href="#例题组合-2：上下文对象调用中的-this" class="headerlink" title="例题组合 2：上下文对象调用中的 this"></a>例题组合 2：上下文对象调用中的 this</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'Lucas'</span><span class="token punctuation">,</span>
  brother<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">'Mike'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>brother<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 'Mike'</span>
<span class="token comment">// 在这种嵌套的关系中，this 指向最后调用它的对象，因此输出将会是：Mike。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  text<span class="token operator">:</span> <span class="token string">'o1'</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>text
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> o2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  text<span class="token operator">:</span> <span class="token string">'o2'</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> o3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  text<span class="token operator">:</span> <span class="token string">'o3'</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> fn <span class="token operator">=</span> o1<span class="token punctuation">.</span>fn
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> o4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  text<span class="token operator">:</span> <span class="token string">'o4'</span><span class="token punctuation">,</span>
  fn<span class="token operator">:</span> o1<span class="token punctuation">.</span>fn
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// o1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// o1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o3<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o4<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 04</span>
<span class="token comment">/* 
  第一个 console 最简单，o1 没有问题。难点在第二个和第三个上面，关键还是看调用 this 的那个函数。 
  第二个 console 的 o2.fn()，最终还是调用 o1.fn()，因此答案仍然是 o1。 
  第三个，在进行 var fn = o1.fn 赋值之后，是「裸奔」调用，因此这里的 this 指向 window，答案当然是 undefined。
  第四个，this 指向最后调用它的对象，在 fn 执行时，挂到 o4 对象上即可，我们提前进行了赋值操作
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="例题组合-3：bind-call-apply-改变-this-指向"><a href="#例题组合-3：bind-call-apply-改变-this-指向" class="headerlink" title="例题组合 3：bind/call/apply 改变 this 指向"></a>例题组合 3：bind/call/apply 改变 this 指向</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 三者使用区别</span>
<span class="token keyword">const</span> <span class="token function-variable function">printName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>firstName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>lastName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token comment">// bind</span>
<span class="token function">printName</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'Number'</span><span class="token punctuation">,</span> <span class="token string">'One'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 常见于 React 绑定事件</span>
<span class="token comment">// call</span>
<span class="token function">printName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'Number'</span><span class="token punctuation">,</span> <span class="token string">'Two'</span><span class="token punctuation">)</span>
<span class="token comment">// apply</span>
<span class="token function">printName</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Number'</span><span class="token punctuation">,</span> <span class="token string">'Three'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'lucas'</span><span class="token punctuation">,</span>
  <span class="token function-variable function">logName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'mike'</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">logName</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// mike</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">logName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// mike</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">logName</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// mike</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="例题组合-4：构造函数和-this"><a href="#例题组合-4：构造函数和-this" class="headerlink" title="例题组合 4：构造函数和 this"></a>例题组合 4：构造函数和 this</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token string">'Lucas'</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>bar<span class="token punctuation">)</span>
<span class="token comment">/* 
  new 操作符调用构造函数，具体做了什么？以下供参考： 
  1.创建一个新的对象； 
  2.将构造函数的 this 指向这个新对象； 
  3.为这个对象添加属性、方法等； 
  4.最终返回新对象。

  以上过程，也可以用代码表述：
  var obj  = &#123;&#125;
  obj.__proto__ = Foo.prototype
  Foo.call(obj)
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token string">'Lucas'</span>
  <span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> o
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token string">'Lucas'</span>
  <span class="token keyword">return</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#123;&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Bar &#123;user: "Lucas"&#125;</span>
<span class="token comment">/* 
  结论：如果构造函数中显式返回一个值，且返回的是一个对象，那么 this 就指向这个返回的对象；
  如果返回的不是一个对象，那么 this 仍然指向实例。
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="例题组合-5：箭头函数中的-this-指向"><a href="#例题组合-5：箭头函数中的-this-指向" class="headerlink" title="例题组合 5：箭头函数中的 this 指向"></a>例题组合 5：箭头函数中的 this 指向</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#123;fn: ƒ&#125;</span>
<span class="token comment">/* 
  this 出现在 setTimeout() 中的匿名函数里，因此 this 指向 window 对象。
  如果需要 this 指向 foo这个 object 对象，可以巧用箭头函数解决： 
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="最后一道"><a href="#最后一道" class="headerlink" title="最后一道"></a>最后一道</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">f1</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">f2</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">f3</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">f4</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

bar<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// bar | f1 被 bar 调用，所以打印的 this 是 bar</span>
bar<span class="token punctuation">.</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window | f2 的 this 是 f2 外层的 bar 的 this，所以打印的 this 是 window</span>
bar<span class="token punctuation">.</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// bar | f3 中 fun 的 this 是 fun 外层的 f3 的 this， f3 被 bar 调用，f3 的 this 是 bar，所以打印的 this 是 window</span>
bar<span class="token punctuation">.</span><span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// f4 中的 fun 的执行属于普通函数调用，只是自执行，此时 fun 是一个全局函数，因此打印的 this 是 window</span>

<span class="token keyword">const</span> f1 <span class="token operator">=</span> bar<span class="token punctuation">.</span>f1
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
<span class="token keyword">const</span> f2 <span class="token operator">=</span> bar<span class="token punctuation">.</span>f2
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
<span class="token keyword">const</span> f3 <span class="token operator">=</span> bar<span class="token punctuation">.</span>f3
<span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
<span class="token keyword">const</span> f4 <span class="token operator">=</span> bar<span class="token punctuation">.</span>f4
<span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>申请LetsEncrypt通配符SSL证书</title>
    <url>/2021/01/26/%E7%94%B3%E8%AF%B7LetsEncrypt%E9%80%9A%E9%85%8D%E7%AC%A6SSL%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h2 id="获取-Certbot-客户端"><a href="#获取-Certbot-客户端" class="headerlink" title="获取 Certbot 客户端"></a>获取 Certbot 客户端</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 下载 Certbot 客户端</span>
<span class="token function">wget</span> https://dl.eff.org/certbot-auto

<span class="token comment"># 设为可执行权限</span>
<span class="token function">chmod</span> a+x certbot-auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="申请通配符证书"><a href="#申请通配符证书" class="headerlink" title="申请通配符证书"></a>申请通配符证书</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./certbot-auto certonly  -d <span class="token string">"*.emotionl.fun"</span> --manual --preferred-challenges dns-01  --server https://acme-v02.api.letsencrypt.org/directory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>完这一步之后，请根据命令行的提示输入相应内容</p>
]]></content>
      <tags>
        <tag>Nginx</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>100个单词-01</title>
    <url>/2021/02/09/100%E4%B8%AA%E5%8D%95%E8%AF%8D-01/</url>
    <content><![CDATA[<h2 id="01-10"><a href="#01-10" class="headerlink" title="01-10"></a>01-10</h2><table>
<thead>
<tr>
<th>词</th>
<th>译</th>
</tr>
</thead>
<tbody><tr>
<td>distributed</td>
<td>adj. 分布式的，分散式的</td>
</tr>
<tr>
<td>decentralized</td>
<td>adj. 分散管理的 vt. 使分散；使分权（decentralize 的过去分词）</td>
</tr>
<tr>
<td>deliver</td>
<td>vt. 交付；发表；递送；释放；给予（打击）</td>
</tr>
<tr>
<td>intermediate</td>
<td>adj. 中间的，过渡的；中级的，中等的</td>
</tr>
<tr>
<td>internet traffic</td>
<td>网络流量</td>
</tr>
<tr>
<td>direct</td>
<td>vt. 管理；指挥；导演；指向</td>
</tr>
<tr>
<td>transmits</td>
<td>vt. 传输；传播；发射；传达；遗传</td>
</tr>
<tr>
<td>delivery</td>
<td>n. [贸易] 交付；分娩；递送</td>
</tr>
<tr>
<td>stumbled onto</td>
<td>偶然找到；碰上</td>
</tr>
<tr>
<td>diametrically</td>
<td>adv. 完全地；作为直径地；直接地；正好相反地</td>
</tr>
</tbody></table>
<h2 id="11-20"><a href="#11-20" class="headerlink" title="11-20"></a>11-20</h2><table>
<thead>
<tr>
<th>词</th>
<th>译</th>
</tr>
</thead>
<tbody><tr>
<td>encapsulating</td>
<td>n. 封装；[电] 包封 v. 封进内部（encapsulate 的 ing 形式）</td>
</tr>
<tr>
<td>a slew of</td>
<td>大量的</td>
</tr>
<tr>
<td>get away from</td>
<td>避免，摆脱；逃离</td>
</tr>
<tr>
<td>mechanism</td>
<td>n. 机制；原理，途径；进程；机械装置；技巧</td>
</tr>
<tr>
<td>it dawned on me that</td>
<td>突然醒悟；忽然觉悟；忽然醒悟</td>
</tr>
<tr>
<td>composable</td>
<td>adj. 组成的</td>
</tr>
<tr>
<td>frustrating</td>
<td>adj. 令人沮丧的 v. 使沮丧（frustrate 的 ing 形式）</td>
</tr>
<tr>
<td>propel</td>
<td>vt. 推进；驱使；激励；驱策</td>
</tr>
<tr>
<td>the sheer number of</td>
<td>……的数目</td>
</tr>
<tr>
<td>dig into</td>
<td>深入钻研；钻研；挖掘</td>
</tr>
</tbody></table>
<h2 id="21-30"><a href="#21-30" class="headerlink" title="21-30"></a>21-30</h2><table>
<thead>
<tr>
<th>词</th>
<th>译</th>
</tr>
</thead>
<tbody><tr>
<td>proposal</td>
<td>n. 提议，建议；求婚</td>
</tr>
<tr>
<td>manuscript</td>
<td>n. [图情] 手稿；原稿 adj. 手写的</td>
</tr>
<tr>
<td>perspective</td>
<td>n. 观点；远景；透视图 adj. 透视的</td>
</tr>
<tr>
<td>First and foremost</td>
<td>首先；首要的是</td>
</tr>
<tr>
<td>fatigue</td>
<td>n. 疲劳，疲乏；杂役 vt. 使疲劳；使心智衰弱 vi. 疲劳 adj. 疲劳的</td>
</tr>
<tr>
<td>synthesize</td>
<td>vt. 合成；综合</td>
</tr>
<tr>
<td>spotlight on</td>
<td>关注</td>
</tr>
<tr>
<td>capabilities</td>
<td>n. 能力（capability的复数）；功能；性能</td>
</tr>
<tr>
<td>permeates</td>
<td>v. 弥漫（permeate的第三人称单数）</td>
</tr>
<tr>
<td>metaprogramming</td>
<td>元编程</td>
</tr>
</tbody></table>
<h2 id="31-40"><a href="#31-40" class="headerlink" title="31-40"></a>31-40</h2><table>
<thead>
<tr>
<th>词</th>
<th>译</th>
</tr>
</thead>
<tbody><tr>
<td>breadth</td>
<td>n. 宽度，幅度；宽宏</td>
</tr>
<tr>
<td>passionate</td>
<td>adj. 热情的；热烈的，激昂的；易怒的</td>
</tr>
<tr>
<td>catch up</td>
<td>赶上；把…缠住</td>
</tr>
<tr>
<td>in order</td>
<td>整齐，秩序井然；按顺序；状况良好</td>
</tr>
<tr>
<td>sheds light on</td>
<td>阐明；使…清楚地显出</td>
</tr>
<tr>
<td>syntactical</td>
<td>adj. 句法的；依照句法的（等于syntactic）</td>
</tr>
<tr>
<td>inheritance</td>
<td>n. 继承；遗传；遗产</td>
</tr>
<tr>
<td>domain</td>
<td>n. 领域；域名；产业；地产 n. (Domain)人名；(英、法)多曼</td>
</tr>
<tr>
<td>take advantage of</td>
<td>利用；占便宜；欺负；趁</td>
</tr>
<tr>
<td>proper</td>
<td>adj. 适当的；本身的；特有的；正派的</td>
</tr>
<tr>
<td>cohesive</td>
<td>adj. 凝聚的；有结合力的；紧密结合的；有粘着力的</td>
</tr>
</tbody></table>
<h2 id="41-50"><a href="#41-50" class="headerlink" title="41-50"></a>41-50</h2><table>
<thead>
<tr>
<th>词</th>
<th>译</th>
</tr>
</thead>
<tbody><tr>
<td>despite</td>
<td>prep. 即使，尽管 n. （诗/文）侮辱，伤害；轻视，鄙视；憎恨 vt. &lt;废语&gt;故意使烦恼，故意伤害；&lt;古&gt;蔑视，轻蔑</td>
</tr>
<tr>
<td>far from</td>
<td>adv. 远离；远非；完全不</td>
</tr>
<tr>
<td>underlying</td>
<td>adj. 潜在的；根本的；在下面的；优先的 v. 放在…的下面；为…的基础；优先于（underlie的ing形式）</td>
</tr>
<tr>
<td>malleable</td>
<td>adj. 可锻的；可塑的；有延展性的；易适应的</td>
</tr>
<tr>
<td>versatile</td>
<td>adj. 多才多艺的；通用的，万能的；多面手的</td>
</tr>
<tr>
<td>expose</td>
<td>vt. 揭露，揭发；使曝光；显示</td>
</tr>
<tr>
<td>instantiate</td>
<td>v. 例示，举例说明；（哲）有例为证</td>
</tr>
<tr>
<td>pros and  cons</td>
<td>正反两方面；赞成者和反对者</td>
</tr>
<tr>
<td>Believe it or not</td>
<td>信不信由你</td>
</tr>
<tr>
<td>modular</td>
<td>adj. 模块化的；模数的；有标准组件的</td>
</tr>
</tbody></table>
<h2 id="51-60"><a href="#51-60" class="headerlink" title="51-60"></a>51-60</h2><table>
<thead>
<tr>
<th>词</th>
<th>译</th>
</tr>
</thead>
<tbody><tr>
<td>algebraic data types (ADT)</td>
<td>代数数据类型</td>
</tr>
<tr>
<td>idiom</td>
<td>n. 成语，习语；土话</td>
</tr>
<tr>
<td>aka</td>
<td>abbr. 又名，亦称 (also known as)</td>
</tr>
<tr>
<td>evaluating</td>
<td>v. 评估（evaluate的ing形式</td>
</tr>
<tr>
<td>separation</td>
<td>n. 分离，分开；间隔，距离；[法] 分居；缺口</td>
</tr>
<tr>
<td>toasters</td>
<td>n. 烤箱；烤面包器</td>
</tr>
<tr>
<td>refrigerators</td>
<td>n. [制冷] 冰箱，[制冷] 冷藏室；[制冷] 冷冻库（refrigerator的复数）</td>
</tr>
<tr>
<td>thermostats</td>
<td>n. 恒温控制器，温度调节装置（thermostat 的复数）</td>
</tr>
<tr>
<td>spacesuits</td>
<td>n. 航天服；太空服</td>
</tr>
<tr>
<td>all tiers of</td>
<td>…… 的所有层</td>
</tr>
</tbody></table>
<h2 id="61-70"><a href="#61-70" class="headerlink" title="61-70"></a>61-70</h2><table>
<thead>
<tr>
<th>词</th>
<th>译</th>
</tr>
</thead>
<tbody><tr>
<td>fingertip</td>
<td>n. （手）指尖；指套 adj. 容易接近的；延长到指尖的（如外套或面纱）</td>
</tr>
<tr>
<td>prearranged</td>
<td>adj. 预定的，预先安排的 v. 预定（prearrange的过去分词）；预先安排</td>
</tr>
<tr>
<td>business-domain logic</td>
<td>业务领域逻辑</td>
</tr>
<tr>
<td>uncertain</td>
<td>adj. 无把握的；多变的；不确定的；信心不足的；靠不住的</td>
</tr>
<tr>
<td>for these cases</td>
<td>针对这类状况</td>
</tr>
<tr>
<td>grasp</td>
<td>v. 抓牢，握紧；试图抓住；理解，领悟；毫不犹豫地抓住（机会）n. 抓，握；理解，领会；力所能及，把握；权力，控制</td>
</tr>
<tr>
<td>paradigm</td>
<td>n. 范例；词形变化表</td>
</tr>
<tr>
<td>general-purpose</td>
<td>adj. 多用途的；一般用途的</td>
</tr>
<tr>
<td>demand</td>
<td>n. （坚决的或困难的）要求；（顾客的）需求 v. 强烈要求；需要；逼问；查问，查询</td>
</tr>
<tr>
<td>impose</td>
<td>vi. 利用；欺骗；施加影响 vt. 强加；征税；以…欺骗</td>
</tr>
</tbody></table>
<h2 id="71-80"><a href="#71-80" class="headerlink" title="71-80"></a>71-80</h2><table>
<thead>
<tr>
<th>词</th>
<th>译</th>
</tr>
</thead>
<tbody><tr>
<td>In addition</td>
<td>另外，此外</td>
</tr>
<tr>
<td>at scale</td>
<td>大规模地</td>
</tr>
<tr>
<td>decomposing</td>
<td>v. 腐烂；分解（decompose 的现在分词）</td>
</tr>
<tr>
<td>potentially</td>
<td>adv. 可能地，潜在地</td>
</tr>
<tr>
<td>identify</td>
<td>vt. 确定；鉴定；识别，辨认出；使参与；把……看成一样 vi. 确定；认同；一致</td>
</tr>
<tr>
<td>well-rounded</td>
<td>adj. 丰满的；面面俱到的；多才多艺的；（语句）有表达力的</td>
</tr>
<tr>
<td>tackle</td>
<td>v. 应付，处理（难题或局面）；与某人交涉；（足球、曲棍球等）抢球；（橄榄球或美式足球）擒抱摔倒；抓获；对付，打（尤指罪犯）</td>
</tr>
<tr>
<td>leaner</td>
<td>adj. 更精瘦而且健康的，脂肪更少的；更贫乏的，更不足的；更精干的，效率更高的；更低报酬的</td>
</tr>
<tr>
<td>elegant</td>
<td>adj. 高雅的，优雅的；讲究的；简炼的；简洁的</td>
</tr>
<tr>
<td>In short</td>
<td>总之；简言之</td>
</tr>
</tbody></table>
<h2 id="81-90"><a href="#81-90" class="headerlink" title="81-90"></a>81-90</h2><table>
<thead>
<tr>
<th>词</th>
<th>译</th>
</tr>
</thead>
<tbody><tr>
<td>emerge</td>
<td>vi. 浮现；摆脱；暴露</td>
</tr>
<tr>
<td>a batch of</td>
<td>一批</td>
</tr>
<tr>
<td>disposal</td>
<td>n. 处理；支配；清理；安排</td>
</tr>
<tr>
<td>cumbersome</td>
<td>adj. 笨重的；累赘的；难处理的</td>
</tr>
<tr>
<td>hierarchy</td>
<td>n. 层级；等级制度</td>
</tr>
<tr>
<td>compatible</td>
<td>adj. 兼容的；能共处的；可并立的</td>
</tr>
<tr>
<td>the lack of</td>
<td>缺乏；没有</td>
</tr>
<tr>
<td>cringe</td>
<td>vi. 畏缩；奉承；阿谀 n. 畏缩；奉承</td>
</tr>
<tr>
<td>implementing</td>
<td>v. 贯彻，实行（implement 的现在分词）</td>
</tr>
<tr>
<td>transparently</td>
<td>adv. 显然地，易觉察地；明亮地</td>
</tr>
</tbody></table>
<h2 id="91-100"><a href="#91-100" class="headerlink" title="91-100"></a>91-100</h2><table>
<thead>
<tr>
<th>词</th>
<th>译</th>
</tr>
</thead>
<tbody><tr>
<td>angst</td>
<td>忧虑,不安</td>
</tr>
<tr>
<td>inevitably</td>
<td>adv. 不可避免地；必然地</td>
</tr>
<tr>
<td>embrace</td>
<td>vt. 拥抱；欣然采纳；信奉；包含</td>
</tr>
<tr>
<td>stigma</td>
<td>n. [植] 柱头；耻辱；污名；烙印；特征</td>
</tr>
<tr>
<td>sentiment</td>
<td>n. 感情，情绪；情操；观点；多愁善感</td>
</tr>
<tr>
<td>vibrant</td>
<td>adj. 充满生机的，生气勃勃的；鲜艳的；醒目的；洪亮的；强劲的；颤抖的，震动的</td>
</tr>
<tr>
<td>misconception</td>
<td>n. 误解；错觉；错误想法</td>
</tr>
<tr>
<td>spectrum</td>
<td>n. 光谱；频谱；范围；余象</td>
</tr>
<tr>
<td>inferior</td>
<td>adj. 差的；自卑的；下级的，下等的 n. 下级；次品</td>
</tr>
<tr>
<td>resounding</td>
<td>adj. 响亮的；轰动的；彻底的 v. 回响（resound的ing形式）</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2021/03/02/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>以数据库连接为例简单实现一个单例</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Database</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options
  <span class="token punctuation">&#125;</span>
  <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'You are now connected to the database.'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> DatabaseSingleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Database</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> instance
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> db1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatabaseSingleton</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> host<span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">:</span> <span class="token number">1111</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> db2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatabaseSingleton</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> host<span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">:</span> <span class="token number">2222</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>db1 <span class="token operator">===</span> db2<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="通用实现"><a href="#通用实现" class="headerlink" title="通用实现"></a>通用实现</h2><p>通用的单例模式一般由以下几个部分构成</p>
<ul>
<li><strong>Singleton</strong> ：特定类，这是我们需要访问的类，访问者要拿到的是它的实例；</li>
<li><strong>instance</strong> ：单例，是特定类的实例，特定类一般会提供 <code>getInstance</code> 方法来获取该单例；</li>
<li><strong>getInstance</strong> ：获取单例的方法，或者直接由 <code>new</code> 操作符获取；</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">static</span> instance <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span>instance <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> Singleton<span class="token punctuation">.</span>instance
  <span class="token punctuation">&#125;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span>instance <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options
      Singleton<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> Singleton<span class="token punctuation">.</span>instance
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token string">'s1'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">'s2'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="懒汉式-vs-饿汉式"><a href="#懒汉式-vs-饿汉式" class="headerlink" title="懒汉式 vs 饿汉式"></a>懒汉式 vs 饿汉式</h2><p>懒汉式和饿汉式的区别就在于单例 <strong>instance</strong> 是否是懒加载的</p>
<h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Money</span><span class="token punctuation">(</span><span class="token parameter">currency<span class="token punctuation">,</span> amount</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>currency <span class="token operator">=</span> currency
  <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">=</span> amount
<span class="token punctuation">&#125;</span>

<span class="token class-name">Money</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getMoney</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>currency<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>amount<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> MoneySingletonLazy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">currency<span class="token punctuation">,</span> amount</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Money</span><span class="token punctuation">(</span>currency<span class="token punctuation">,</span> amount<span class="token punctuation">)</span> <span class="token comment">// 懒加载</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> instance
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token function">MoneySingletonLazy</span><span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> m2 <span class="token operator">=</span> <span class="token function">MoneySingletonLazy</span><span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1 <span class="token operator">===</span> m2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Money</span><span class="token punctuation">(</span><span class="token parameter">currency<span class="token punctuation">,</span> amount</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>currency <span class="token operator">=</span> currency
  <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">=</span> amount
<span class="token punctuation">&#125;</span>

<span class="token class-name">Money</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getMoney</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>currency<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>amount<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> MoneySingletonHungry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">currency<span class="token punctuation">,</span> amount</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Money</span><span class="token punctuation">(</span>currency<span class="token punctuation">,</span> amount<span class="token punctuation">)</span> <span class="token comment">// 直接加载</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> instance
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token function">MoneySingletonHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> m2 <span class="token operator">=</span> <span class="token function">MoneySingletonHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1 <span class="token operator">===</span> m2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>单例模式在创建后在内存中只存在一个实例，节约了内存开支和实例化时的性能开支，特别是需要重复使用一个创建开销比较大的类时，比起实例不断地销毁和重新实例化，单例能节约更多资源，比如数据库连接；</li>
<li>单例模式可以解决对资源的多重占用，比如写文件操作时，因为只有一个实例，可以避免对一个文件进行同时操作；</li>
<li>只使用一个实例，也可以减小垃圾回收机制 GC（Garbage Collecation） 的压力，表现在浏览器中就是系统卡顿减少，操作更流畅，CPU 资源占用更少；</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>单例模式对扩展不友好，一般<strong>不容易扩展</strong>，因为单例模式一般自行实例化，没有接口；</li>
<li><strong>与单一职责原则冲突</strong>，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化；</li>
</ol>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>当一个类的<strong>实例化过程消耗的资源过多</strong>，可以使用单例模式来避免性能浪费；</li>
<li>当项目中需要一个公共的状态，那么需要使用单例模式来<strong>保证访问一致性</strong>；</li>
</ol>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JS的三种继承</title>
    <url>/2021/04/17/JS%E7%9A%84%E4%B8%89%E7%A7%8D%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h2 id="ES6-Class"><a href="#ES6-Class" class="headerlink" title="ES6 Class"></a>ES6 Class</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token punctuation">&#125;</span>
  <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade
  <span class="token punctuation">&#125;</span>
  <span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">grade : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'Tim'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">&#125;</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade
<span class="token punctuation">&#125;</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getGrade</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">grade : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student

<span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'Tim'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="OLOO-Objects-Linked-to-Other-Objects"><a href="#OLOO-Objects-Linked-to-Other-Objects" class="headerlink" title="OLOO ( Objects Linked to Other Objects )"></a>OLOO ( Objects Linked to Other Objects )</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用 OLOO 的方式重构继承</span>
<span class="token comment">// 创建 Person 对象</span>
<span class="token keyword">const</span> Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\n age : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> p1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">'Tim'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>

<span class="token comment">/* 
  使用 Object.create 创建一个以 Person 为原型的 Student 对象
  Student 的 init 方法在原型链上会先比 Person 的 init 方法先被找到，所以不用担心
  ---- Student 结构图 ----
  ➡️ getGrade: ƒ ()
  ➡️ init: ƒ (name, age, grade)
  ⬇️ __proto__:
    ➡️ getInfo: ƒ getInfo()
    ➡️ init: ƒ init(name, age)
    ➡️ __proto__: Object 
*/</span>
<span class="token keyword">const</span> Student <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>
Student<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  Person<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">&#125;</span>
Student<span class="token punctuation">.</span><span class="token function-variable function">getGrade</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">grade : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> s1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">'Tim'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>对象链接的方法</title>
    <url>/2021/04/10/%E5%AF%B9%E8%B1%A1%E9%93%BE%E6%8E%A5%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>对象链接也叫 OLOO ( Objects Linked to Other Objects )， 说的直白一点就是对象 A 链接对象 B，对象 A 可以访问对象 B 的属性和方法。</p>
<p>举个🌰，我们创建一个工具对象 <code>BasicFormatter</code>，然后通过不同的方式创建可以访问 <code>BasicFormatter</code> 的工具对象</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> BasicFormatter <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">format</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="隐式"><a href="#隐式" class="headerlink" title="隐式"></a>隐式</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 
  Implicit 隐式
  通过 Object.create 方法创建一个以 BasicFormatter 为原型的对象
  这样就能通过 __proto__ 调用原型链上的 format 函数 
*/</span>
<span class="token keyword">const</span> Foo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>BasicFormatter<span class="token punctuation">)</span>
Foo<span class="token punctuation">.</span><span class="token function-variable function">saySomething</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

Foo<span class="token punctuation">.</span><span class="token function">saySomething</span><span class="token punctuation">(</span><span class="token string">'this is foo!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="显式"><a href="#显式" class="headerlink" title="显式"></a>显式</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 
  Explicit 显式
  直接把需要链接的对象定义在自身上
*/</span>
<span class="token keyword">const</span> Bar <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  formatter<span class="token operator">:</span> BasicFormatter<span class="token punctuation">,</span>
  <span class="token function">saySomething</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

Bar<span class="token punctuation">.</span><span class="token function">saySomething</span><span class="token punctuation">(</span><span class="token string">'this is bar!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Learning-The-Shell</title>
    <url>/2021/01/11/Learning-The-Shell/</url>
    <content><![CDATA[<h2 id="01-What-Is-the-shell-什么是脚本"><a href="#01-What-Is-the-shell-什么是脚本" class="headerlink" title="01 - What Is the shell 什么是脚本"></a>01 - What Is the shell 什么是脚本</h2><table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>EN</strong></th>
<th><strong>ZH</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>date</code></td>
<td>Displays the current time and date.</td>
<td>显示当前日期</td>
</tr>
<tr>
<td><code>cal</code></td>
<td>Displays a calendar of thecurrent month.</td>
<td>显示日历</td>
</tr>
<tr>
<td><code>df</code></td>
<td>Disk free</td>
<td>剩余磁盘</td>
</tr>
<tr>
<td><code>free</code></td>
<td>Display the amount of free memor</td>
<td>剩余内存</td>
</tr>
<tr>
<td><code>exit</code></td>
<td>Ending a Terminal Session.</td>
<td>关闭一个命令行会话</td>
</tr>
</tbody></table>
<h2 id="02-Navigation-导航"><a href="#02-Navigation-导航" class="headerlink" title="02 - Navigation 导航"></a>02 - Navigation 导航</h2><table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>EN</strong></th>
<th><strong>ZH</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>pwd</code></td>
<td>Print name of current working directory.</td>
<td>显示当前文件夹</td>
</tr>
<tr>
<td><code>cd</code></td>
<td>Change directory.</td>
<td>切换文件夹</td>
</tr>
<tr>
<td><code>ls</code></td>
<td>List directory contents.</td>
<td>显示文件夹内容</td>
</tr>
</tbody></table>
<h2 id="03-Exploring-the-System-探索系统"><a href="#03-Exploring-the-System-探索系统" class="headerlink" title="03 - Exploring the System 探索系统"></a>03 - Exploring the System 探索系统</h2><table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>EN</strong></th>
<th><strong>ZH</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>ls</code></td>
<td>List directory contents.</td>
<td>显示文件夹内容</td>
</tr>
<tr>
<td><code>file</code></td>
<td>Determining a File’s Type</td>
<td>查看文件类型</td>
</tr>
<tr>
<td><code>less</code></td>
<td>Viewing File Contents</td>
<td>查看文件内容</td>
</tr>
</tbody></table>
<h2 id="04-Manipulating-Files-and-Directories-操作文件和目录"><a href="#04-Manipulating-Files-and-Directories-操作文件和目录" class="headerlink" title="04 - Manipulating Files and Directories 操作文件和目录"></a>04 - Manipulating Files and Directories 操作文件和目录</h2><table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>EN</strong></th>
<th><strong>ZH</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>cp</code></td>
<td>Copy files and directories</td>
<td>拷贝文件和文件夹</td>
</tr>
<tr>
<td><code>mv</code></td>
<td>Move/rename files and directories</td>
<td>移动/重命名文件和文件夹</td>
</tr>
<tr>
<td><code>mkdir</code></td>
<td>Create directories</td>
<td>创建文件夹</td>
</tr>
<tr>
<td><code>rm</code></td>
<td>Remove files and directories</td>
<td>删除文件和文件夹</td>
</tr>
<tr>
<td><code>ln</code></td>
<td>Create hard and symbolic links</td>
<td>创建硬链接和符号链接</td>
</tr>
</tbody></table>
<h3 id="cp-Copy-Files-and-Directories"><a href="#cp-Copy-Files-and-Directories" class="headerlink" title="cp - Copy Files and Directories"></a>cp - Copy Files and Directories</h3><table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>cp file1 file2</code></td>
<td>把 file1 拷贝到 file2 . 如果 file2 存在， 那么 file2 的内容被 file1 的内容覆盖 . 如果 file2 不存在，那么 创建 file2 ，并把 file1 的内容拷贝到 file2。</td>
</tr>
<tr>
<td><code>cp -i file1 file2</code></td>
<td>与上一条命令相似，不同的是如果 file2 存在，那么 file2 被覆盖前会提示用户。</td>
</tr>
<tr>
<td><code>cp file1 file2 dir1</code></td>
<td>把 file1 和 file2 拷贝进 dir1，前提是 dir1 一定要存在。</td>
</tr>
<tr>
<td><code>cp dir1/* dir2</code></td>
<td>使用通配符，把 dir1 的内容都拷贝进 dir 中，前提是 dir2 一定要存在。</td>
</tr>
<tr>
<td><code>cp -r dir1 dir2</code></td>
<td>把 dir1 的内容拷贝进 dir2 ，如果 dir2 不存在，就新建 dir2，并把 dir1 的内容拷贝进 dir2 .如果 dir2 存在就把 dir1 这个文件夹整个拷贝进 dir2，成为 dir2 的子文件夹。</td>
</tr>
</tbody></table>
<blockquote>
<p><code>-i</code> 代表 <code>interactive</code>交互的（会有提示问你要不要这样做）</p>
<p><code>-r</code> 代表 <code>recursive</code>递归的（递归地复制目录及其内容）</p>
</blockquote>
<h3 id="mv-Move-and-Rename-Files"><a href="#mv-Move-and-Rename-Files" class="headerlink" title="mv - Move and Rename Files"></a>mv - Move and Rename Files</h3><table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>mv file1 file2</code></td>
<td>把 file1 移动到 file2 .。如果 file2 存在， 那么 file2 的内容被 file1 的内容覆盖 .。如果 file2 不存在，那么 创建 file2 ，并把 file1 的内容拷贝到 file2，file1 不再存在。</td>
</tr>
<tr>
<td><code>mv -i file1 file2</code></td>
<td>与上一条命令相似，不同的是如果 file2 存在，那么 file2 被覆盖前会提示用户。</td>
</tr>
<tr>
<td><code>mv file1 file2 dir1</code></td>
<td>把 file1 和 file2 移动到 dir1，前提是 dir1 一定要存在。</td>
</tr>
<tr>
<td><code>mv dir1 dir2</code></td>
<td>如果 dir2 不存在, 创建 dir2 并把 dir1 的内容移动到 dir2 并删除 dir1.。如果 dir2 存在，把 dir1 移动到 dir2，成为 dir2 的子文件夹。</td>
</tr>
</tbody></table>
<h3 id="rm-Remove-Files-and-Directories"><a href="#rm-Remove-Files-and-Directories" class="headerlink" title="rm - Remove Files and Directories"></a>rm - Remove Files and Directories</h3><table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>rm file1</code></td>
<td>静默删除 file1。</td>
</tr>
<tr>
<td><code>rm -i file1</code></td>
<td>与上一条命令类似，区别是在执行删除之前会提示用户确认。</td>
</tr>
<tr>
<td><code>rm -r file1 dir1</code></td>
<td>删除 file1 和 dir1 以及 dir1 中的内容</td>
</tr>
<tr>
<td><code>rm -rf file1 dir1</code></td>
<td>与上一条命令类似，但如果 file1 或 dir1 不存在，rm 将静默继续。</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>注意</strong></p>
<p>类 Unix 的操作系统比如 Linux 是没有撤销删除命令的。</p>
<p>一旦你使用 <code>rm</code> 命令删除一些文件，它就不存在了。Linux 假定你很聪明并且知道你在做什么。</p>
<p>要特别小心使用通配符。 请考虑下面这个经典的例子。 比方说，你想在一个目录仅删除<code>HTML</code>文件。 为此，请键入以下内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> *.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这是正确的，但如果你不小心在 <code>*</code> 和 <code>.html</code> 之间放置了一个空格</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> * .html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>rm</code> 命令将删除目录中的所有文件，然后抱怨没有名为<code>.html</code>的文件。</p>
<p>这里有一个实用的提示：每当你使用带有通配符的<code>rm</code>命令之前（除了仔细检查你的输入！），先用<code>ls</code>测试通配符。 这会让你看到即将被删除的文件。 然后按向上箭头调用该命令并用<code>rm</code>替换<code>ls</code>。</p>
</blockquote>
<h3 id="ln-Create-Links"><a href="#ln-Create-Links" class="headerlink" title="ln - Create Links"></a>ln - Create Links</h3><h4 id="Hard-Links"><a href="#Hard-Links" class="headerlink" title="Hard Links"></a>Hard Links</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token function">file</span> <span class="token function">link</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="Symbolic-Links"><a href="#Symbolic-Links" class="headerlink" title="Symbolic Links"></a>Symbolic Links</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s item <span class="token function">link</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><div class="mermaid">
graph LR
A[hard link]
B[file]
C[soft link]
D[inode]
E[inode]
F[data block]
G[data block]
%% 定义样式类
classDef one fill:#83a8d5,stroke:#333,stroke-width:2px;
classDef two fill:#f3a2a8,stroke:#333,stroke-width:2px;
classDef three fill:#fbd4b3,stroke:#333,stroke-width:2px;
%% 应用样式类，markdown里没效果
class A one
class B one
class C one
class D two
class E two
class F three
class G three
A --&gt; D
B --&gt; D
C --&gt; E
D --&gt; F
E --&gt; G
G -.-&gt; B
</div>

<p>由于硬链接是有着相同 inode 号仅文件名不同的文件，因此硬链接存在以下几点特性：</p>
<ul>
<li>  文件有相同的 inode 及 data block；</li>
<li>  只能对已存在的文件进行创建；</li>
<li>  不能交叉文件系统进行硬链接的创建；</li>
<li>  不能对目录进行创建，只可对文件创建；</li>
<li>  删除一个硬链接文件并不影响其他有相同 inode 号的文件。</li>
</ul>
<p>软链接与硬链接不同，若文件用户数据块中存放的内容是另一文件的路径名的指向，则该文件就是软连接。软链接就是一个普通文件，只是数据块内容有点特殊。软链接有着自己的 inode 号以及用户数据块。因此软链接的创建与使用没有类似硬链接的诸多限制：</p>
<ul>
<li>  软链接有自己的文件属性及权限等；</li>
<li>  可对不存在的文件或目录创建软链接；</li>
<li>  软链接可交叉文件系统；</li>
<li>  软链接可对文件或目录创建；</li>
<li>  创建软链接时，链接计数 i_nlink 不会增加；</li>
<li>  删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接（即 dangling link，若被指向路径文件被重新创建，死链接可恢复为正常的软链接）。</li>
</ul>
<blockquote>
<p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/index.html">理解 Linux 的硬链接与软链接</a></p>
</blockquote>
<h2 id="05-Working-With-Commands-使用命令"><a href="#05-Working-With-Commands-使用命令" class="headerlink" title="05 - Working With Commands 使用命令"></a>05 - Working With Commands 使用命令</h2><table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>EN</strong></th>
<th><strong>ZH</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>type</code></td>
<td>Indicate how a command name is interpreted</td>
<td>显示指定命令的类型</td>
</tr>
<tr>
<td><code>which</code></td>
<td>Display which executable program will be executed</td>
<td>查找并显示给定命令的绝对路径</td>
</tr>
<tr>
<td><code>help</code></td>
<td>Get help for shell builtins</td>
<td>显示内置 shell 的帮助信息</td>
</tr>
<tr>
<td><code>man</code></td>
<td>Display a command’s manual page</td>
<td>查看 Linux 中的指令帮助</td>
</tr>
<tr>
<td><code>apropos</code></td>
<td>Display a list of appropriate commands</td>
<td>在 whatis 数据库中查找字符串</td>
</tr>
<tr>
<td><code>info</code></td>
<td>Display a command’s info entry</td>
<td>Linux 下 info 格式的帮助指令</td>
</tr>
<tr>
<td><code>whatis</code></td>
<td>Display one-line manual page descriptions</td>
<td>查询一个命令执行什么功能</td>
</tr>
<tr>
<td><code>alias</code></td>
<td>Create an alias for a command</td>
<td>用来设置指令的别名</td>
</tr>
</tbody></table>
<h3 id="什么是命令"><a href="#什么是命令" class="headerlink" title="什么是命令"></a>什么是命令</h3><p>命令可以是以下四种类型之一</p>
<table>
<thead>
<tr>
<th><strong>概念</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>可执行程序</td>
<td>就像我们在 <code>/usr/bin</code>这个文件夹中看到的文件一样。比如常用的 <code>yum</code>。</td>
</tr>
<tr>
<td>内置 shell</td>
<td>Bash 支持一些叫作内置 shell 的命令。举个例子 <code>cd</code>就是一个内置命令。</td>
</tr>
<tr>
<td>shell 函数</td>
<td>脚本。</td>
</tr>
<tr>
<td>别名</td>
<td>通过组合其他命令构成的一个自定义命令。</td>
</tr>
</tbody></table>
<h3 id="认识命令"><a href="#认识命令" class="headerlink" title="认识命令"></a>认识命令</h3><h4 id="type-显示一个命令的类型"><a href="#type-显示一个命令的类型" class="headerlink" title="type - 显示一个命令的类型"></a>type - 显示一个命令的类型</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@golinux /<span class="token punctuation">]</span><span class="token comment"># type yum</span>
yum is /usr/bin/yum
<span class="token punctuation">[</span>root@golinux /<span class="token punctuation">]</span><span class="token comment"># type type</span>
<span class="token builtin class-name">type</span> is a shell <span class="token builtin class-name">builtin</span>
<span class="token punctuation">[</span>root@golinux /<span class="token punctuation">]</span><span class="token comment"># type ll</span>
ll is aliased to `ls -l --color<span class="token operator">=</span>auto'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="which-显示可执行文件的位置"><a href="#which-显示可执行文件的位置" class="headerlink" title="which - 显示可执行文件的位置"></a>which - 显示可执行文件的位置</h4><p>有时，系统上安装了多个版本的可执行程序。 虽然这在桌面系统上并不常见，但在较大的服务器上并不罕见。 要确定给定可执行文件的确切位置，请使用which命令。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@golinux /<span class="token punctuation">]</span><span class="token comment"># which yum</span>
/usr/bin/yum
<span class="token punctuation">[</span>root@golinux /<span class="token punctuation">]</span><span class="token comment"># which type</span>
/usr/bin/which: no <span class="token builtin class-name">type</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@golinux /<span class="token punctuation">]</span><span class="token comment"># which ll</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ll</span><span class="token operator">=</span><span class="token string">'ls -l --color=auto'</span>
	/usr/bin/ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="获取命令文档"><a href="#获取命令文档" class="headerlink" title="获取命令文档"></a>获取命令文档</h3><h4 id="help-显示内置-shell-的帮助信息"><a href="#help-显示内置-shell-的帮助信息" class="headerlink" title="help - 显示内置 shell 的帮助信息"></a>help - 显示内置 shell 的帮助信息</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@golinux /<span class="token punctuation">]</span><span class="token comment"># help cd</span>
cd: <span class="token builtin class-name">cd</span> <span class="token punctuation">[</span>-L<span class="token operator">|</span><span class="token punctuation">[</span>-P <span class="token punctuation">[</span>-e<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>dir<span class="token punctuation">]</span>
    Change the shell working directory.
    
    Change the current directory to DIR.  The default DIR is the value of the
    <span class="token environment constant">HOME</span> shell variable.
    
    The variable CDPATH defines the search path <span class="token keyword">for</span> the directory containing
    DIR.  Alternative directory names <span class="token keyword">in</span> CDPATH are separated by a colon <span class="token punctuation">(</span>:<span class="token punctuation">)</span>.
    A null directory name is the same as the current directory.  If DIR begins
    with a slash <span class="token punctuation">(</span>/<span class="token punctuation">)</span>, <span class="token keyword">then</span> CDPATH is not used.
    
    If the directory is not found, and the shell option <span class="token variable"><span class="token variable">`</span>cdable_vars' is set,
    the word is assumed to be  a variable name.  If that variable has a value,
    its value is used <span class="token keyword">for</span> DIR.
    
    Options:
        -L	force symbolic links to be followed
        -P	use the physical directory structure without following symbolic
    	links
        -e	<span class="token keyword">if</span> the -P option is supplied, and the current working directory
    	cannot be determined successfully, <span class="token builtin class-name">exit</span> with a non-zero status
    
    The default is to follow symbolic links, as <span class="token keyword">if</span> <span class="token variable">`</span></span>-L' were specified.
    
    Exit Status:
    Returns <span class="token number">0</span> <span class="token keyword">if</span> the directory is changed, and <span class="token keyword">if</span> <span class="token environment constant">$PWD</span> is <span class="token builtin class-name">set</span> successfully when
    -P is used<span class="token punctuation">;</span> non-zero otherwise.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="–help-显示可执行程序的帮助信息"><a href="#–help-显示可执行程序的帮助信息" class="headerlink" title="–help  - 显示可执行程序的帮助信息"></a>–help  - 显示可执行程序的帮助信息</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@golinux /<span class="token punctuation">]</span><span class="token comment"># mkdir --help</span>
Usage: <span class="token function">mkdir</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. DIRECTORY<span class="token punctuation">..</span>.
Create the DIRECTORY<span class="token punctuation">(</span>ies<span class="token punctuation">)</span>, <span class="token keyword">if</span> they <span class="token keyword">do</span> not already exist.

Mandatory arguments to long options are mandatory <span class="token keyword">for</span> short options too.
  -m, --mode<span class="token operator">=</span>MODE   <span class="token builtin class-name">set</span> <span class="token function">file</span> mode <span class="token punctuation">(</span>as <span class="token keyword">in</span> <span class="token function">chmod</span><span class="token punctuation">)</span>, not <span class="token assign-left variable">a</span><span class="token operator">=</span>rwx - <span class="token builtin class-name">umask</span>
  -p, --parents     no error <span class="token keyword">if</span> existing, <span class="token function">make</span> parent directories as needed
  -v, --verbose     print a message <span class="token keyword">for</span> each created directory
  -Z                   <span class="token builtin class-name">set</span> SELinux security context of each created directory
                         to the default <span class="token builtin class-name">type</span>
      --context<span class="token punctuation">[</span><span class="token operator">=</span>CTX<span class="token punctuation">]</span>  like -Z, or <span class="token keyword">if</span> CTX is specified <span class="token keyword">then</span> <span class="token builtin class-name">set</span> the SELinux
                         or SMACK security context to CTX
      --help     display this <span class="token builtin class-name">help</span> and <span class="token builtin class-name">exit</span>
      --version  output version information and <span class="token builtin class-name">exit</span>

GNU coreutils online help: <span class="token operator">&lt;</span>http://www.gnu.org/software/coreutils/<span class="token operator">></span>
For complete documentation, run: info coreutils <span class="token string">'mkdir invocation'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="man-在线参考手册界面"><a href="#man-在线参考手册界面" class="headerlink" title="man - 在线参考手册界面"></a>man - 在线参考手册界面</h4><h4 id="apropos-手册页的搜索引擎（在-whatis-数据库中查找字符串）"><a href="#apropos-手册页的搜索引擎（在-whatis-数据库中查找字符串）" class="headerlink" title="apropos - 手册页的搜索引擎（在 whatis 数据库中查找字符串）"></a>apropos - 手册页的搜索引擎（在 whatis 数据库中查找字符串）</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@golinux ~<span class="token punctuation">]</span><span class="token comment"># apropos partition</span>
addpart <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>          - simple wrapper around the <span class="token string">"add partition"</span> ioctl
<span class="token function">cfdisk</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>           - display or manipulate disk partition table
delpart <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>          - simple wrapper around the <span class="token string">"del partition"</span> ioctl
<span class="token function">fdisk</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>            - manipulate disk partition table
iostat <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>           - Report Central Processing Unit <span class="token punctuation">(</span>CPU<span class="token punctuation">)</span> statistics and input/output statistics <span class="token keyword">for</span> devices and partitions.
kpartx <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>           - Create device maps from partition tables
os-prober <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        - Discover bootable partitions on the <span class="token builtin class-name">local</span> system.
<span class="token function">parted</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>           - a partition manipulation program
partprobe <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>        - inform the OS of partition table changes
partx <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>            - tell the Linux kernel about the presence and numbering of on-disk partitions
resizepart <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>       - simple wrapper around the <span class="token string">"resize partition"</span> ioctl
sfdisk <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>           - partition table manipulator <span class="token keyword">for</span> Linux
systemd-efi-boot-generator <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> - Generator <span class="token keyword">for</span> automatically mounting the EFI System Partition used by the current boot to /boot
systemd-gpt-auto-generator <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> - Generator <span class="token keyword">for</span> automatically discovering and mounting root, /home and /srv partitions, as well as discover<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="whatis-一行描述手册页"><a href="#whatis-一行描述手册页" class="headerlink" title="whatis - 一行描述手册页"></a>whatis - 一行描述手册页</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@golinux ~<span class="token punctuation">]</span><span class="token comment"># whatis ls</span>
<span class="token function">ls</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>               - list directory contents
<span class="token punctuation">[</span>root@golinux ~<span class="token punctuation">]</span><span class="token comment"># whatis yum</span>
yum <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>              - Yellowdog Updater Modified
<span class="token punctuation">[</span>root@golinux ~<span class="token punctuation">]</span><span class="token comment"># whatis type</span>
<span class="token builtin class-name">type</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>             - <span class="token function">bash</span> built-in commands, see bash<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="使用-alias-创建自己的命令"><a href="#使用-alias-创建自己的命令" class="headerlink" title="使用 alias 创建自己的命令"></a>使用 <code>alias</code> 创建自己的命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@golinux ~<span class="token punctuation">]</span><span class="token comment"># alias la='ls -la'</span>
<span class="token punctuation">[</span>root@golinux ~<span class="token punctuation">]</span><span class="token comment"># la</span>
total <span class="token number">104</span>
dr-xr-x---.  <span class="token number">8</span> root root <span class="token number">4096</span> Aug <span class="token number">29</span> <span class="token number">17</span>:38 <span class="token builtin class-name">.</span>
dr-xr-xr-x. <span class="token number">18</span> root root <span class="token number">4096</span> May <span class="token number">10</span> <span class="token number">15</span>:12 <span class="token punctuation">..</span>
-rw-------   <span class="token number">1</span> root root <span class="token number">8694</span> Sep  <span class="token number">4</span> <span class="token number">16</span>:22 .bash_history
-rw-r--r--.  <span class="token number">1</span> root root   <span class="token number">18</span> Dec <span class="token number">29</span>  <span class="token number">2013</span> .bash_logout
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">176</span> Dec <span class="token number">29</span>  <span class="token number">2013</span> .bash_profile
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">176</span> Sep  <span class="token number">4</span> <span class="token number">16</span>:21 .bashrc
drwx------   <span class="token number">3</span> root root <span class="token number">4096</span> Oct <span class="token number">15</span>  <span class="token number">2017</span> .cache
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">100</span> Dec <span class="token number">29</span>  <span class="token number">2013</span> .cshrc
drwxr-xr-x   <span class="token number">7</span> root root <span class="token number">4096</span> Dec <span class="token number">21</span>  <span class="token number">2018</span> .nvm
drwxr-xr-x   <span class="token number">2</span> root root <span class="token number">4096</span> Oct <span class="token number">15</span>  <span class="token number">2017</span> .pip
drwxr-----   <span class="token number">3</span> root root <span class="token number">4096</span> Dec <span class="token number">21</span>  <span class="token number">2018</span> .pki
-rw-r--r--   <span class="token number">1</span> root root   <span class="token number">64</span> Oct <span class="token number">15</span>  <span class="token number">2017</span> .pydistutils.cfg
-rw-------   <span class="token number">1</span> root root   <span class="token number">37</span> Feb <span class="token number">16</span>  <span class="token number">2019</span> .python_history
drwx------   <span class="token number">2</span> root root <span class="token number">4096</span> Dec <span class="token number">20</span>  <span class="token number">2018</span> .ssh
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">129</span> Dec <span class="token number">29</span>  <span class="token number">2013</span> .tcshrc
drwxr-xr-x   <span class="token number">6</span> root root <span class="token number">4096</span> Aug <span class="token number">26</span> <span class="token number">15</span>:15 .vim
-rw-------   <span class="token number">1</span> root root <span class="token number">5324</span> Aug <span class="token number">29</span> <span class="token number">17</span>:38 .viminfo
-rw-------   <span class="token number">1</span> root root <span class="token number">5121</span> Aug <span class="token number">26</span> <span class="token number">23</span>:19 .viminfo.tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="06-Redirection-重定向"><a href="#06-Redirection-重定向" class="headerlink" title="06 - Redirection 重定向"></a>06 - Redirection 重定向</h2><table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>EN</strong></th>
<th><strong>ZH</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>cat</code></td>
<td>Concatenate files</td>
<td></td>
</tr>
<tr>
<td><code>sort</code></td>
<td>Sort lines of text</td>
<td></td>
</tr>
<tr>
<td><code>uniq</code></td>
<td>Report or omit repeated lines</td>
<td></td>
</tr>
<tr>
<td><code>grep</code></td>
<td>Print lines matching a pattern</td>
<td></td>
</tr>
<tr>
<td><code>wc</code></td>
<td>Print newline, word, and byte counts for each file</td>
<td></td>
</tr>
<tr>
<td><code>head</code></td>
<td>Output the first part of a file</td>
<td></td>
</tr>
<tr>
<td><code>tail</code></td>
<td>Output the last part of a file</td>
<td></td>
</tr>
<tr>
<td><code>tee</code></td>
<td>Read from standard input and write to standard output and files</td>
<td></td>
</tr>
</tbody></table>
<h3 id="Standard-Input-Output-and-Error-标准输入，输出和错误"><a href="#Standard-Input-Output-and-Error-标准输入，输出和错误" class="headerlink" title="Standard Input, Output, and Error 标准输入，输出和错误"></a>Standard Input, Output, and Error 标准输入，输出和错误</h3><p>Many of the programs that we have used so far produce output of some kind. This output often consists of two types.</p>
<ul>
<li>The program’s results; that is, the data the program is designed to produce</li>
<li>Status and error messages that tell us how the program is getting along </li>
</ul>
<p>如果我们使用<code>ls</code>这样的命令，我们可以在屏幕上看到它显示的结果和错误消息。<br>保持<code>Unix</code>主题“一切都是文件”，像<code>ls</code>这样的程序实际上是将结果发送到一个名为标准输出（通常表示为<code>stdout</code>）的特殊文件，并将其状态消息发送到另一个名为标准错误（<code>stderr</code>）的文件。 默认情况下，标准输出和标准错误都会链接到屏幕上，而不是保存到磁盘文件中。<br>此外，许多程序从名为标准输入（stdin）的工具获取输入，默认情况下，该工具连接到键盘。<br>I / O重定向允许我们改变输出的位置和输入的来源。 通常，输出从屏幕上显示而输入则来自于键盘，但是通过I / O重定向，我们可以改变它。</p>
<h3 id="Redirecting-Standard-Output-重定向标准输出"><a href="#Redirecting-Standard-Output-重定向标准输出" class="headerlink" title="Redirecting Standard Output 重定向标准输出"></a>Redirecting Standard Output 重定向标准输出</h3><p>把<code>ls -l /usr/bin</code>的结果通过<code>&gt;</code>重定向到<code>ls-output.txt</code>这个文件</p>
<pre class="line-numbers language-none"><code class="language-none">ls -l &#x2F;usr&#x2F;bin &gt; ls-output.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>当你想把<code>ls -l /bin/usr</code>的结果通过<code>&gt;</code>重定向到<code>ls-output.txt</code>这个文件时，你会发现并不可行，因为<code>ls</code>这个命令不会把它的错误信息通过标准输出的方式进行输出</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@golinux playground<span class="token punctuation">]</span><span class="token comment"># ls -l /bin/usr > ls-output.txt</span>
ls: cannot access /bin/usr: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<table>
<thead>
<tr>
<th>操作符</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>&gt;</code></td>
<td>重写内容</td>
</tr>
<tr>
<td><code>&gt;&gt;</code></td>
<td>追加内容</td>
</tr>
</tbody></table>
<h3 id="Redirecting-Standard-Error-重定向标准错误"><a href="#Redirecting-Standard-Error-重定向标准错误" class="headerlink" title="Redirecting Standard Error 重定向标准错误"></a>Redirecting Standard Error 重定向标准错误</h3><p>要重定向标准错误，我们必须引用其文件描述符。 程序可以在几个编号的文件流中的任何一个上产生输出。 虽然我们将前三个文件流称为标准输入，输出和错误，但shell在内部分别将它们作为文件描述符0,1和2引用。 shell提供了使用文件描述符编号重定向文件的表示法。 由于标准错误与文件描述符编号2相同，因此我们可以使用以下表示法重定向标准错误：</p>
<p>文件描述符（File Descriptor）是计算机科学中的一个术语，是一个用于表述指向<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6">文件</a>的引用的抽象化概念。</p>
<table>
<thead>
<tr>
<th>整数值</th>
<th>名称</th>
<th>&lt;unistd.h&gt;符号常量</th>
<th>&lt;stdio.h&gt;文件流</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td><a href="https://zh.wikipedia.org/wiki/Stdin">Standard input</a></td>
<td>STDIN_FILENO</td>
<td>stdin</td>
</tr>
<tr>
<td>1</td>
<td><a href="https://zh.wikipedia.org/wiki/Stdout">Standard output</a></td>
<td>STDOUT_FILENO</td>
<td>stdout</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://zh.wikipedia.org/wiki/Stderr">Standard error</a></td>
<td>STDERR_FILENO</td>
<td>stderr</td>
</tr>
</tbody></table>
<p>重定向标准错误到文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -l /bin/usr <span class="token operator"><span class="token file-descriptor important">2</span>></span> ls-error.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>重定向标准输出和标准错误到同一个文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -l /bin/usr <span class="token operator">></span> ls-output.txt <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span>
<span class="token comment"># 或者</span>
<span class="token function">ls</span> -l /bin/usr <span class="token operator">&amp;></span> ls-output.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>处理不需要的输出</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -l /bin/usr <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p><a href="https://zh.wikipedia.org/wiki//dev/null">关于/dev/null的趣闻</a></p>
</blockquote>
<h3 id="Redirecting-Standard-Input-重定向标准输入"><a href="#Redirecting-Standard-Input-重定向标准输入" class="headerlink" title="Redirecting Standard Input 重定向标准输入"></a>Redirecting Standard Input 重定向标准输入</h3><h4 id="cat-合并输出文件"><a href="#cat-合并输出文件" class="headerlink" title="cat - 合并输出文件"></a>cat - 合并输出文件</h4><p>显示内容不多的文本文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ls-output.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>合并文件，比如我们有 <code>movie.mpeg.001 movie.mpeg.002 ... movie.mpeg.099</code> 这些文件，使用如下命令就可以合并成一个文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> movie.mpeg.0* <span class="token operator">></span> movie.mpeg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>只输入<code>cat</code>就变成了输入什么输出什么的交互命令行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@golinux playground<span class="token punctuation">]</span><span class="token comment"># cat</span>
hello world
hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>利用这个特性可以用<code>cat</code>创建内容不多的文本文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@izbp13gye2rcpn1at3vj69z playground<span class="token punctuation">]</span><span class="token comment"># cat > little.txt</span>
this is a little.txt <span class="token comment"># 输入文件内容</span>
<span class="token punctuation">[</span>root@izbp13gye2rcpn1at3vj69z playground<span class="token punctuation">]</span><span class="token comment"># cat little.txt </span>
this is a little.txt <span class="token comment"># 打印文件内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用<code>&lt;</code> 重定向操作符，我们将标准输入源从键盘更改为<code>little.txt</code> 文件。</p>
<p>我们可以看到结果与<code>cat little.txt</code>这种传递单个文件名参数的结果相同</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@izbp13gye2rcpn1at3vj69z playground<span class="token punctuation">]</span><span class="token comment"># cat &lt; little.txt </span>
this is the little.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="Pipelines-管道操作符"><a href="#Pipelines-管道操作符" class="headerlink" title="Pipelines 管道操作符"></a>Pipelines 管道操作符</h3><p>管道运算符<code>|</code> 可以把一个命令的标准输出传递到另一命令的标准输入</p>
<div class="mermaid">
graph TD
A[前一个命令的标准输出]
B[前一个命令的标准输出]
%% 定义样式类
classDef one fill:#83a8d5,stroke:#333,stroke-width:2px;
classDef two fill:#f3a2a8,stroke:#333,stroke-width:2px;
classDef three fill:#fbd4b3,stroke:#333,stroke-width:2px;
%% 应用样式类，markdown里没效果
class A one
class B two
A --管道运算符--&gt; B
</div>

<p>举个栗子 通过管道运算符 我们可以把 <code>/</code>的目录信息通过<code>less</code>命令打印出来</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@golinux playground<span class="token punctuation">]</span><span class="token comment"># ll / | less</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>管道通常用于对数据执行复杂的操作。 可以将几个命令放到管道中。 通常，以这种方式使用的命令称为过滤器。 过滤器接受输入，以某种方式对其进行更改，然后输出。 我们将尝试的第一个是<code>sort</code>。 想象我们想在<code>/bin</code>和<code>/usr/bin</code>中列出所有可执行程序的组合列表，将它们按排序顺序放置，然后查看结果列表。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /bin /usr/bin/ <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">less</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p><code>&gt;</code>与 <code>|</code>的区别</p>
<p>简单来讲，重定向操作符<code>&gt;</code>将命令与文件连接，而管道操作符<code>|</code>将一个命令的输出与第二个命令的输入连接。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">command1 <span class="token operator">></span> file1
command1 <span class="token operator">|</span> command2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>EN</th>
<th>ZH</th>
</tr>
</thead>
<tbody><tr>
<td>uniq</td>
<td>Report or Omit Repeated Lines</td>
<td>忽略重复的行</td>
</tr>
<tr>
<td>wc</td>
<td>Print Line, Word, and Byte Counts</td>
<td>打印行数，字数和字节数</td>
</tr>
<tr>
<td>grep</td>
<td>Print Lines Matching a Pattern</td>
<td>匹配模式</td>
</tr>
<tr>
<td>head/tail</td>
<td>Print First/Last Part of Files</td>
<td>打印文件的最前/最后一部分</td>
</tr>
<tr>
<td>tee</td>
<td>Read from Stdin and Output to Stdout and Files</td>
<td>从Stdin读取并输出到Stdout和文件</td>
</tr>
</tbody></table>
<h2 id="07-Seeing-the-World-as-the-Shell-Sees-it-用脚本解决问题"><a href="#07-Seeing-the-World-as-the-Shell-Sees-it-用脚本解决问题" class="headerlink" title="07 - Seeing the World as the Shell Sees it 用脚本解决问题"></a>07 - Seeing the World as the Shell Sees it 用脚本解决问题</h2><h2 id="08-Advanced-Keyboard-Tricks-高级键盘技巧"><a href="#08-Advanced-Keyboard-Tricks-高级键盘技巧" class="headerlink" title="08 - Advanced Keyboard Tricks 高级键盘技巧"></a>08 - Advanced Keyboard Tricks 高级键盘技巧</h2><h2 id="09-Permissions-权限"><a href="#09-Permissions-权限" class="headerlink" title="09 - Permissions 权限"></a>09 - Permissions 权限</h2><h2 id="10-Processes-进程"><a href="#10-Processes-进程" class="headerlink" title="10 -  Processes 进程"></a>10 -  Processes 进程</h2><h2 id="11-The-Environment-环境"><a href="#11-The-Environment-环境" class="headerlink" title="11 - The Environment 环境"></a>11 - The Environment 环境</h2><h2 id="12-A-Gentle-Introduction-to-VIM-一个柔和的-VIM-介绍"><a href="#12-A-Gentle-Introduction-to-VIM-一个柔和的-VIM-介绍" class="headerlink" title="12 - A Gentle Introduction to VIM 一个柔和的 VIM 介绍"></a>12 - A Gentle Introduction to VIM 一个柔和的 VIM 介绍</h2><h2 id="13-Customizing-the-Prompt-自定义提示"><a href="#13-Customizing-the-Prompt-自定义提示" class="headerlink" title="13 - Customizing the Prompt 自定义提示"></a>13 - Customizing the Prompt 自定义提示</h2>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发规范</title>
    <url>/2021/01/25/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<blockquote>
<p>此规范基于 <a href="https://w3ctim.com/post/1d821dd8">阿里前端开发规范 | Tim</a> 并结合实际项目进行部分修改</p>
</blockquote>
<h2 id="一、编程规约"><a href="#一、编程规约" class="headerlink" title="一、编程规约"></a>一、编程规约</h2><h3 id="一-命名规范"><a href="#一-命名规范" class="headerlink" title="(一) 命名规范"></a>(一) 命名规范</h3><h4 id="1-1-1-项目命名"><a href="#1-1-1-项目命名" class="headerlink" title="1.1.1 项目命名"></a>1.1.1 项目命名</h4><p>全部采用小写方式， 以中划线分隔。</p>
<p>正例：<code>mall-management-system</code></p>
<p>反例：<code>mall_management-system / mallManagementSystem</code></p>
<h4 id="1-1-2-目录命名"><a href="#1-1-2-目录命名" class="headerlink" title="1.1.2 目录命名"></a>1.1.2 目录命名</h4><p>全部采用小写方式， 以中划线分隔，有复数结构时，要采用复数命名法， 缩写不用复数</p>
<p>正例： <code>scripts / styles / components / images / utils / layouts / demo-styles / demo-scripts / img / doc</code></p>
<p>反例： <code>script / style / demo_scripts / demoStyles / imgs / docs</code></p>
<p><strong>【特殊】</strong>Vue 项目中的 components 和 view 中的组件目录和组件名，使用单词大写开头 (PascalCase) 命名</p>
<p>正例： <code>HeadSearch / PageLoading</code></p>
<p>反例： <code>head-search / page-loading / mycomponent / myComponent</code></p>
<h4 id="1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名"><a href="#1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名" class="headerlink" title="1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名"></a>1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名</h4><p>全部采用小写方式， 以中划线分隔</p>
<p>正例： <code>render-dom.js / signup.css / index.html / company-logo.png</code></p>
<p>反例： <code>renderDom.js / UserManagement.html</code></p>
<h4 id="1-1-4-命名严谨性"><a href="#1-1-4-命名严谨性" class="headerlink" title="1.1.4 命名严谨性"></a>1.1.4 命名严谨性</h4><p>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用</p>
<p>正例：<code>henan / luoyang / rmb 等国际通用的名称，可视同英文。</code></p>
<p>反例：<code>DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3</code></p>
<p><strong>杜绝完全不规范的缩写，避免望文不知义：</strong></p>
<p>反例：AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。</p>
<h3 id="二-HTML-规范-（Vue-Template-同样适用）"><a href="#二-HTML-规范-（Vue-Template-同样适用）" class="headerlink" title="(二) HTML 规范 （Vue Template 同样适用）"></a>(二) HTML 规范 （Vue Template 同样适用）</h3><h4 id="1-2-1-HTML-类型"><a href="#1-2-1-HTML-类型" class="headerlink" title="1.2.1 HTML 类型"></a>1.2.1 HTML 类型</h4><p>推荐使用 HTML5 的文档类型申明：<br>（建议使用 text/html 格式的 HTML。避免使用 XHTML。XHTML 以及它的属性，比如 application/xhtml+xml 在浏览器中的应用支持与优化空间都十分有限）。</p>
<ul>
<li>规定字符编码</li>
<li>IE 兼容模式</li>
<li>doctype 大写</li>
</ul>
<p>正例：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=Edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Page title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/company-logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Company<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="1-2-2-缩进"><a href="#1-2-2-缩进" class="headerlink" title="1.2.2 缩进"></a>1.2.2 缩进</h4><p>缩进使用 2 个空格（一个 tab）</p>
<p>嵌套的节点应该缩进。</p>
<h4 id="1-2-3-分块注释"><a href="#1-2-3-分块注释" class="headerlink" title="1.2.3 分块注释"></a>1.2.3 分块注释</h4><p>在每一个块状元素，列表元素和表格元素后，加上一对 HTML 注释。注释格式</p>
<p>正例：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- header 头部 start --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!-- 图片会把a标签给撑开，所以不用设置a标签的大小 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/header.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- header 头部 end --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-2-4-语义化标签"><a href="#1-2-4-语义化标签" class="headerlink" title="1.2.4 语义化标签"></a>1.2.4 语义化标签</h3><p>HTML5 中新增很多语义化标签，所以优先使用语义化标签，避免一个页面都是 div 或者 p 标签</p>
<p>正例</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>反例</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="1-2-5-引号"><a href="#1-2-5-引号" class="headerlink" title="1.2.5 引号"></a>1.2.5 引号</h4><p>使用双引号(“ “) 而不是单引号(‘ ‘) 。</p>
<h3 id="三-CSS-规范"><a href="#三-CSS-规范" class="headerlink" title="(三) CSS 规范"></a>(三) CSS 规范</h3><h4 id="1-3-1-命名"><a href="#1-3-1-命名" class="headerlink" title="1.3.1 命名"></a>1.3.1 命名</h4><ul>
<li>类名使用小写字母，以中划线分隔</li>
<li>id 采用驼峰式命名</li>
<li>scss 中的变量、函数、混合、placeholder 采用驼峰式命名</li>
</ul>
<p>ID 和 class 的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称</p>
<p>不推荐：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.fw-800</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> 800<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.red</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>推荐:</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.heavy</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> 800<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.important</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="1-3-2-选择器"><a href="#1-3-2-选择器" class="headerlink" title="1.3.2 选择器"></a>1.3.2 选择器</h4><ol>
<li><p>CSS 选择器中避免使用标签名<br>从结构、表现、行为分离的原则来看，应该尽量避免 CSS 中出现 HTML 标签，并且在 CSS 选择器中出现标签名会存在潜在的问题。</p>
</li>
<li><p>很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。然而，在任何情况下，这是一个非常不好的做法。如果你不写很通用的，需要匹配到 DOM 末端的选择器， 你应该总是考虑直接子选择器。</p>
</li>
</ol>
<p>不推荐:</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.content .title</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>推荐:</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.content > .title</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="1-3-3-尽量使用缩写属性"><a href="#1-3-3-尽量使用缩写属性" class="headerlink" title="1.3.3 尽量使用缩写属性"></a>1.3.3 尽量使用缩写属性</h4><p>不推荐：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border-top-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token property">font-family</span><span class="token punctuation">:</span> palatino<span class="token punctuation">,</span> georgia<span class="token punctuation">,</span> serif<span class="token punctuation">;</span>
<span class="token property">font-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token property">line-height</span><span class="token punctuation">:</span> 1.6<span class="token punctuation">;</span>
<span class="token property">padding-bottom</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>
<span class="token property">padding-left</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>
<span class="token property">padding-right</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>
<span class="token property">padding-top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>推荐：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border-top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token property">font</span><span class="token punctuation">:</span> 100%/1.6 palatino<span class="token punctuation">,</span> georgia<span class="token punctuation">,</span> serif<span class="token punctuation">;</span>
<span class="token property">padding</span><span class="token punctuation">:</span> 0 1em 2em<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="1-3-4-每个选择器及属性独占一行"><a href="#1-3-4-每个选择器及属性独占一行" class="headerlink" title="1.3.4 每个选择器及属性独占一行"></a>1.3.4 每个选择器及属性独占一行</h4><p>不推荐：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">button</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #00a0e9<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>推荐：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">button</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #00a0e9<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="1-3-5-省略-0-后面的单位"><a href="#1-3-5-省略-0-后面的单位" class="headerlink" title="1.3.5 省略 0 后面的单位"></a>1.3.5 省略 0 后面的单位</h4><p>不推荐：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>
  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0em<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>推荐：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>
  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="1-3-6-避免使用-ID-选择器及全局标签选择器防止污染全局样式"><a href="#1-3-6-避免使用-ID-选择器及全局标签选择器防止污染全局样式" class="headerlink" title="1.3.6 避免使用 ID 选择器及全局标签选择器防止污染全局样式"></a>1.3.6 避免使用 ID 选择器及全局标签选择器防止污染全局样式</h4><p>不推荐：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>
  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>推荐：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.header</span> <span class="token punctuation">&#123;</span>
  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="四-SCSS-规范"><a href="#四-SCSS-规范" class="headerlink" title="(四) SCSS 规范"></a>(四) SCSS 规范</h3><h4 id="1-4-1-代码组织"><a href="#1-4-1-代码组织" class="headerlink" title="1.4.1 代码组织"></a>1.4.1 代码组织</h4><h5 id="1-将公共-scss-文件放置在-src-assets-styles-文件夹"><a href="#1-将公共-scss-文件放置在-src-assets-styles-文件夹" class="headerlink" title="1) 将公共 scss 文件放置在 src/assets/styles 文件夹"></a>1) 将公共 scss 文件放置在 src/assets/styles 文件夹</h5><p>例：<code>variables.scss / mixin.scss</code></p>
<h5 id="2-按以下顺序组织"><a href="#2-按以下顺序组织" class="headerlink" title="2) 按以下顺序组织"></a>2) 按以下顺序组织</h5><ol>
<li>@import</li>
<li>变量声明</li>
<li>样式声明</li>
</ol>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@import</span> <span class="token string">'mixins/size.less'</span><span class="token punctuation">;</span>

<span class="token atrule"><span class="token rule">@default-text-color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>

.page</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 960px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="1-4-2-避免嵌套层级过多"><a href="#1-4-2-避免嵌套层级过多" class="headerlink" title="1.4.2 避免嵌套层级过多"></a>1.4.2 避免嵌套层级过多</h4><p>将嵌套深度限制在 3 级。对于超过 4 级的嵌套，给予重新评估。这可以避免出现过于详实的 CSS 选择器。<br>避免大量的嵌套规则。当可读性受到影响时，将之打断。推荐避免出现多于 20 行的嵌套规则出现</p>
<p>不推荐：</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.main </span><span class="token punctuation">&#123;</span>
  <span class="token selector">.title </span><span class="token punctuation">&#123;</span>
    <span class="token selector">.name </span><span class="token punctuation">&#123;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>推荐：</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.main-title </span><span class="token punctuation">&#123;</span>
  <span class="token selector">.name </span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="五-Javascript-规范"><a href="#五-Javascript-规范" class="headerlink" title="(五) Javascript 规范"></a>(五) Javascript 规范</h3><h4 id="1-5-1-命名"><a href="#1-5-1-命名" class="headerlink" title="1.5.1 命名"></a>1.5.1 命名</h4><h5 id="1-采用小写驼峰命名-lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束"><a href="#1-采用小写驼峰命名-lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束" class="headerlink" title="1) 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束"></a>1) 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束</h5><p>反例： <code>_name / name_ / name$</code></p>
<h5 id="2-方法名、参数名、成员变量、局部变量都统一使用-lowerCamelCase-风格，必须遵从驼峰形式。"><a href="#2-方法名、参数名、成员变量、局部变量都统一使用-lowerCamelCase-风格，必须遵从驼峰形式。" class="headerlink" title="2) 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。"></a>2) 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。</h5><p>正例： <code>localValue / getHttpMessage() / inputUserId</code></p>
<p><strong>其中 method 方法命名必须是 动词 或者 动词+名词 形式</strong></p>
<p>正例：<code>saveShopCarData /openShopCarInfoDialog</code></p>
<p>反例：<code>save / open / show / go</code></p>
<p><strong>特此说明，增删查改，详情统一使用如下 5 个单词，不得使用其他（目的是为了统一各个端）</strong></p>
<pre class="line-numbers language-none"><code class="language-none">add &#x2F; update &#x2F; delete &#x2F; detail &#x2F; get<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>附： 函数方法常用的动词:</strong></p>
<pre class="line-numbers language-none"><code class="language-none">get 获取&#x2F;set 设置,
add 增加&#x2F;remove 删除
create 创建&#x2F;destory 移除
start 启动&#x2F;stop 停止
open 打开&#x2F;close 关闭,
read 读取&#x2F;write 写入
load 载入&#x2F;save 保存,
create 创建&#x2F;destroy 销毁
begin 开始&#x2F;end 结束,
backup 备份&#x2F;restore 恢复
import 导入&#x2F;export 导出,
split 分割&#x2F;merge 合并
inject 注入&#x2F;extract 提取,
attach 附着&#x2F;detach 脱离
bind 绑定&#x2F;separate 分离,
view 查看&#x2F;browse 浏览
edit 编辑&#x2F;modify 修改,
select 选取&#x2F;mark 标记
copy 复制&#x2F;paste 粘贴,
undo 撤销&#x2F;redo 重做
insert 插入&#x2F;delete 移除,
add 加入&#x2F;append 添加
clean 清理&#x2F;clear 清除,
index 索引&#x2F;sort 排序
find 查找&#x2F;search 搜索,
increase 增加&#x2F;decrease 减少
play 播放&#x2F;pause 暂停,
launch 启动&#x2F;run 运行
compile 编译&#x2F;execute 执行,
debug 调试&#x2F;trace 跟踪
observe 观察&#x2F;listen 监听,
build 构建&#x2F;publish 发布
input 输入&#x2F;output 输出,
encode 编码&#x2F;decode 解码
encrypt 加密&#x2F;decrypt 解密,
compress 压缩&#x2F;decompress 解压缩
pack 打包&#x2F;unpack 解包,
parse 解析&#x2F;emit 生成
connect 连接&#x2F;disconnect 断开,
send 发送&#x2F;receive 接收
download 下载&#x2F;upload 上传,
refresh 刷新&#x2F;synchronize 同步
update 更新&#x2F;revert 复原,
lock 锁定&#x2F;unlock 解锁
check out 签出&#x2F;check in 签入,
submit 提交&#x2F;commit 交付
push 推&#x2F;pull 拉,
expand 展开&#x2F;collapse 折叠
begin 起始&#x2F;end 结束,
start 开始&#x2F;finish 完成
enter 进入&#x2F;exit 退出,
abort 放弃&#x2F;quit 离开
obsolete 废弃&#x2F;depreciate 废旧,
collect 收集&#x2F;aggregate 聚集<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="3-常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。"><a href="#3-常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。" class="headerlink" title="3) 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。"></a>3) 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</h5><p>正例： <code>MAX_STOCK_COUNT</code></p>
<p>反例： <code>MAX_COUNT</code></p>
<h4 id="1-5-2-代码格式"><a href="#1-5-2-代码格式" class="headerlink" title="1.5.2 代码格式"></a>1.5.2 代码格式</h4><h5 id="1-使用-2-个空格进行缩进"><a href="#1-使用-2-个空格进行缩进" class="headerlink" title="1) 使用 2 个空格进行缩进"></a>1) 使用 2 个空格进行缩进</h5><p>正例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  x <span class="token operator">+=</span> <span class="token number">10</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  x <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2-不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。"><a href="#2-不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。" class="headerlink" title="2) 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。"></a>2) 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。</h5><blockquote>
<p>说明：任何情形，没有必要插入多个空行进行隔开。</p>
</blockquote>
<h4 id="1-5-3-字符串"><a href="#1-5-3-字符串" class="headerlink" title="1.5.3 字符串"></a>1.5.3 字符串</h4><h5 id="1-统一使用单引号-‘-，不使用双引号-“-。这在创建-HTML-字符串非常有好处："><a href="#1-统一使用单引号-‘-，不使用双引号-“-。这在创建-HTML-字符串非常有好处：" class="headerlink" title="1) 统一使用单引号(‘)，不使用双引号(“)。这在创建 HTML 字符串非常有好处："></a>1) 统一使用单引号(‘)，不使用双引号(“)。这在创建 HTML 字符串非常有好处：</h5><p>正例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'foo'</span>
<span class="token keyword">let</span> testDiv <span class="token operator">=</span> <span class="token string">'&lt;div id="test">&lt;/div>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>反例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'foo'</span>
<span class="token keyword">let</span> testDiv <span class="token operator">=</span> <span class="token string">"&lt;div id='test'>&lt;/div>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h5 id="2-字符串拼接统一使用-ES6-模板字符串处理"><a href="#2-字符串拼接统一使用-ES6-模板字符串处理" class="headerlink" title="2) 字符串拼接统一使用 ES6 模板字符串处理"></a>2) 字符串拼接统一使用 ES6 模板字符串处理</h5><p>正例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token string">'Tom'</span>
<span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token string">'Hanks'</span>
<span class="token keyword">const</span> fullName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>firstName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>lastName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>反例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token string">'Tom'</span>
<span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token string">'Hanks'</span>
<span class="token keyword">const</span> fullName <span class="token operator">=</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> lastName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="1-5-4-对象声明"><a href="#1-5-4-对象声明" class="headerlink" title="1.5.4 对象声明"></a>1.5.4 对象声明</h4><h5 id="1-使用字面值创建对象"><a href="#1-使用字面值创建对象" class="headerlink" title="1) 使用字面值创建对象"></a>1) 使用字面值创建对象</h5><p>正例： <code>let user = &#123;&#125;;</code></p>
<p>反例： <code>let user = new Object();</code></p>
<h5 id="2-使用字面量来代替对象构造器"><a href="#2-使用字面量来代替对象构造器" class="headerlink" title="2) 使用字面量来代替对象构造器"></a>2) 使用字面量来代替对象构造器</h5><p>正例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  age<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  city<span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>反例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span>
user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token number">0</span>
user<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="1-5-5-使用-ES6-ES7"><a href="#1-5-5-使用-ES6-ES7" class="headerlink" title="1.5.5 使用 ES6,ES7"></a>1.5.5 使用 ES6,ES7</h4><p>必须优先使用 ES6,ES7 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复用。</p>
<blockquote>
<p>必须强制使用 ES6, ES7 的新语法，比如箭头函数、await/async，解构，let，for…of 等等</p>
</blockquote>
<h4 id="1-5-6-括号"><a href="#1-5-6-括号" class="headerlink" title="1.5.6 括号"></a>1.5.6 括号</h4><p>下列关键字后必须有大括号（即使代码块的内容只有一行）：<code>if, else, for, while, do, switch, try, catch, finally, with</code>。</p>
<p>正例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>反例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="1-5-7-undefined-判断"><a href="#1-5-7-undefined-判断" class="headerlink" title="1.5.7 undefined 判断"></a>1.5.7 undefined 判断</h4><p>永远不要直接使用 <code>undefined</code> 进行变量判断；使用 <code>typeof</code> 和字符串 <code>&#39;undefined&#39;</code> 对变量进行判断。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> person <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>反例：1</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// person 为 null 也是 true</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>反例：2 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined">MDN 也有说明</a></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">...</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// JavaScript 设计问题， undefined 可以全局作用域中被当作标识符（变量名）来使用</span>
<span class="token comment">// 因为 undefined 不是一个保留字</span>
<span class="token comment">// 不要这样做！</span>

<span class="token comment">// 打印 'foo string' PS：说明undefined的值和类型都已经改变</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">var</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 打印 'foo string' PS：说明undefined的值和类型都已经改变</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">undefined</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="1-5-8-条件判断和循环最多三层"><a href="#1-5-8-条件判断和循环最多三层" class="headerlink" title="1.5.8 条件判断和循环最多三层"></a>1.5.8 条件判断和循环最多三层</h4><p>条件判断能使用三目运算符和逻辑运算符解决的，就不要使用条件判断，但是谨记不要写太长的三目运算符。如果超过 3 层请抽成函数，并写清楚注释。</p>
<h4 id="1-5-9-this-的转换命名"><a href="#1-5-9-this-的转换命名" class="headerlink" title="1.5.9 this 的转换命名"></a>1.5.9 this 的转换命名</h4><p>对上下文 <code>this</code> 的引用只能使用 <code>self</code> 来命名</p>
<h4 id="1-5-10-慎用-console-log"><a href="#1-5-10-慎用-console-log" class="headerlink" title="1.5.10 慎用 console.log"></a>1.5.10 慎用 <code>console.log</code></h4><p>因 <code>console.log</code> 大量使用会有性能问题，所以在非 <code>webpack</code> 项目中谨慎使用 log 功能</p>
<h2 id="二、Vue-项目规范"><a href="#二、Vue-项目规范" class="headerlink" title="二、Vue 项目规范"></a>二、Vue 项目规范</h2><h3 id="一-Vue-编码基础"><a href="#一-Vue-编码基础" class="headerlink" title="(一) Vue 编码基础"></a>(一) Vue 编码基础</h3><p>二、Vue 项目规范以 Vue 官方规范 （<a href="https://cn.vuejs.org/v2/style-guide/%EF%BC%89">https://cn.vuejs.org/v2/style-guide/）</a> 中的 A 规范为基础，在其上面进行项目开发，故所有代码均遵守该规范。</p>
<blockquote>
<p>请仔仔细细阅读 Vue 官方规范，切记，此为第一步。</p>
</blockquote>
<h4 id="2-1-1-组件规范"><a href="#2-1-1-组件规范" class="headerlink" title="2.1.1. 组件规范"></a>2.1.1. 组件规范</h4><h5 id="1-组件名为多个单词。"><a href="#1-组件名为多个单词。" class="headerlink" title="1) 组件名为多个单词。"></a>1) 组件名为多个单词。</h5><p>组件名应该始终是多个单词组成（大于等于 2），且命名规范为 <code>CamelCase</code> 格式。<br>这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。</p>
<p>正例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'TodoItem'</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>反例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'todo'</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'todo-item'</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2-组件文件名为-CamelCase-格式"><a href="#2-组件文件名为-CamelCase-格式" class="headerlink" title="2) 组件文件名为 CamelCase 格式"></a>2) 组件文件名为 CamelCase 格式</h5><p>正例：</p>
<pre class="line-numbers language-none"><code class="language-none">components&#x2F;
|- MyComponent.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>反例：</p>
<pre class="line-numbers language-none"><code class="language-none">components&#x2F;
|- myComponent.vue
|- my-component.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h5 id="3-基础组件文件名为-base-开头，使用完整单词而不是缩写。"><a href="#3-基础组件文件名为-base-开头，使用完整单词而不是缩写。" class="headerlink" title="3) 基础组件文件名为 base 开头，使用完整单词而不是缩写。"></a>3) 基础组件文件名为 base 开头，使用完整单词而不是缩写。</h5><p>正例：</p>
<pre class="line-numbers language-none"><code class="language-none">components&#x2F;
|- BaseButton.vue
|- BaseTable.vue
|- BaseIcon.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>反例：</p>
<pre class="line-numbers language-none"><code class="language-none">components&#x2F;
|- MyButton.vue
|- VueTable.vue
|- Icon.vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="4-和父组件紧密耦合的子组件应该以父组件名作为前缀命名"><a href="#4-和父组件紧密耦合的子组件应该以父组件名作为前缀命名" class="headerlink" title="4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名"></a>4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名</h5><p>正例：</p>
<pre class="line-numbers language-none"><code class="language-none">components&#x2F;
|- TodoList.vue
|- TodoListItem.vue
|- TodoListItemNutton.vue
|- UserProfileOptions.vue （完整单词）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>反例：</p>
<pre class="line-numbers language-none"><code class="language-none">components&#x2F;
|- TodoList.vue
|- TodoItem.vue
|- TodoButton.vue
|- UProfOpts.vue （使用了缩写）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="5-在-Template-模版中使用组件，应使用-PascalCase-模式，并且使用自闭合组件。"><a href="#5-在-Template-模版中使用组件，应使用-PascalCase-模式，并且使用自闭合组件。" class="headerlink" title="5) 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件。"></a>5) 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件。</h5><p>正例：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 在单文件组件、字符串模板和 JSX 中 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>row</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">:column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>row</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>反例：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Row</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">:column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Row</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="6-组件的-data-必须是一个函数"><a href="#6-组件的-data-必须是一个函数" class="headerlink" title="6) 组件的 data 必须是一个函数"></a>6) 组件的 data 必须是一个函数</h5><p>当在组件中使用 data 属性的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数。 因为如果直接是一个对象的话，子组件之间的属性值会互相影响。</p>
<p>正例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      name<span class="token operator">:</span> <span class="token string">'jack'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>反例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">'jack'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="7-Prop-定义应该尽量详细"><a href="#7-Prop-定义应该尽量详细" class="headerlink" title="7) Prop 定义应该尽量详细"></a>7) Prop 定义应该尽量详细</h5><ul>
<li>必须使用 camelCase 驼峰命名</li>
<li>必须指定类型</li>
<li>如果变量名不能表达其含义，必须加上注释，表明其含义</li>
<li>必须加上 required 或者 default，两者二选其一</li>
<li>如果有业务需要，必须加上 validator 验证</li>
</ul>
<p>正例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 组件状态，用于控制组件的颜色</span>
   status<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
     type<span class="token operator">:</span> String<span class="token punctuation">,</span>
     required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
     <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token keyword">return</span> <span class="token punctuation">[</span>
         <span class="token string">'succ'</span><span class="token punctuation">,</span>
         <span class="token string">'info'</span><span class="token punctuation">,</span>
         <span class="token string">'error'</span>
       <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>
     <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">// 用户级别，用于显示皇冠个数</span>
   userLevel：<span class="token punctuation">&#123;</span>
      type<span class="token operator">:</span> String<span class="token punctuation">,</span>
      required<span class="token operator">:</span> <span class="token boolean">true</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="8-为组件样式设置作用域"><a href="#8-为组件样式设置作用域" class="headerlink" title="8) 为组件样式设置作用域"></a>8) 为组件样式设置作用域</h5><p>正例：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;button class&#x3D;&quot;btn btn-close&quot;&gt;X&lt;&#x2F;button&gt;
&lt;&#x2F;template&gt;

&lt;!-- 使用 &#96;scoped&#96; 特性 --&gt;
&lt;style scoped&gt;
.btn-close &#123;
  background-color: red;
&#125;
&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>反例：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;button class&#x3D;&quot;btn btn-close&quot;&gt;X&lt;&#x2F;button&gt;
&lt;&#x2F;template&gt;
&lt;!-- 没有使用 &#96;scoped&#96; 特性 --&gt;
&lt;style&gt;
.btn-close &#123;
  background-color: red;
&#125;
&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="9-如果特性元素较多，应该主动换行。"><a href="#9-如果特性元素较多，应该主动换行。" class="headerlink" title="9) 如果特性元素较多，应该主动换行。"></a>9) 如果特性元素较多，应该主动换行。</h5><p>正例：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;ym-table :isLoading&#x3D;&quot;isTableLoading&quot; :tableData&#x3D;&quot;tableData&quot; :pageTotal&#x3D;&quot;pageTotal&quot; :pageNum&#x3D;&quot;pageNum&quot; :pageSize&#x3D;&quot;pageSize&quot; @page-num-change&#x3D;&quot;handlePageNumChange&quot; @page-size-change&#x3D;&quot;handlePageSizeChange&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>反例：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;ym-table :isLoading&#x3D;&quot;isTableLoading&quot; :tableData&#x3D;&quot;tableData&quot; :pageTotal&#x3D;&quot;pageTotal&quot; :pageNum&#x3D;&quot;pageNum&quot; :pageSize&#x3D;&quot;pageSize&quot; @page-num-change&#x3D;&quot;handlePageNumChange&quot; @page-size-change&#x3D;&quot;handlePageSizeChange&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2-1-2-模板中使用简单的表达式"><a href="#2-1-2-模板中使用简单的表达式" class="headerlink" title="2.1.2. 模板中使用简单的表达式"></a>2.1.2. 模板中使用简单的表达式</h4><p>组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。</p>
<p>正例：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;p&gt;&#123;&#123; normalizedFullName &#125;&#125;&lt;&#x2F;p&gt;
&lt;&#x2F;template&gt;

&lt;script&gt;
&#x2F;&#x2F; 复杂表达式已经移入一个计算属性
computed: &#123;
  normalizedFullName: function () &#123;
    return this.fullName.split(&#39; &#39;).map(function (word) &#123;
      return word[0].toUpperCase() + word.slice(1)
    &#125;).join(&#39; &#39;)
  &#125;
&#125;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>反例：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;p&gt;
    &#123;&#123;
      fullName
        .split(&#39; &#39;)
        .map(function (word) &#123;
          return word[0].toUpperCase() + word.slice(1)
        &#125;)
        .join(&#39; &#39;)
    &#125;&#125;
  &lt;&#x2F;p&gt;
&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-1-3-指令都使用缩写形式"><a href="#2-1-3-指令都使用缩写形式" class="headerlink" title="2.1.3 指令都使用缩写形式"></a>2.1.3 指令都使用缩写形式</h4><p>指令推荐都使用缩写形式，(用 : 表示 v-bind: 、用 @ 表示 v-on: 和用 # 表示 v-slot:)</p>
<p>正例：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;input :text&#x3D;&quot;text&quot; @change&#x3D;&quot;onChange&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>反例：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;input v-bind:text&#x3D;&quot;text&quot; v-on:change&#x3D;&quot;onChange&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2-1-4-标签顺序保持一致"><a href="#2-1-4-标签顺序保持一致" class="headerlink" title="2.1.4 标签顺序保持一致"></a>2.1.4 标签顺序保持一致</h4><p>单文件组件应该总是让标签顺序保持为 `</p>
<p>正例：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;...&lt;&#x2F;template&gt;
&lt;script&gt;
...
&lt;&#x2F;script&gt;
&lt;style&gt;
...;
&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>反例：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;...&lt;&#x2F;template&gt;
&lt;style&gt;
...
&lt;&#x2F;style&gt;
&lt;script&gt;
...
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-1-5-必须为-v-for-设置键值-key"><a href="#2-1-5-必须为-v-for-设置键值-key" class="headerlink" title="2.1.5 必须为 v-for 设置键值 key"></a>2.1.5 必须为 v-for 设置键值 key</h4><h4 id="2-1-6-v-show-与-v-if-选择"><a href="#2-1-6-v-show-与-v-if-选择" class="headerlink" title="2.1.6 v-show 与 v-if 选择"></a>2.1.6 v-show 与 v-if 选择</h4><p>如果运行时，需要非常频繁地切换，使用 v-show ；如果在运行时，条件很少改变，使用 v-if。</p>
<h4 id="2-1-7-script-标签内部结构顺序"><a href="#2-1-7-script-标签内部结构顺序" class="headerlink" title="2.1.7 script 标签内部结构顺序"></a>2.1.7 script 标签内部结构顺序</h4><p>components &gt; props &gt; data &gt; computed &gt; watch &gt; filter &gt; 钩子函数（钩子函数按其执行顺序） &gt; methods</p>
<h4 id="2-1-8-Vue-Router-规范"><a href="#2-1-8-Vue-Router-规范" class="headerlink" title="2.1.8 Vue Router 规范"></a>2.1.8 Vue Router 规范</h4><h5 id="1-页面跳转数据传递使用路由参数"><a href="#1-页面跳转数据传递使用路由参数" class="headerlink" title="1) 页面跳转数据传递使用路由参数"></a>1) 页面跳转数据传递使用路由参数</h5><p>页面跳转，例如 A 页面跳转到 B 页面，需要将 A 页面的数据传递到 B 页面，推荐使用 路由参数进行传参，而不是将需要传递的数据保存 vuex，然后在 B 页面取出 vuex 的数据，因为如果在 B 页面刷新会导致 vuex 数据丢失，导致 B 页面无法正常显示数据。</p>
<p>正例：</p>
<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">let id &#x3D; &#39; 123&#39;;
this.$router.push(&#123; name: &#39;userCenter&#39;, query: &#123; id: id &#125; &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h5 id="2-使用路由懒加载（延迟加载）机制"><a href="#2-使用路由懒加载（延迟加载）机制" class="headerlink" title="2) 使用路由懒加载（延迟加载）机制"></a>2) 使用路由懒加载（延迟加载）机制</h5><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#123;
    path: &#39;&#x2F;uploadAttachment&#39;,
    name: &#39;uploadAttachment&#39;,
    meta: &#123;
      title: &#39;上传附件&#39;
    &#125;,
    component: () &#x3D;&gt; import(&#39;@&#x2F;view&#x2F;components&#x2F;uploadAttachment&#x2F;index.vue&#39;)
  &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="3-router-中的命名规范"><a href="#3-router-中的命名规范" class="headerlink" title="3) router 中的命名规范"></a>3) router 中的命名规范</h5><p>path、childrenPoints 命名规范采用 <code>kebab-case</code> 命名规范（尽量 Vue 文件的目录结构保持一致，因为目录、文件名都是 <code>kebab-case</code>，这样很方便找到对应的文件）</p>
<p>name 命名规范采用 <code>KebabCase</code> 命名规范且和 component 组件名保持一致！（因为要保持 keep-alive 特性，keep-alive 按照 component 的 name 进行缓存，所以两者必须高度保持一致）</p>
<p>JavaScript</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 动态加载
export const reload &#x3D; [
  &#123;
    path: &#39;&#x2F;reload&#39;,
    name: &#39;reload&#39;,
    component: Main,
    meta: &#123;
      title: &#39;动态加载&#39;,
      icon: &#39;icon iconfont&#39;
    &#125;,

    children: [
      &#123;
        path: &#39;&#x2F;reload&#x2F;smart-reload-list&#39;,
        name: &#39;SmartReloadList&#39;,
        meta: &#123;
          title: &#39;SmartReload&#39;,
          childrenPoints: [
            &#123;
              title: &#39;查询&#39;,
              name: &#39;smart-reload-search&#39;
            &#125;,
            &#123;
              title: &#39;执行reload&#39;,
              name: &#39;smart-reload-update&#39;
            &#125;,
            &#123;
              title: &#39;查看执行结果&#39;,
              name: &#39;smart-reload-result&#39;
            &#125;
          ]
        &#125;,
        component: () &#x3D;&gt;
          import(&#39;@&#x2F;views&#x2F;reload&#x2F;smart-reload&#x2F;smart-reload-list.vue&#39;)
      &#125;
    ]
  &#125;
];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="4-router-中的-path-命名规范"><a href="#4-router-中的-path-命名规范" class="headerlink" title="4) router 中的 path 命名规范"></a>4) router 中的 path 命名规范</h5><p>path 除了采用 <code>kebab-case</code> 命名规范以外，必须以 / 开头，即使是 children 里的 path 也要以 / 开头。如下示例</p>
<p>目的：</p>
<p>经常有这样的场景：某个页面有问题，要立刻找到这个 vue 文件，如果不用以/开头，path 为 parent 和 children 组成的，可能经常需要在 router 文件里搜索多次才能找到，而如果以 / 开头，则能立刻搜索到对应的组件</p>
<p>JavaScript</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/file'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'File'</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span> Main<span class="token punctuation">,</span>
    meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      title<span class="token operator">:</span> <span class="token string">'文件服务'</span><span class="token punctuation">,</span>
      icon<span class="token operator">:</span> <span class="token string">'ios-cloud-upload'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    children<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        path<span class="token operator">:</span> <span class="token string">'/file/file-list'</span><span class="token punctuation">,</span>
        name<span class="token operator">:</span> <span class="token string">'FileList'</span><span class="token punctuation">,</span>
        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/file/file-list.vue'</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        path<span class="token operator">:</span> <span class="token string">'/file/file-add'</span><span class="token punctuation">,</span>
        name<span class="token operator">:</span> <span class="token string">'FileAdd'</span><span class="token punctuation">,</span>
        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/file/file-add.vue'</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        path<span class="token operator">:</span> <span class="token string">'/file/file-update'</span><span class="token punctuation">,</span>
        name<span class="token operator">:</span> <span class="token string">'FileUpdate'</span><span class="token punctuation">,</span>
        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/file/file-update.vue'</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="二-Vue-项目目录规范"><a href="#二-Vue-项目目录规范" class="headerlink" title="(二) Vue 项目目录规范"></a>(二) Vue 项目目录规范</h3><h4 id="2-2-1-基础"><a href="#2-2-1-基础" class="headerlink" title="2.2.1 基础"></a>2.2.1 基础</h4><p>vue 项目中的所有命名一定要与后端命名统一。</p>
<p>比如权限：后端 privilege, 前端无论 router , store, api 等都必须使用 privielege 单词！</p>
<h4 id="2-2-2-使用-Vue-cli-脚手架"><a href="#2-2-2-使用-Vue-cli-脚手架" class="headerlink" title="2.2.2 使用 Vue-cli 脚手架"></a>2.2.2 使用 Vue-cli 脚手架</h4><p>使用 vue-cli3 来初始化项目，项目名按照上面的命名规范。</p>
<h4 id="2-2-3-目录说明"><a href="#2-2-3-目录说明" class="headerlink" title="2.2.3 目录说明"></a>2.2.3 目录说明</h4><p>目录名按照上面的命名规范，其中 components 组件用大写驼峰，其余除 components 组件目录外的所有目录均使用 kebab-case 命名。</p>
<pre class="line-numbers language-none"><code class="language-none">├── build                      &#x2F;&#x2F; 构建相关
├── bin                        &#x2F;&#x2F; 执行脚本
├── public                     &#x2F;&#x2F; 公共文件
│   ├── favicon.ico            &#x2F;&#x2F; favicon图标
│   └── index.html             &#x2F;&#x2F; html模板
├── src                        &#x2F;&#x2F; 源代码
│   ├── api                    &#x2F;&#x2F; 所有请求
│   ├── assets                 &#x2F;&#x2F; 主题 字体等静态资源
│   ├── components             &#x2F;&#x2F; 全局公用组件
│   ├── directive              &#x2F;&#x2F; 全局指令
│   ├── layout                 &#x2F;&#x2F; 布局
│   ├── router                 &#x2F;&#x2F; 路由
│   ├── store                  &#x2F;&#x2F; 全局状态管理(Vuex)
│   ├── utils                  &#x2F;&#x2F; 全局公用方法
│   ├── views                  &#x2F;&#x2F; 页面
│   ├── App.vue                &#x2F;&#x2F; 入口页面
│   ├── main.js                &#x2F;&#x2F; 入口 加载组件 初始化等
│   ├── permission.js          &#x2F;&#x2F; 权限管理
│   └── settings.js            &#x2F;&#x2F; 系统配置
├── .editorconfig              &#x2F;&#x2F; 编码格式
├── .env.development           &#x2F;&#x2F; 开发环境配置
├── .env.production            &#x2F;&#x2F; 生产环境配置
├── .env.staging               &#x2F;&#x2F; 测试环境配置
├── .eslintignore              &#x2F;&#x2F; 忽略语法检查
├── .eslintrc.js               &#x2F;&#x2F; eslint 配置项
├── .prettierrc                &#x2F;&#x2F; 代码格式化配置
├── jsconfig.json              &#x2F;&#x2F; 指定了根文件和 JavaScript 语言服务提供的特性的选项
├── .gitignore                 &#x2F;&#x2F; git 忽略项
├── babel.config.js            &#x2F;&#x2F; babel.config.js
├── package.json               &#x2F;&#x2F; package.json
└── vue.config.js              &#x2F;&#x2F; Vue 项目配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="1-api-目录"><a href="#1-api-目录" class="headerlink" title="1) api 目录"></a>1) api 目录</h5><ul>
<li>文件、变量命名尽量与后端保持一致。</li>
<li>此目录对应后端 API 接口，按照后端一个 controller 一个 api js 文件。若项目较大时，可以按照业务划分子目录，并与后端保持一致。</li>
<li>api 中的方法名字要与后端 api url 尽量保持语义高度一致性。</li>
<li>api 中的每个方法要添加注释，注释与后端 swagger 文档保持一致。</li>
<li>api 中的每个方法的参数尽量定义完全，便于调用时参数的查看。</li>
</ul>
<p>正例：</p>
<p>后端 ： EmployeeController.java</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;employee&#x2F;add
&#x2F;employee&#x2F;delete&#x2F;&#123;id&#125;
&#x2F;employee&#x2F;update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>前端： employee.js</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 添加员工</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">addEmployee</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    url<span class="token operator">:</span> <span class="token string">'/employee/add'</span><span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      username<span class="token punctuation">,</span>
      age<span class="token punctuation">,</span>
      gender
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 更新员工信息</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">updateEmployee</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    url<span class="token operator">:</span> <span class="token string">'/employee/update'</span><span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      username<span class="token punctuation">,</span>
      age<span class="token punctuation">,</span>
      gender
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 删除员工</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">deleteEmployee</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">employeeId</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/employee/delete/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>employeeId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">'post'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2-assets-目录"><a href="#2-assets-目录" class="headerlink" title="2) assets 目录"></a>2) assets 目录</h5><p>assets 为静态资源，里面存放 images, styles, icons 等静态资源，静态资源命名格式为 kebab-case</p>
<pre class="line-numbers language-none"><code class="language-none">|assets
|-- icons
|-- images
|   |-- background-color.png
|   |-- upload-header.png
|-- styles<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="3-components-目录"><a href="#3-components-目录" class="headerlink" title="3) components 目录"></a>3) components 目录</h5><p>此目录应按照组件进行目录划分，目录命名为 CamelCase，组件命名规则也为 CamelCase</p>
<pre class="line-numbers language-none"><code class="language-none">|components
|-- ErrorLog
|   |-- index.vue
|   |-- index.scss
|-- MarkdownEditor
|   |-- index.vue
|   |-- index.scss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="4-constants-目录"><a href="#4-constants-目录" class="headerlink" title="4) constants 目录"></a>4) constants 目录</h5><p>此目录存放项目所有常量，如果常量在 vue 中使用，请使用 vue-enum 插件(<a href="https://www.npmjs.com/package/vue-enum">https://www.npmjs.com/package/vue-enum</a>)</p>
<p>目录结构：</p>
<pre class="line-numbers language-none"><code class="language-none">|constants
|-- index.js
|-- role.js
|-- employee.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>例子： employee.js</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">EMPLOYEE_STATUS</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">NORMAL</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    desc<span class="token operator">:</span> <span class="token string">'正常'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token constant">DISABLED</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    desc<span class="token operator">:</span> <span class="token string">'禁用'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token constant">DELETED</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    value<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    desc<span class="token operator">:</span> <span class="token string">'已删除'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">EMPLOYEE_ACCOUNT_TYPE</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">QQ</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    desc<span class="token operator">:</span> <span class="token string">'QQ登录'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token constant">WECHAT</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    value<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    desc<span class="token operator">:</span> <span class="token string">'微信登录'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token constant">DINGDING</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    value<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    desc<span class="token operator">:</span> <span class="token string">'钉钉登录'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token constant">USERNAME</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    value<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
    desc<span class="token operator">:</span> <span class="token string">'用户名密码登录'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">EMPLOYEE_STATUS</span><span class="token punctuation">,</span>
  <span class="token constant">EMPLOYEE_ACCOUNT_TYPE</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="5-router-与-store-目录"><a href="#5-router-与-store-目录" class="headerlink" title="5) router 与 store 目录"></a>5) router 与 store 目录</h5><p>这两个目录一定要将业务进行拆分，不能放到一个 js 文件里。</p>
<p>router 尽量按照 views 中的结构保持一致</p>
<p>store 按照业务进行拆分不同的 js 文件</p>
<h5 id="6-views-目录"><a href="#6-views-目录" class="headerlink" title="6) views 目录"></a>6) views 目录</h5><ul>
<li>命名要与后端、router、api 等保持一致</li>
<li>components 中组件要使用 CamelCase 规则</li>
<li><code>index.vue</code>除外</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">|-- views                            视图目录
|   |-- Role                             role模块名
|   |   |-- RoleList.vue                    role列表页面
|   |   |-- RoleAdd.vue                     role新建页面
|   |   |-- RoleUpdate.vue                  role更新页面
|   |   |-- index.vue                      role模块样式
|   |-- Employee                         employee模块
|   |-- BehaviorLog                      行为日志log模块
|   |-- CodeGenerator                    代码生成器模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-2-4-注释说明"><a href="#2-2-4-注释说明" class="headerlink" title="2.2.4 注释说明"></a>2.2.4 注释说明</h4><ul>
<li>在变量名和函数名不足以表达其含义时才需要注释</li>
<li>公共组件需要注释</li>
<li>store 中的 state, mutation, action 等需要注释</li>
<li>函数的逻辑特别复杂时需要注释</li>
</ul>
<h4 id="2-2-5-其他"><a href="#2-2-5-其他" class="headerlink" title="2.2.5 其他"></a>2.2.5 其他</h4><h5 id="1-尽量不要手动操作-DOM"><a href="#1-尽量不要手动操作-DOM" class="headerlink" title="1) 尽量不要手动操作 DOM"></a>1) 尽量不要手动操作 DOM</h5><p>因使用 Vue 框架，所以在项目开发中尽量使用 Vue 的数据驱动更新 DOM，尽量（不到万不得已）不要手动操作 DOM，包括：增删改 Dom 元素、以及更改样式、添加事件等。</p>
<h5 id="2-删除无用代码"><a href="#2-删除无用代码" class="headerlink" title="2) 删除无用代码"></a>2) 删除无用代码</h5><p>因使用了 Git 代码版本工具，对于无用代码必须及时删除，例如：一些调试的 console 语句、无用的弃用功能代码。</p>
]]></content>
      <tags>
        <tag>规范</tag>
      </tags>
  </entry>
</search>
